<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PrintXHL</title>
  <icon>https://www.gravatar.com/avatar/36ad04c0c0d9ba5ed3745903d32630e7</icon>
  <subtitle>我就想做一点微小的工作</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://printxhl.com/"/>
  <updated>2018-10-15T08:32:07.664Z</updated>
  <id>http://printxhl.com/</id>
  
  <author>
    <name>谢海练</name>
    <email>xiehailian66@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis 部署</title>
    <link href="http://printxhl.com/2018/05/30/DB-Redis/"/>
    <id>http://printxhl.com/2018/05/30/DB-Redis/</id>
    <published>2018-05-30T06:55:04.066Z</published>
    <updated>2018-10-15T08:32:07.664Z</updated>
    
    <content type="html"><![CDATA[<p>##Redis 安装</p><h3 id="下载、编译、安装"><a href="#下载、编译、安装" class="headerlink" title="下载、编译、安装"></a>下载、编译、安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载</span></div><div class="line">wget http://download.redis.io/releases/redis-stable.tar.gz</div><div class="line"></div><div class="line"><span class="comment"># 解压</span></div><div class="line">tar -xzvf redis-stable.tar.gz</div><div class="line"></div><div class="line"><span class="comment"># 编译</span></div><div class="line"><span class="built_in">cd</span> redis-stable</div><div class="line">yum -y install gcc automake autoconf libtool make</div><div class="line">make</div><div class="line"></div><div class="line"><span class="comment"># 安装</span></div><div class="line"><span class="built_in">cd</span> src/</div><div class="line">cp redis-server redis-cli /usr/<span class="built_in">local</span>/bin</div><div class="line">cp redis-sentinel redis-benchmark redis-check-aof redis-check-rdb /usr/<span class="built_in">local</span>/bin</div></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="创建配置目录"><a href="#创建配置目录" class="headerlink" title="创建配置目录"></a>创建配置目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/redis  <span class="comment"># 此处存放配置文件</span></div><div class="line">mkdir -p /var/lib/redis/6379  <span class="comment"># -p递归创建文件夹</span></div><div class="line">cp ../redis.conf /etc/redis/6379.conf </div><div class="line">vi /etc/redis/6379.conf</div></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启用守护进程，后台运行</span></div><div class="line"><span class="comment"># 另一种后台运行方法：/usr/bin/redis-server /etc/redis.conf &amp;</span></div><div class="line">daemonize yes</div><div class="line"></div><div class="line"><span class="comment"># 当Redis以守护进程方式运行时，可以通过pidfile指定pid</span></div><div class="line">pidfile /var/run/redis_6379.pid</div><div class="line"></div><div class="line"><span class="comment"># 指定监听端口</span></div><div class="line">port 6379</div><div class="line"></div><div class="line"><span class="comment"># 指定日志级别</span></div><div class="line">loglevel notice</div><div class="line"></div><div class="line"><span class="comment"># 指定日志记录</span></div><div class="line">logfile /home/data/redis/6379/redis.log</div><div class="line"></div><div class="line"><span class="comment"># 指定本地数据库存放目录</span></div><div class="line">dir /home/data/redis/6379  <span class="comment"># 选择磁盘大的文件夹</span></div></pre></td></tr></table></figure><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><h4 id="创建服务-1"><a href="#创建服务-1" class="headerlink" title="创建服务"></a>创建服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># overcommit_memory 内存分配策略 避免redis进程被杀死</span></div><div class="line"><span class="comment"># 0：先检查内存是否够用；1：不管内存状态；2：允许分配超过物理内存和交换内存总和</span></div><div class="line">sysctl -w vm.overcommit_memory=1</div><div class="line"></div><div class="line"><span class="comment"># 定义系统中么个端口最大监听队列长度</span></div><div class="line"><span class="comment"># 对于一个经常处理新连接的高负载 web服务环境来说，要设置大一点</span></div><div class="line">sysctl -w net.core.somaxconn=512</div><div class="line"></div><div class="line"><span class="comment"># transparent hugepage允许hugepage可以动态分配，而不是系统启动时预先分配</span></div><div class="line"><span class="comment"># 直接关闭THP(比如说Oracle、MongoDB等)，否则可能导致性能下降，内存锁，甚至系统重启等问题</span></div><div class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</div><div class="line"></div><div class="line"><span class="comment"># redis启动，关闭脚本</span></div><div class="line">cp utils/redis_init_script /etc/init.d/redis_6379</div><div class="line"></div><div class="line"><span class="comment"># 创建redis服务</span></div><div class="line">vi /etc/systemd/system/redis.service</div></pre></td></tr></table></figure><h4 id="redis-service的内容"><a href="#redis-service的内容" class="headerlink" title="redis.service的内容"></a>redis.service的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Redis on port 6379</div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">ExecStart=/etc/init.d/redis_6379 start</div><div class="line">ExecStop=/etc/init.d/redis_6379 stop</div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><ul><li><p><code>[Unit]</code>：启动顺序与依赖关系</p><ul><li><code>Description</code>：当前服务的简单描述</li></ul></li><li><p><code>[Service]</code>：定义如何启动当前服务</p><ul><li><code>Type</code>：启动类型<ul><li><code>forking</code>：<code>ExecStart</code>字段将以<code>fork()</code>方式启动，此时父进程将会退出，子进程将成为主进程</li></ul></li><li><code>ExecStart</code>：定义启动进程时执行的命令</li><li><code>ExecStop</code>：停止服务时执行命令</li></ul></li><li><p><code>Install</code>：定义该服务所在的<code>Target</code>，即怎样做到开机启动</p><ul><li><p><code>WantedBy</code>：表示所在服务的<code>Target</code></p><ul><li><p><code>multi-user.target</code>：多用户启动</p><p>指定这个<code>target</code>后，这个组里的所有服务，通过执行<code>systemctl enable</code>命令就可以开机启动了</p></li></ul></li></ul></li></ul><h4 id="服务更新"><a href="#服务更新" class="headerlink" title="服务更新"></a>服务更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置redis开机启动</span></div><div class="line">systemctl <span class="built_in">enable</span> redis</div><div class="line"></div><div class="line"><span class="comment"># 服务重载</span></div><div class="line">systemctl daemon-reload</div><div class="line"></div><div class="line"><span class="comment"># 启动</span></div><div class="line">systemctl start redis</div></pre></td></tr></table></figure><h2 id="订阅与发布"><a href="#订阅与发布" class="headerlink" title="订阅与发布"></a>订阅与发布</h2><p><a href="http://redisbook.readthedocs.io/en/latest/feature/pubsub.html" target="_blank" rel="external">http://redisbook.readthedocs.io/en/latest/feature/pubsub.html</a></p><p>“Error while extracting response for type and content type [application/json;charset=UTF-8]; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize instance of <code>java.util.ArrayList</code> out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of <code>java.util.ArrayList</code> out of START_OBJECT token↵ at [Source: (PushbackInputStream); line: 1, column: 1]”</p><p><a href="https://www.cnblogs.com/cnmenglang/p/6225987.html" target="_blank" rel="external">https://www.cnblogs.com/cnmenglang/p/6225987.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Redis 安装&lt;/p&gt;
&lt;h3 id=&quot;下载、编译、安装&quot;&gt;&lt;a href=&quot;#下载、编译、安装&quot; class=&quot;headerlink&quot; title=&quot;下载、编译、安装&quot;&gt;&lt;/a&gt;下载、编译、安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;
      
    
    </summary>
    
    
      <category term="DB" scheme="http://printxhl.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>Linux 基本操作</title>
    <link href="http://printxhl.com/2018/05/30/Linux-Base/"/>
    <id>http://printxhl.com/2018/05/30/Linux-Base/</id>
    <published>2018-05-30T06:55:03.128Z</published>
    <updated>2018-06-20T00:26:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用过的一些命令"><a href="#用过的一些命令" class="headerlink" title="用过的一些命令"></a>用过的一些命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 复制时，使用日期名作为文件名</span></div><div class="line">cp direct.log direct.log.$(date +%Y%m%d)</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 将后台运行程序的打印记录立即输出到nohup.out文件</span></div><div class="line">nohup python -u spider.py &gt; nohup.out 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 交换空间扩容</span></div><div class="line">dd if=/dev/zero of=/home/swap bs=1024 count=8192000</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 获取pid, 杀死进程</span></div><div class="line">cat uwsgi.pid | xargs kill -9</div></pre></td></tr></table></figure><h3 id="Linux-用户管理"><a href="#Linux-用户管理" class="headerlink" title="Linux 用户管理"></a>Linux 用户管理</h3><h4 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">who am i</div></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sudo &lt;cmd&gt; 以特权级别运行cmd命令，需要当前用户属于sudo组且输入当前用户密码</span></div><div class="line"><span class="comment"># adduser创建用户后，创建home目录，然后会提示你创建密码</span></div><div class="line"><span class="comment"># useradd只创建用户，创建完后用passwd lilei去设置密码</span></div><div class="line">sudo adduser lilei  </div><div class="line"></div><div class="line"><span class="comment"># 切换到用户</span></div><div class="line">su lilei  </div><div class="line"></div><div class="line"><span class="comment"># 切换到目录，同时环境变量也会跟着改变成目标用户的环境变量</span></div><div class="line">su - lilei</div></pre></td></tr></table></figure><h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><p>用户组是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看所属用户组 </span></div><div class="line"><span class="comment"># cat /etc/group | grep -E "shiyanlou"</span></div><div class="line">groups lilei</div><div class="line"></div><div class="line"><span class="comment"># 看lilei是否在sudoers用户组</span></div><div class="line">su - lilei</div><div class="line">sudo ls   </div><div class="line"><span class="built_in">logout</span></div><div class="line"></div><div class="line"><span class="comment"># 将用户添加到sudo用户组的方法</span></div><div class="line">$ vim /etc/sudoers</div><div class="line"><span class="comment"># %wheel ALL=(ALL) ALL          # sudo命令，要输密码</span></div><div class="line"><span class="comment"># %wheel ALL=(ALL)NOPASSWD:ALL  # sudo命令，不要输密码</span></div><div class="line">usermod -G wheel es             <span class="comment"># 将es用户添加到wheel用户，就可使用sudo命令</span></div></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">userdel peter</div><div class="line"></div><div class="line">groupdel peter</div></pre></td></tr></table></figure><h3 id="Linux-文件权限"><a href="#Linux-文件权限" class="headerlink" title="Linux 文件权限"></a>Linux 文件权限</h3><h4 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls -l</div><div class="line">总用量 4</div><div class="line">-rw-r--r--. 1 root root 642 4月  17 14:33 regular_express.txt</div></pre></td></tr></table></figure><table><thead><tr><th>-rw-r–r–</th><th>1</th><th>root</th><th>root</th><th>642</th><th>4月  17 14:33</th><th>*.txt</th></tr></thead><tbody><tr><td>文件类型和权限</td><td>链接数</td><td>所有者</td><td>用户组</td><td>文件大小</td><td>最后修改时间</td><td>文件名</td></tr></tbody></table><p><img src="http://oj8vattcf.bkt.clouddn.com/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%9D%83%E9%99%90.png" alt="文件类型和权限"></p><h4 id="变更文件所有者"><a href="#变更文件所有者" class="headerlink" title="变更文件所有者"></a>变更文件所有者</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown &lt;user&gt; &lt;file&gt;</div></pre></td></tr></table></figure><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 二进制数字表示</span></div><div class="line"><span class="comment"># 仅对拥有着可读可写可执行 rwx = 1*4+1*2+1*1</span></div><div class="line">chmod 700 &lt;file&gt;  </div><div class="line"></div><div class="line"><span class="comment"># 加减赋值操作</span></div><div class="line"><span class="comment"># g代表group, o代表others, u代表user，+-代表加减相应权限</span></div><div class="line">chmod go-rw &lt;file&gt;</div></pre></td></tr></table></figure><h3 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h3><ul><li>bin：一般用户可用，启动时会用到的命令，即文件系统还没被挂载时，也能使用的命令</li><li>boot<ul><li>grub：开机设置相关文件</li><li>vmlinuz：内核文件</li></ul></li><li>dev：存放设置文件</li><li><strong>etc</strong>：包含系统特有的可编辑配置文件，即用于控制程序运行的本地文件</li><li>home：用户家目录</li><li>lib：用于存放程序的动态库和模块文件</li><li>media：用于挂载本地磁盘或其他存储设备，U盘之类的</li><li>mnt：用于挂载其他临时文件系统</li><li>opt：发行版附加的一些软件包的安装目录</li><li>root：root用户的家</li><li>sbin：存放root用户才能执行的命令，一些系统进行更新，备份，还原和开机用到的命令</li><li>srv：存放服务进程所需的数据文件和一些服务的执行脚本</li><li>tmp：存放各种临时文件</li><li>usr：用于存储只读用户数据的第二层次，包含绝大多数的用户工具和应用程序<ul><li>bin：非必要可执行文件，面向所有用户</li><li>include：标准包含头文件</li><li>lib：/usr/bin和/usr/sbin/中二进制文件的库</li><li>local：本地数据第三层次，具体到本台主机</li><li>share：体系结构无关的共享数据</li><li>sbin：非必要的系统二进制文件</li><li>src：源代码，内核源代码及其头文件</li></ul></li><li>var：变量文件，在正常运行的系统中其内容不断变化的的文件，如日志之类的</li></ul><table><thead><tr><th></th><th>可分享的(shareable)</th><th>不可分享的(unshareable)</th></tr></thead><tbody><tr><td>不可变的(static)</td><td>/usr, /opt</td><td>/etc, /boot</td></tr><tr><td>可变动的(variable)</td><td>/var/mail, /var/news</td><td>/var/run, /var/lock</td></tr></tbody></table><h3 id="Linux-文件的基本操作"><a href="#Linux-文件的基本操作" class="headerlink" title="Linux 文件的基本操作"></a>Linux 文件的基本操作</h3><ul><li><p>新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新建文件</span></div><div class="line">touch <span class="built_in">test</span></div><div class="line"></div><div class="line"><span class="comment"># 新建目录</span></div><div class="line">mkdir mydir</div><div class="line">mkdir -p father/son/grandson  <span class="comment"># -p递归创建目录</span></div></pre></td></tr></table></figure></li><li><p>复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 复制文件</span></div><div class="line">cp <span class="built_in">test</span> /father/son/grandson</div><div class="line"></div><div class="line"><span class="comment"># 复制目录</span></div><div class="line">cp -r father family</div></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 删除文件</span></div><div class="line">rm -f <span class="built_in">test</span></div><div class="line"></div><div class="line"><span class="comment"># 删除目录</span></div><div class="line">rm -rf family</div></pre></td></tr></table></figure></li><li><p>移动文件与文件重命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 移动文件</span></div><div class="line">mv &lt;file&gt; &lt;document&gt;</div><div class="line"></div><div class="line"><span class="comment"># 重命名</span></div><div class="line">mv &lt;file&gt; &lt;file&gt;</div><div class="line"></div><div class="line"><span class="comment"># 批量重命名</span></div><div class="line">touch file&#123;1..5&#125;.txt  <span class="comment"># 使用通配符批量创建5个文件</span></div><div class="line">rename <span class="string">'s/\.txt\/.c/'</span> *.txt  <span class="comment"># 批量重命名</span></div></pre></td></tr></table></figure></li><li><p>查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用cat, tac和nl命令查看文件</span></div><div class="line">cat -n &lt;file&gt;   <span class="comment"># 正序查看，-n加上行号</span></div><div class="line">tac &lt;file&gt;   <span class="comment"># 倒序查看</span></div><div class="line">nl  &lt;file&gt;   <span class="comment"># 添加行号并打印</span></div><div class="line"></div><div class="line"><span class="comment"># 使用more和less命令分页查看文件</span></div><div class="line">more &lt;file&gt;   <span class="comment"># 一直往下看</span></div><div class="line">less &lt;file&gt;   <span class="comment"># 来回看</span></div><div class="line"></div><div class="line"><span class="comment"># 使用head和tail命令查看文件</span></div><div class="line">head -n 5 &lt;file&gt;   <span class="comment"># 指定看头5行</span></div><div class="line">tail -f &lt;file&gt;     <span class="comment"># 动态查看日志</span></div></pre></td></tr></table></figure></li><li><p>查看文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file /bin/ls</div></pre></td></tr></table></figure></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h4><p>按变量的类型划分，Linux变量可分为：</p><ul><li><p><strong>自定义变量</strong>：当前Shell进程私有用户自定义的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">declare</span> tmp         <span class="comment"># 自定义变量</span></div><div class="line">tmp = xiehailian    <span class="comment"># 赋值</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$tmp</span>   <span class="comment"># 打印变量</span></div></pre></td></tr></table></figure></li><li><p><strong>内建变量</strong>：Shell本身内建的变量</p></li><li><p><strong>环境变量</strong>：从自定义变量导出的环境变量</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前 Shell 所有变量，包括其内建环境变量（与 Shell 外观等相关），用户自定义变量及导出的环境变量</span></div><div class="line"><span class="built_in">set</span></div><div class="line"></div><div class="line"><span class="comment"># 显示与当前用户相关的环境变量，还可以让命令在指定环境中运行</span></div><div class="line">env</div><div class="line"></div><div class="line"><span class="comment"># 显示从Shell中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量</span></div><div class="line"><span class="built_in">export</span></div></pre></td></tr></table></figure><p>按照变量的生存周期来划分，Linux变量可分为：</p><ul><li>永久的变量：需要修改配置文件，变量永久生效</li><li>临时的变量：使用<code>export</code>命令声明即可，变量在关闭shell时失效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 只针对bash初始化</span></div><div class="line">vim /etc/bashrc   <span class="comment"># 存放的是环境变量，永久生效</span></div><div class="line">vim ~/.bashrc     <span class="comment"># 只对当前用户永久生效</span></div><div class="line"></div><div class="line"><span class="comment"># 统一初始化的地方</span></div><div class="line">vim /etc/profile  <span class="comment"># 存放的是环境变量, 永久生效</span></div><div class="line">vim ~/.profile    <span class="comment"># 只对当前用户永久生效</span></div></pre></td></tr></table></figure><h4 id="环境变量操作"><a href="#环境变量操作" class="headerlink" title="环境变量操作"></a>环境变量操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 命令的查找路径与顺序</span></div><div class="line"><span class="comment"># 当在Shell中执行一个命令时，系统会按照PATH中设定的路径按照顺序依次到目录中去查找，如果存在同名的命令，则执行先找到的那个</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></div><div class="line">/root/anaconda3/bin:/usr/<span class="built_in">local</span>/jdk/bin:/usr/<span class="built_in">local</span>/apache-maven/bin:/usr/<span class="built_in">local</span>/jdk/bin:/usr/<span class="built_in">local</span>/mongodb/bin:/home/hadoop/anaconda3/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/usr/<span class="built_in">local</span>/scala/bin:/usr/<span class="built_in">local</span>/hadoop/hadoop/bin:/usr/<span class="built_in">local</span>/hadoop/hadoop/sbin:/usr/<span class="built_in">local</span>/hadoop/spark/bin:/root/bin</div><div class="line"></div><div class="line"><span class="comment"># 添加自定义路径到PATH环境变量</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"PATH=<span class="variable">$PATH</span>:/home/shiyanlou/mybin"</span> &gt;&gt; .bashrc</div><div class="line"></div><div class="line"><span class="comment"># 修改和删除已有变量</span></div><div class="line">path=<span class="variable">$&#123;path%/home/shiyanlou/mybin&#125;</span>   <span class="comment"># 从后删除匹配字符串</span></div><div class="line"><span class="built_in">unset</span> path    <span class="comment"># 删除一个变量</span></div><div class="line"></div><div class="line"><span class="comment"># 让环境变量立即生效</span></div><div class="line"><span class="built_in">source</span> .profile</div></pre></td></tr></table></figure><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将目前目录及其子目录下所有延伸档名是 c 的文件列出来</span></div><div class="line">find . -name <span class="string">"*.c"</span></div><div class="line"></div><div class="line"><span class="comment"># 将当前目录下子目录中所有一般文件列出</span></div><div class="line">find . -<span class="built_in">type</span> f</div><div class="line"></div><div class="line"><span class="comment"># 将目前目录及其子目录下所有最近 20 天内更新过的文件列出</span></div><div class="line">find . -ctime -20</div><div class="line"></div><div class="line"><span class="comment"># 查找/var/logs目录中更改时间在7日以前的普通文件，并在删除之前询问它们</span></div><div class="line">find /var/logs -<span class="built_in">type</span> f -mtime +7 -ok rm &#123;&#125; \;</div><div class="line"></div><div class="line"><span class="comment"># 查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件</span></div><div class="line">find . -<span class="built_in">type</span> f -perm 644 -<span class="built_in">exec</span> ls -l &#123;&#125; \;</div><div class="line"></div><div class="line"><span class="comment"># 为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径</span></div><div class="line">find / -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> ls -l &#123;&#125; \;</div><div class="line"></div><div class="line"><span class="comment"># 查找/var/logs目录中更改时间在7日以前的普通文件，并在删除之前询问它们</span></div><div class="line">find /var/logs -<span class="built_in">type</span> f -mtime +7 -ok rm &#123;&#125; \;</div></pre></td></tr></table></figure><h3 id="文件打包与解压缩"><a href="#文件打包与解压缩" class="headerlink" title="文件打包与解压缩"></a>文件打包与解压缩</h3><ul><li><p>使用<code>zip</code>打包，使用<code>unzip</code>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用zip打包文件夹</span></div><div class="line"><span class="comment"># -r参数表示递归打包，-q表示安静模式不向屏幕输出信息，-o表示输出文件紧跟文件名</span></div><div class="line">zip -r -q -o superpub.zip ./superpub</div><div class="line"></div><div class="line"><span class="comment"># 设置压缩级别为9和1，重新打包，1表示最快压缩体积大，9表示体积小耗时久</span></div><div class="line">zip -r -9 -q -o shiyanlou_9.zip /home/shiyanlou -x ~/*.zip</div><div class="line"></div><div class="line"><span class="comment"># 创建加密zip包，使用-e参数</span></div><div class="line">zip -r -e -o shiyanlou_encryption.zip /home/shiyanlou</div><div class="line"></div><div class="line"><span class="comment"># 使用安静模式，将文将解压到指定目录</span></div><div class="line">unzip -q shiyanlou.zip -d ziptest</div></pre></td></tr></table></figure></li><li><p>使用<code>tar</code>打包和解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打一个tar包，-c表示打包，-f指定文件名</span></div><div class="line">tar -cf shiyanlou.tar shiyanlou</div><div class="line"></div><div class="line"><span class="comment"># 解压一个tar包，-x表示解包，-C表示指定路径</span></div><div class="line">tar -xf shiyanlou.tar -C /home</div><div class="line"></div><div class="line"><span class="comment"># -t表示只查看不解包文件</span></div><div class="line">tar -tf shiyanlou.tar</div><div class="line"></div><div class="line"><span class="comment"># -z表示使用gzip来压缩文件</span></div><div class="line">tar -czf shiyanlou.tar.gz shiyanlou</div><div class="line"></div><div class="line"><span class="comment"># 解压.tar.gz文件</span></div><div class="line">tar -xzf shiyanlou.tar.gz</div></pre></td></tr></table></figure></li><li><p>分割合并压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">split -b 500M ask_20180515.json.tar.gz -d -a 3 ask</div></pre></td></tr></table></figure></li></ul><h3 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h3><h4 id="使用df命令查看磁盘的容量"><a href="#使用df命令查看磁盘的容量" class="headerlink" title="使用df命令查看磁盘的容量"></a>使用df命令查看磁盘的容量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ df -h</div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">/dev/vda1        40G   14G   24G  36% /                  <span class="comment"># 主机硬盘分区</span></div><div class="line">devtmpfs        7.8G     0  7.8G   0% /dev</div><div class="line">tmpfs           7.8G     0  7.8G   0% /dev/shm</div><div class="line">tmpfs           7.8G  508K  7.8G   1% /run</div><div class="line">tmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup</div><div class="line">/dev/vdb1       493G   42G  426G   9% /mnt               <span class="comment"># 主机硬盘分区</span></div><div class="line">tmpfs           1.6G     0  1.6G   0% /run/user/0</div><div class="line"></div><div class="line"><span class="comment"># 查看目录挂载点</span></div><div class="line">$ df /opt -vh</div><div class="line">文件系统                 容量  已用  可用 已用% 挂载点</div><div class="line">/dev/mapper/centos-root   50G  1.7G   49G    4% /</div></pre></td></tr></table></figure><h4 id="使用du命令查看目录的容量"><a href="#使用du命令查看目录的容量" class="headerlink" title="使用du命令查看目录的容量"></a>使用du命令查看目录的容量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示所有文件及目录大小</span></div><div class="line">du                   </div><div class="line"></div><div class="line"><span class="comment"># -h表示人类易读方式</span></div><div class="line">du -h                </div><div class="line"></div><div class="line"><span class="comment"># -d指定参看目录的深度，只查看1级目录</span></div><div class="line">du -h -d 0           </div><div class="line"></div><div class="line"><span class="comment"># 查看2级目录</span></div><div class="line">du -h -d 1           </div><div class="line"></div><div class="line"><span class="comment"># 显示目录中所有文件大小</span></div><div class="line">du -a               </div><div class="line"></div><div class="line"><span class="comment"># 仅显示最后加总的值</span></div><div class="line">du -s</div></pre></td></tr></table></figure><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h3 id="命令执行顺序控制与管道"><a href="#命令执行顺序控制与管道" class="headerlink" title="命令执行顺序控制与管道"></a>命令执行顺序控制与管道</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以下两个命令的结果是不同的</span></div><div class="line">cat -n regular_express.txt | grep <span class="string">'^#</span></div><div class="line"><span class="string">cat  regular_express.txt | grep  -n '</span>^<span class="comment">#'</span></div></pre></td></tr></table></figure><h3 id="Linux-下软件安装"><a href="#Linux-下软件安装" class="headerlink" title="Linux 下软件安装"></a>Linux 下软件安装</h3><p>通常 Linux 上的软件安装主要有四种方式：</p><ul><li>在线安装</li><li>从磁盘安装deb软件包</li><li>从二进制软件包安装</li><li>从源代码编译安装</li></ul><h4 id="安装包卸载"><a href="#安装包卸载" class="headerlink" title="安装包卸载"></a>安装包卸载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep mysql</div><div class="line">rpm -e  mysql80-community-release-el7-1.noarch</div></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用过的一些命令&quot;&gt;&lt;a href=&quot;#用过的一些命令&quot; class=&quot;headerlink&quot; title=&quot;用过的一些命令&quot;&gt;&lt;/a&gt;用过的一些命令&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="linux" scheme="http://printxhl.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://printxhl.com/2018/05/30/Linux-Docker/"/>
    <id>http://printxhl.com/2018/05/30/Linux-Docker/</id>
    <published>2018-05-30T06:55:02.401Z</published>
    <updated>2018-04-02T03:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Doker-安装、卸载、加速"><a href="#Doker-安装、卸载、加速" class="headerlink" title="Doker 安装、卸载、加速"></a>Doker 安装、卸载、加速</h3><ul><li><p>安装docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install docker</div></pre></td></tr></table></figure></li><li><p>启动docker后台服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker start</div></pre></td></tr></table></figure></li><li><p>列出安装过的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum list installed | grep docker</div></pre></td></tr></table></figure></li><li><p>卸载安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y remove docker-engine.x86_64</div></pre></td></tr></table></figure></li><li><p>删除镜像/容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /var/lib/docker</div></pre></td></tr></table></figure></li><li><p>删除某个容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker stop 4aaa117cc44d</div><div class="line">docker rm 4aaa117cc44d</div></pre></td></tr></table></figure></li><li><p>删除某个镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi dongweiming/web_develop</div></pre></td></tr></table></figure></li><li><p>Docker加速</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /etc/docker</div><div class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</div><div class="line">&#123;</div><div class="line">  &quot;registry-mirrors&quot;: [&quot;https://xyv3tri5.mirror.aliyuncs.com&quot;]</div><div class="line">&#125;</div><div class="line">EOF</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure></li></ul><h3 id="Docker基本命令"><a href="#Docker基本命令" class="headerlink" title="Docker基本命令"></a>Docker基本命令</h3><ul><li><p>拉取docker镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull dongweiming/web_develop:lastest</div></pre></td></tr></table></figure></li><li><p>显示docker镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name web_dev -it -p 9000:9000 -p 3141:3141 -p 5000:5000 dongweiming/web_develop /bin/zsh</div></pre></td></tr></table></figure><ul><li><code>-i</code>：在新容器里指定一个伪终端</li><li><code>-t</code>：允许你对容器内的标准输入进行交互</li><li><code>-d</code>：以进程方式后台运行容器</li><li><code>-p</code>：显示暴露特定端口</li></ul></li><li><p>后台运行容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -dit -p 9000:9000 -p 3141:3141 -p 5000:5000 dongweiming/web_develop /bin/zsh</div></pre></td></tr></table></figure></li><li><p>显示后台运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure></li><li><p>调用后台容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker attach 4aaa117cc44d</div></pre></td></tr></table></figure><blockquote><p>退出时，使用<code>[ctrl + D]</code>，这样会结束docker当前线程，容器结束，可以使用<code>[ctrl + P][ctrl + Q]</code>退出而不终止容器运行</p></blockquote></li><li><p>停止容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop 4aaa117cc44d</div></pre></td></tr></table></figure></li></ul><h3 id="Docker容器使用"><a href="#Docker容器使用" class="headerlink" title="Docker容器使用"></a>Docker容器使用</h3><ul><li><p>后台运行容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -dit -P dongweiming/web_develop</div></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker attach 4aaa117cc</div></pre></td></tr></table></figure></li><li><p>后台运行容器内的程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup python chapter3/section1/hello.py &amp;</div></pre></td></tr></table></figure></li><li><p>查看端口映射，使用浏览器访问<code>http://120.77.217.212:32772/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure></li><li><p>查看端口映射情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker port 30ef932cc51f</div></pre></td></tr></table></figure></li><li><p>查看容器内应用程序日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker logs -f 30ef932cc51f</div></pre></td></tr></table></figure></li><li><p>检查应用程序的状态信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect 30ef932cc51f</div></pre></td></tr></table></figure></li><li><p>停止容器内应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop 30ef932cc51f</div></pre></td></tr></table></figure></li><li><p>启动应用容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start 30ef932cc51f</div></pre></td></tr></table></figure></li><li><p>移除应用容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm 30ef932cc51f</div></pre></td></tr></table></figure></li></ul><h3 id="Docker镜像使用"><a href="#Docker镜像使用" class="headerlink" title="Docker镜像使用"></a>Docker镜像使用</h3><ul><li><p>查找镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker search redis</div></pre></td></tr></table></figure></li><li><p>从已经创建的容器中更新镜像，并且提交这个镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m=&quot;has update&quot; -a=&quot;runoob&quot; e218edb10161 runoob/ubuntu:v2</div></pre></td></tr></table></figure></li><li><p>使用<code>Dockerfile</code>指令来创建一个新的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t runoob/centos:6.7 .</div></pre></td></tr></table></figure></li><li><p>设置标签镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag 860c279d2fec runoob/centos:dev</div></pre></td></tr></table></figure></li></ul><h3 id="Docker容器连接"><a href="#Docker容器连接" class="headerlink" title="Docker容器连接"></a>Docker容器连接</h3><ul><li><p>网络端口映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -d -P training/webapp</div><div class="line">docker run -d -p 5000:5000 training/webapp</div></pre></td></tr></table></figure><ul><li><code>-P</code>：容器内部端口随机映射到主机的高端口</li><li><code>-p</code>：容器内部端口绑定到主机端口</li></ul></li><li><p>容器命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -P --name runoob training/webapp</div></pre></td></tr></table></figure></li></ul><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><ul><li><p>获取ID全称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect -f &apos;&#123;&#123;.id&#125;&#125;&apos; 30ef932cc51f</div></pre></td></tr></table></figure></li><li><p>文件传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker cp 本地文件路径 ID全称:容器路径</div></pre></td></tr></table></figure></li></ul><h3 id="Docker-安装jupyter"><a href="#Docker-安装jupyter" class="headerlink" title="Docker 安装jupyter"></a>Docker 安装jupyter</h3><p><a href="https://segmentfault.com/a/1190000007448177" target="_blank" rel="external">https://segmentfault.com/a/1190000007448177</a></p><h3 id="Docker-Hub使用"><a href="#Docker-Hub使用" class="headerlink" title="Docker Hub使用"></a>Docker Hub使用</h3><p><a href="http://wiki.jikexueyuan.com/project/docker/userguide/dockerrepos.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/docker/userguide/dockerrepos.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Doker-安装、卸载、加速&quot;&gt;&lt;a href=&quot;#Doker-安装、卸载、加速&quot; class=&quot;headerlink&quot; title=&quot;Doker 安装、卸载、加速&quot;&gt;&lt;/a&gt;Doker 安装、卸载、加速&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装docker&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://printxhl.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Blog</title>
    <link href="http://printxhl.com/2018/05/30/Linux-HexoBlog/"/>
    <id>http://printxhl.com/2018/05/30/Linux-HexoBlog/</id>
    <published>2018-05-30T06:55:02.044Z</published>
    <updated>2018-04-02T03:42:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-本地建站"><a href="#Hexo-本地建站" class="headerlink" title="Hexo 本地建站"></a>Hexo 本地建站</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li><p>安装<code>Node.js</code></p></li><li><p>安装<code>Git</code></p></li><li><p>安装<code>Hexo</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure><h3 id="建立站点"><a href="#建立站点" class="headerlink" title="建立站点"></a>建立站点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新建xiehailian.github.io文件夹</span></div><div class="line">$ cd /c/Users/XHL/OneDrive</div><div class="line">$ mkdir xiehailian.github.io</div><div class="line"></div><div class="line"><span class="comment"># 更新NPM镜像</span></div><div class="line">$ npm config set registry <span class="string">'https://registry.npm.taobao.org'</span></div><div class="line"></div><div class="line"><span class="comment"># 初始化网站</span></div><div class="line">$ cd /c/Users/XHL/OneDrive/xiehailian.github.io</div><div class="line">$ hexo init</div><div class="line">$ npm install</div><div class="line"></div><div class="line"><span class="comment"># 启动网站</span></div><div class="line">$ hexo server</div></pre></td></tr></table></figure><h3 id="使用主题indigo"><a href="#使用主题indigo" class="headerlink" title="使用主题indigo"></a>使用主题<code>indigo</code></h3><h4 id="安装indigo"><a href="#安装indigo" class="headerlink" title="安装indigo"></a>安装<code>indigo</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载主题</span></div><div class="line">$ cd /c/Users/XHL/OneDrive/xiehailian.github.io</div><div class="line">$ git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo</div><div class="line"></div><div class="line"><span class="comment"># 安装依赖</span></div><div class="line">$ npm install hexo-renderer-less --save<span class="comment"># css预处理工具</span></div><div class="line">$ npm install hexo-generator-feed --save<span class="comment"># 生成rss</span></div><div class="line">$ npm install hexo-generator-json-content --save<span class="comment"># 站内搜索</span></div><div class="line"></div><div class="line"><span class="comment"># 开启标签页</span></div><div class="line">$ hexo new page tags</div><div class="line">$ vi /c/Users/XHL/OneDrive/xiehailian.github.io/source/tags/index.md</div><div class="line"></div><div class="line">layout: tags</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure><h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ vim /c/Users/XHL/OneDrive/xiehailian.github.io/_config.yml</div><div class="line"></div><div class="line"><span class="comment"># 启用主题</span></div><div class="line">theme: indigo</div><div class="line"></div><div class="line"><span class="comment"># 基本配置</span></div><div class="line">title: PrintXHL</div><div class="line">subtitle: 我就想做一点微小的工作</div><div class="line">description: </div><div class="line">author: 谢海练</div><div class="line">language:</div><div class="line">timezone:</div><div class="line">email: xiehailian66@<span class="number">126.</span>com</div><div class="line"></div><div class="line"><span class="comment"># feed配置</span></div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: <span class="number">0</span></div><div class="line">  </div><div class="line"><span class="comment"># jsonContent配置</span></div><div class="line">jsonContent:</div><div class="line">  meta: false</div><div class="line">  pages: false</div><div class="line">  posts:</div><div class="line">    title: true</div><div class="line">    date: true</div><div class="line">    path: true</div><div class="line">    text: true</div><div class="line">    raw: false</div><div class="line">    content: false</div><div class="line">    slug: false</div><div class="line">    updated: false</div><div class="line">    comments: false</div><div class="line">    link: false</div><div class="line">    permalink: false</div><div class="line">    excerpt: false</div><div class="line">    categories: false</div><div class="line">    tags: true</div></pre></td></tr></table></figure><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">$ vi /c/Users/XHL/OneDrive/xiehailian.github.io/themes/indigo/._config.yml</div><div class="line"></div><div class="line"><span class="comment"># 左侧菜单</span></div><div class="line">menu:</div><div class="line">  home:</div><div class="line">    text: 主页</div><div class="line">    url: /</div><div class="line">  archives:</div><div class="line">    url: /archives</div><div class="line">  tags:</div><div class="line">    url: /tags</div><div class="line">  github:</div><div class="line">    url: https://github.com/xiehailian</div><div class="line">    target: _blank</div><div class="line"> link:               <span class="comment"># fontawesome图标，省略前缀，本主题前缀为 icon-，必须</span></div><div class="line">   text: About       <span class="comment"># 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写</span></div><div class="line">   url: /about       <span class="comment"># 链接，绝对或相对路径，必须</span></div><div class="line">   target: _blank    <span class="comment"># 是否跳出，省略则在当前页面打开</span></div><div class="line"></div><div class="line"><span class="comment"># favicon，站点logo</span></div><div class="line">favicon: /favicon.ico</div><div class="line"></div><div class="line"><span class="comment"># 头像</span></div><div class="line">avatar: /img/logo.jpg</div><div class="line"></div><div class="line"><span class="comment"># email</span></div><div class="line">email: xiehailian66@<span class="number">126.</span>com</div><div class="line"></div><div class="line"><span class="comment"># color</span></div><div class="line">color: <span class="string">'2361b6'</span></div><div class="line"></div><div class="line"><span class="comment"># 文章摘要</span></div><div class="line">excerpt_render: false<span class="comment"># 文章摘要渲染方式: 为 true 时将渲染为 html，否则为文本</span></div><div class="line">excerpt_length: <span class="number">200</span><span class="comment"># 截断长度</span></div><div class="line">excerpt_link: 阅读全文...<span class="comment"># 文字正文页链接文字</span></div><div class="line"></div><div class="line"><span class="comment"># 公式渲染</span></div><div class="line">mathjax: true</div><div class="line"></div><div class="line"><span class="comment"># 站内搜索</span></div><div class="line">search: true</div><div class="line"></div><div class="line"><span class="comment"># 布局</span></div><div class="line">hideMenu: true</div><div class="line"></div><div class="line"><span class="comment"># 文章目录</span></div><div class="line">toc:</div><div class="line">  list_number: false  <span class="comment"># 决定导航使用的标签， true 为 ol， false 为 ul</span></div><div class="line">  </div><div class="line"><span class="comment"># less编译入口</span></div><div class="line">less:</div><div class="line">  compress: true    <span class="comment"># 是否压缩css</span></div><div class="line">  paths:</div><div class="line">    - source/css/style.less</div></pre></td></tr></table></figure><h4 id="生成自己的内容"><a href="#生成自己的内容" class="headerlink" title="生成自己的内容"></a>生成自己的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server -p <span class="number">6688</span></div><div class="line"></div><div class="line"><span class="comment"># 清楚缓存文件和静态文件</span></div><div class="line">$ hexo clean</div></pre></td></tr></table></figure><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到<code>Github</code></h2><h3 id="Github-授权"><a href="#Github-授权" class="headerlink" title="Github 授权"></a>Github 授权</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在Github上新建仓库，xiehailian.github.io</span></div><div class="line"></div><div class="line"><span class="comment"># 告诉Github代码是谁提交的</span></div><div class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">"xiehailian"</span></div><div class="line">$ git config --<span class="keyword">global</span> user.email <span class="string">"xiehailian66@126.com"</span></div><div class="line"></div><div class="line"><span class="comment"># 生成SSH key</span></div><div class="line">$ ssh-keygen -t rsa -b <span class="number">4096</span> -C <span class="string">"xiehailian66@126.com"</span></div><div class="line"></div><div class="line"><span class="comment"># 将SSH key添加到ssh-agent</span></div><div class="line">$ eval <span class="string">"$(ssh-agent -s)"</span></div><div class="line">$ ssh-add ~/.ssh/id_rsa</div><div class="line"></div><div class="line"><span class="comment"># 将SSH key添加到Github账户</span></div><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub</div><div class="line"></div><div class="line"><span class="comment"># 测试SSH连接</span></div><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure><h3 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line"></div><div class="line">$ vim /c/Users/XHL/OneDrive/xiehailian.github.io/_config.yml</div><div class="line"></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/xiehailian/xiehailian.github.io.git</div><div class="line">  branch: master</div><div class="line">    </div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><h2 id="绑定独立域名"><a href="#绑定独立域名" class="headerlink" title="绑定独立域名"></a>绑定独立域名</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo-本地建站&quot;&gt;&lt;a href=&quot;#Hexo-本地建站&quot; class=&quot;headerlink&quot; title=&quot;Hexo 本地建站&quot;&gt;&lt;/a&gt;Hexo 本地建站&lt;/h2&gt;&lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://printxhl.com/tags/Linux/"/>
    
      <category term="Git" scheme="http://printxhl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Fluent Python (4)：控制流程</title>
    <link href="http://printxhl.com/2018/05/30/Python-FlunetPython-flow/"/>
    <id>http://printxhl.com/2018/05/30/Python-FlunetPython-flow/</id>
    <published>2018-05-30T06:55:01.296Z</published>
    <updated>2018-03-29T09:57:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可迭代的对象、迭代器和生成器"><a href="#可迭代的对象、迭代器和生成器" class="headerlink" title="可迭代的对象、迭代器和生成器"></a>可迭代的对象、迭代器和生成器</h2><h3 id="Sentence类第1版：单词序列"><a href="#Sentence类第1版：单词序列" class="headerlink" title="Sentence类第1版：单词序列"></a>Sentence类第1版：单词序列</h3><p>实现一个<code>Sentence</code>类，实现序列协议，这个类对象可以迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> reprlib</div><div class="line"></div><div class="line">RE_WORD = re.compile(<span class="string">'\w+'</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sentence</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text)</span>:</span></div><div class="line">        self.text = text</div><div class="line">        self.words = RE_WORD.findall(text)  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.words[index]  <span class="comment"># &lt;2&gt;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self, index)</span>:</span>  <span class="comment"># &lt;3&gt;</span></div><div class="line">        <span class="keyword">return</span> len(self.words)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Sentence(%s)'</span> % reprlib.repr(self.text)  <span class="comment"># &lt;4&gt;</span></div></pre></td></tr></table></figure><ol><li><code>re.findall</code>函数返回一个字符串列表，里面的元素是正则表达式的全部非重叠匹配</li><li><code>self.words</code>中保存的是<code>.findall</code>函数返回的结果，因此直接返回指定索引位上的单词</li><li>为了完善序列协议，实现了<code>__len__</code>方法，但是如果只是为了让对象可以迭代，没必要实现这个方法</li><li><code>reprlib.repr</code>这个实用函数用于生成大型数据结构的简略字符串表示形式，默认情况下生成的字符串最多有30个字符</li></ol><h4 id="序列可以迭代的原因：iter函数"><a href="#序列可以迭代的原因：iter函数" class="headerlink" title="序列可以迭代的原因：iter函数"></a>序列可以迭代的原因：iter函数</h4><p>解释器需要迭代对象<code>x</code>时，会自动调用<code>iter(x)</code>函数。<code>iter(x)</code>有以下作用：</p><ol><li>检查对象是否实现了<code>__iter__</code>方法，如果实现了就调用它，获取一个迭代器</li><li>如果没有实现<code>__iter__</code>方法，但实现了<code>__getitem__</code>方法，Python会创建要给迭代器，尝试按顺序获取元素</li><li>如果尝试失败，Python抛出<code>TypeError</code>异常，告知你对象不可迭代</li></ol><h3 id="可迭代对象-vs-迭代器"><a href="#可迭代对象-vs-迭代器" class="headerlink" title="可迭代对象 vs 迭代器"></a>可迭代对象 vs 迭代器</h3><h4 id="可迭代的对象"><a href="#可迭代的对象" class="headerlink" title="可迭代的对象"></a>可迭代的对象</h4><ul><li><code>__iter__</code>，实现了此方法，那对象就是可迭代的</li><li><code>__getitem__</code>，或者实现了此方法，而且其参数是从零开始索引，那对象也是可迭代的</li></ul><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul><li><code>__next__</code>，必须实现此方法，返回序列中下一个元素，如果没有元素了，那么就抛出<code>StopIteration</code>异常</li><li><code>__iter__</code>，还需要实现此方法，所以迭代器才可以迭代</li></ul><h3 id="Sentence类第2版：典型的迭代器"><a href="#Sentence类第2版：典型的迭代器" class="headerlink" title="Sentence类第2版：典型的迭代器"></a>Sentence类第2版：典型的迭代器</h3><p>使用迭代器模式实现<code>Sentence</code>类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SentenceIterator</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, words)</span>:</span></div><div class="line">        self.words = words  </div><div class="line">        self.index = <span class="number">0</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            word = self.words[self.index]  </div><div class="line">        <span class="keyword">except</span> IndexError</div><div class="line">            <span class="keyword">raise</span> StopIteration()  </div><div class="line">        self.index += <span class="number">1</span>  </div><div class="line">        <span class="keyword">return</span> word  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> self</div></pre></td></tr></table></figure><h4 id="把Sentence变成迭代器：坏主意"><a href="#把Sentence变成迭代器：坏主意" class="headerlink" title="把Sentence变成迭代器：坏主意"></a>把Sentence变成迭代器：坏主意</h4><ul><li>构建可迭代的对象和迭代器时经常会出现错误，原因是混肴了二者。</li><li>迭代器可以迭代，但是可迭代对象不是迭代器。</li><li>迭代器一般要支持多种遍历，必须能从同一个可迭代的实例中获取多个独立的迭代器，而且每个迭代器要能维护自身内部状态</li><li>这一模式正确的实现方式是，每次调用<code>iter(my_iterable)</code>都新建一个独立迭代器，这就是为什么要重新定义一个<code>SentenceIterator</code>类</li></ul><h3 id="Sentence类第3版：生成器函数"><a href="#Sentence类第3版：生成器函数" class="headerlink" title="Sentence类第3版：生成器函数"></a>Sentence类第3版：生成器函数</h3><p>生成器可以实现和迭代器相同的功能，用生成器函数来代替<code>SentenceIterator</code>类更符合Python的习惯。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> reprlib</div><div class="line"></div><div class="line">RE_WORD = re.compile(<span class="string">'\w+'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sentence</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text)</span>:</span></div><div class="line">        self.text = text</div><div class="line">        self.words = RE_WORD.findall(text)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Sentence(%s)'</span> % reprlib.repr(self.text)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> self.words:  </div><div class="line">            <span class="keyword">yield</span> word  <span class="comment"># 1</span></div><div class="line">        <span class="keyword">return</span>  <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li>用<code>yield</code>产出当前的<code>word</code></li><li>这个<code>return</code>语句是不必要的，这个函数可以直接落空，自动返回。不管有没有<code>return</code>语句，生成器函数都不会抛出<code>StopIteration</code>异常，而是在生成完全部值后直接退出</li><li>不再需要单独定义一个迭代器的类！这里的迭代器其实是生成器对象，每次调用<code>__iter__</code>方法都会自动创建，因为这里的<code>__iter__</code>方法是生成器函数</li></ol><h4 id="生成器函数的工作原理"><a href="#生成器函数的工作原理" class="headerlink" title="生成器函数的工作原理"></a>生成器函数的工作原理</h4><ul><li>只要Python函数定义体中有<code>yield</code>关键字，该函数就是<strong>生成器函数</strong>。调用生成器函数时，会返回生成器对象。也就是说，生成器函数是生成器工厂。</li><li>生成器函数会创建一个生成器对象，包装生成器函数的定义体。把生成器传给<code>next()</code>函数时，生成器函数就会向前，执行函数定义体中的下一个yield语句，返回产出的值，并在函数定义体的当前位置暂停，最终函数定义体返回时，外层的生成器对象抛出<code>StopIteration</code>异常。</li></ul><h3 id="Sentence类第4版：惰性实现"><a href="#Sentence类第4版：惰性实现" class="headerlink" title="Sentence类第4版：惰性实现"></a>Sentence类第4版：惰性实现</h3><p>惰性实现是指，尽可能延后生成值，这样做能节省内存，而且或许还可以避免做无用的处理。</p><p>之前版本的<code>Sentence</code>类都不具有惰性，因为<code>__init__</code>方法急迫地构建好了文本中的单次列表，然后将其绑定到<code>self.words</code>属性上。这样就得处理整个文本，列表使用的内存量可能与文本本身一样多。如果只需迭代前几个单次，那么大多数工作都是白费力气。</p><p>只要使用是<strong>Python 3</strong>，思索着做某件事有没有懒惰的方式，答案通常都是肯定的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> reprlib</div><div class="line"></div><div class="line">RE_WORD = re.compile(<span class="string">'\w+'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sentence</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text)</span>:</span></div><div class="line">        self.text = text  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Sentence(%s)'</span> % reprlib.repr(self.text)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> RE_WORD.finditer(self.text):  <span class="comment"># &lt;2&gt;</span></div><div class="line">            <span class="keyword">yield</span> match.group()  <span class="comment"># &lt;3&gt;</span></div></pre></td></tr></table></figure><ol><li>不再需要<code>words</code>列表</li><li><code>re.finditer</code>函数是<code>re.findall</code>函数的惰性版本，返回的不是列表，而是生成器，按需生成<code>re.MatchObject</code>实例。如果有很多匹配，<code>re.finditer</code>函数能节省大量内存。惰性实现可以在需要时才生成一个单词</li><li><code>match.group()</code>方法从<code>MathcObject</code>实例中提取匹配正则表达式的具体文本</li></ol><h3 id="Sentence类第5版：生成器表达式"><a href="#Sentence类第5版：生成器表达式" class="headerlink" title="Sentence类第5版：生成器表达式"></a>Sentence类第5版：生成器表达式</h3><p>生成器表达式可以理解为列表推导惰性版本，不迫切地构建列表，而是返回一个生成器，按需生成元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> reprlib</div><div class="line"></div><div class="line">RE_WORD = re.compile(<span class="string">'\w+'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sentence</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text)</span>:</span></div><div class="line">        self.text = text</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Sentence(%s)'</span> % reprlib.repr(self.text)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> (match.group() <span class="keyword">for</span> match <span class="keyword">in</span> RE_WORD.finditer(self.text))</div></pre></td></tr></table></figure><h3 id="何时使用生成器表达式"><a href="#何时使用生成器表达式" class="headerlink" title="何时使用生成器表达式"></a>何时使用生成器表达式</h3><p>如果生成器表达式要分开多行写，那就定义生成器函数，以便提高可读性。</p><h3 id="另一个示例：等差数列生成器"><a href="#另一个示例：等差数列生成器" class="headerlink" title="另一个示例：等差数列生成器"></a>另一个示例：等差数列生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArithmeticProgression</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, begin, step, end=None)</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">        self.begin = begin</div><div class="line">        self.step = step</div><div class="line">        self.end = end  <span class="comment"># None -&gt; "infinite" series</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        result = type(self.begin + self.step)(self.begin)  <span class="comment"># &lt;2&gt;</span></div><div class="line">        forever = self.end <span class="keyword">is</span> <span class="keyword">None</span>  <span class="comment"># &lt;3&gt;</span></div><div class="line">        index = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> forever <span class="keyword">or</span> result &lt; self.end:  <span class="comment"># &lt;4&gt;</span></div><div class="line">            <span class="keyword">yield</span> result  <span class="comment"># &lt;5&gt;</span></div><div class="line">            index += <span class="number">1</span></div><div class="line">            result = self.begin + self.step * index  <span class="comment"># &lt;6&gt;</span></div></pre></td></tr></table></figure><ol><li><code>__init__</code>方法需要两个参数：<code>begin</code>和<code>step</code>。<code>end</code>是可选的，如果值是<code>None</code>，那么生成的是无穷数列</li><li>把<code>self.begin</code>赋值给<code>result</code>，不过会先强制转换成前面的加法算式得到类型</li><li>如果<code>self.end</code>属性的值是<code>None</code>，那么<code>forever</code>的值是<code>True</code>，因此生成的是无穷数列</li><li>这个循环要么一直执行下去，要么当<code>result</code>大于或等于<code>self.end</code>时结束。如果循环退出了，那么这个函数也随之退出</li></ol><h4 id="使用生成器函数实现"><a href="#使用生成器函数实现" class="headerlink" title="使用生成器函数实现"></a>使用生成器函数实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">aritprog_gen</span><span class="params">(begin, step, end=None)</span>:</span></div><div class="line">    result = type(begin + step)(begin)</div><div class="line">    forever = end <span class="keyword">is</span> <span class="keyword">None</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> forever <span class="keyword">or</span> result &lt; end:</div><div class="line">        <span class="keyword">yield</span> result</div><div class="line">        index += <span class="number">1</span></div><div class="line">        result = begin + step * index</div></pre></td></tr></table></figure><h4 id="使用itertools模块生成等差数列"><a href="#使用itertools模块生成等差数列" class="headerlink" title="使用itertools模块生成等差数列"></a>使用itertools模块生成等差数列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">aritprog_gen</span><span class="params">(begin, step, end=None)</span>:</span></div><div class="line">    first = type(begin + step)(begin)</div><div class="line">    ap_gen = itertools.count(first, step)   <span class="comment"># 1</span></div><div class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        ap_gen = itertools.takewhile(<span class="keyword">lambda</span> n: n &lt; end, ap_gen)  <span class="comment"># 2</span></div><div class="line">    <span class="keyword">return</span> ap_gen</div></pre></td></tr></table></figure><ol><li><code>itertools.count</code>函数返回的生成器能生成多个数，且从不停止</li><li><code>itertools.takewhile</code>函数会生成一个使用另一个生成器生成器，在指定的条件计算结果为<code>False</code>时停止</li></ol><h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><p><code>yield from i</code>完全可以代替内层的<code>for</code>循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">for</span> i <span class="keyword">in</span> iterables:</div><div class="line"><span class="meta">... </span><span class="keyword">yield</span> <span class="keyword">from</span> i</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(chain(s, t))</div><div class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure><h3 id="可迭代的归约函数"><a href="#可迭代的归约函数" class="headerlink" title="可迭代的归约函数"></a>可迭代的归约函数</h3><p>接受可迭代对象作为参数，最终返回单个结果</p><p><code>all</code>，<code>any</code>，<code>max</code>，<code>min</code>，<code>sum</code>，<code>functools.reduce</code></p><h3 id="深入分析iter函数"><a href="#深入分析iter函数" class="headerlink" title="深入分析iter函数"></a>深入分析iter函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">d6</span><span class="params">()</span>:</span></div><div class="line">...<span class="keyword">return</span> randint(<span class="number">1</span>, <span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d6_iter = iter(d6)   <span class="comment"># 1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d6_iter = iter(d6, <span class="number">1</span>)   <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li>迭代对象<code>d6</code>时会调用<code>iter(d6)</code></li><li>传入两个参数，第一个参数必须是可调用的对象，第二个值是哨符。当可调用对象返回这个值时，触发迭代器抛出<code>StopIteration</code>异常，而不产生哨符</li></ol><h3 id="把生成器当成协程"><a href="#把生成器当成协程" class="headerlink" title="把生成器当成协程"></a>把生成器当成协程</h3><ul><li><code>.send()</code>方法允许在客户代码和生成器之间双向交换数据</li><li><code>.__next__()</code>方法只允许客户从生成器中获取数据</li></ul><h2 id="上下文管理器和else块"><a href="#上下文管理器和else块" class="headerlink" title="上下文管理器和else块"></a>上下文管理器和else块</h2><h3 id="if语句之外else块"><a href="#if语句之外else块" class="headerlink" title="if语句之外else块"></a>if语句之外else块</h3><p>在所有情况下，如果异常或者<code>return</code>、<code>break</code>或<code>continue</code>语句导致控制权跳到了复合语句的主块之外，<code>else</code>子句也会被跳过</p><ul><li><p><code>for...else</code></p><p>仅当<code>for</code>循环运行完毕时，即<code>for</code>循环没有被<code>break</code>语句终止时才运行<code>else</code>块</p></li><li><p><code>while...else</code></p><p>仅当<code>while</code>循环因为条件为假值而推出时，即<code>while</code>循环没有被<code>break</code>语句终止才运行<code>else</code>块</p></li><li><p><code>try...else</code></p><p>仅当<code>try</code>块没有异常抛出时才运行<code>else</code>块</p></li></ul><h3 id="上下文管理器和with块"><a href="#上下文管理器和with块" class="headerlink" title="上下文管理器和with块"></a>上下文管理器和with块</h3><p>上下文管理器对象存在的目的是管理<code>with</code>语句，就像迭代器的存在是为了管理<code>for</code>语句一样。</p><p><code>with</code>语句的目的是简化<code>try/finally</code>模式。这种模式用于保证一段代码运行完毕后执行某项操作，即便那段代码由于异常、<code>return</code>语句或<code>sys.exit()</code>调用而终止，也会执行指定操作。<code>finally</code>子句中的代码通常用于释放重要资源，或者还原临时变更的状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LookingGlass</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">        <span class="keyword">import</span> sys</div><div class="line">        self.original_write = sys.stdout.write  <span class="comment"># &lt;2&gt;</span></div><div class="line">        sys.stdout.write = self.reverse_write  <span class="comment"># &lt;3&gt;</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'JABBERWOCKY'</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_write</span><span class="params">(self, text)</span>:</span>  </div><div class="line">        self.original_write(text[::<span class="number">-1</span>])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span>  <span class="comment"># &lt;4&gt;</span></div><div class="line">        <span class="keyword">import</span> sys  <span class="comment"># &lt;5&gt;</span></div><div class="line">        sys.stdout.write = self.original_write  <span class="comment"># &lt;6&gt;</span></div><div class="line">        <span class="keyword">if</span> exc_type <span class="keyword">is</span> ZeroDivisionError:  <span class="comment"># &lt;7&gt;</span></div><div class="line">            print(<span class="string">'Please DO NOT divide by zero!'</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure><ol><li><code>with</code>语句开始运行时，会在上下文管理器对象上调用<code>__enter__</code>方法。除了<code>self</code>之外，调用<code>__enter__</code>方法时不传入其他参数</li><li>把原来的<code>sys.stdout.write</code>方法保存在一个实例属性中，供后面使用</li><li>为<code>sys.stdout.write</code>打猴子补丁，替换成自己编写方法</li><li><code>with</code>语句运行结束后，会在上下文管理器对象调用<code>__exit__</code>方法，以此扮演<code>finally</code>子句的角色。如果一切正常，调用<code>__exit__</code>方法传入参数是全是<code>None</code>。如果抛出了异常，这个三个参数是异常数据</li><li>重复导入模块不会消耗很多资源，因为Python会缓存导入模块</li><li>还原成原来的<code>sys.stdout.write</code>方法</li><li>如果有异常，而且是<code>ZeroDivisionError</code>类型，打印一个消息，然后返回<code>True</code>，告诉解释器，异常已经处理</li></ol><h3 id="contextlib模块中实用工具"><a href="#contextlib模块中实用工具" class="headerlink" title="contextlib模块中实用工具"></a>contextlib模块中实用工具</h3><p>使用<code>contextlib</code>自定义上下文管理器</p><ul><li><code>closing</code></li><li><code>suppress</code></li><li><code>@contextmanager</code></li><li><code>ContextDecorator</code></li><li><code>ExitStack</code></li></ul><h3 id="使用-contextmanager"><a href="#使用-contextmanager" class="headerlink" title="使用@contextmanager"></a>使用@contextmanager</h3><p><code>@contextmanager</code>装饰器能减少创建上下文管理器的样板代码量，因为不用编写一个完整的类，定义<code>__enter__</code>和<code>__exit__</code>方法，而只需实现有一个<code>yield</code>语句的生成器，生成想让<code>__enter__</code>方法返回的值。</p><p>在使用<code>@contextmanager</code>装饰的生成器中，<code>yield</code>语句的作用是把函数的定义体分成两部分：<code>yield</code>语句前面的所有代码在<code>with</code>块开始时执行即调用<code>__enter__</code>方法，<code>yield</code>语句后面的代码在<code>with</code>块结束时执行即调用<code>__exit__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> contextlib</div><div class="line"></div><div class="line"><span class="meta">@contextlib.contextmanager  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">looking_glass</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">import</span> sys</div><div class="line">    original_write = sys.stdout.write  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_write</span><span class="params">(text)</span>:</span>  </div><div class="line">        original_write(text[::<span class="number">-1</span>])</div><div class="line"></div><div class="line">    sys.stdout.write = reverse_write  </div><div class="line">    msg = <span class="string">''</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">    <span class="keyword">yield</span> <span class="string">'JABBERWOCKY'</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">    <span class="keyword">except</span> ZeroDivisionError:  <span class="comment"># &lt;2&gt;</span></div><div class="line">        msg = <span class="string">'Please DO NOT divide by zero!'</span></div><div class="line">    <span class="keyword">finally</span>:  <span class="comment"># &lt;3&gt;</span></div><div class="line">    sys.stdout.write = original_write  <span class="comment"># &lt;4&gt;</span></div><div class="line">    <span class="keyword">if</span> msg:</div><div class="line">            print(msg)</div><div class="line">            </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> looking_glass() <span class="keyword">as</span> what:</div><div class="line"><span class="meta">... </span>print(<span class="string">'hehe'</span>)</div><div class="line"><span class="meta">... </span>print(what)</div></pre></td></tr></table></figure><ol><li>产出一个值，这个值会绑定到<code>with</code>语句中<code>as</code>子句的目标变量上，执行<code>with</code>块中的代码时，这个函数会在这一点暂停</li><li>捕获<code>ZeroDivisionError</code>异常</li><li>如果出现异常，<code>looking_glass</code>函数将会终止，将无法恢复原来的<code>sys.stout.write</code>方法，导致系统处于无效状态。因此要使用<code>try...except...finally</code>语句定义最终状态</li><li>控制权一旦跳出<code>with</code>块，继续执行<code>yield</code>语句之后的代码：这里是恢复成原来的<code>sys.stout.write</code>方法</li></ol><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="生成器如何进化成协程"><a href="#生成器如何进化成协程" class="headerlink" title="生成器如何进化成协程"></a>生成器如何进化成协程</h3><ul><li>生成器的调用方可以使用<code>.send()</code>方法发送数据，发送的数据会成为生成器函数中<code>yield</code>表达式的值</li><li>生成器可以作为协程使用，协程是指一个过程，这个过程与调用方协作，产出由调用方提供的值</li></ul><h3 id="用作协程的生成器的基本行为"><a href="#用作协程的生成器的基本行为" class="headerlink" title="用作协程的生成器的基本行为"></a>用作协程的生成器的基本行为</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">simple_coroutine</span><span class="params">()</span>:</span> <span class="comment"># 1</span></div><div class="line">    ... print(<span class="string">'-&gt; coroutine started'</span>)</div><div class="line">    ... x = <span class="keyword">yield</span> <span class="comment"># 2</span></div><div class="line">    ... print(<span class="string">'-&gt; coroutine received:'</span>, x)</div><div class="line">    ...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro = simple_coroutine()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro </div><div class="line">&lt;generator object simple_coroutine at <span class="number">0x100c2be10</span></div><div class="line">&gt;&gt;&gt;&gt; next(my_coro) <span class="comment"># 3</span></div><div class="line">-&gt; coroutine started</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro.send(<span class="number">42</span>) <span class="comment"># 4</span></div><div class="line">-&gt; coroutine received: 42</div><div class="line">Traceback (most recent call last): <span class="comment"># 5</span></div><div class="line">    ...</div><div class="line">StopIteration</div></pre></td></tr></table></figure><ol><li>协程使用生成器函数定义：定义体中有<code>yield</code>关键字</li><li><code>yield</code>在表达式中使用；如果协程只需从客户那里接受数据，那么产出的值是<code>None</code>，这个值是隐式指定的，因为<code>yield</code>关键字右边没有表达式</li><li>首先要调用<code>next()</code>函数，因为生成器还没启动，没在<code>yield</code>语句处暂停，所以一开始无法发送数据，最先调用<code>next()</code>函数通常称为<strong>预激协程</strong></li><li>调用<code>send()</code>方法，协程定义体中的<code>yield</code>表达式会计算出42；现在协程会恢复，一直运行到下一个<code>yield</code>表达式或者终止</li><li>控制权流动到协程定义体的末尾，导致生产器像往常一样抛出<code>StopIteration</code>异常</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">simple_coro2</span><span class="params">(a)</span>:</span></div><div class="line">    ... print(<span class="string">'-&gt; Started: a ='</span>, a)</div><div class="line">    ... b = <span class="keyword">yield</span> a</div><div class="line">    ... print(<span class="string">'-&gt; Received: b ='</span>, b)</div><div class="line">    ... c = <span class="keyword">yield</span> a + b</div><div class="line">    ... print(<span class="string">'-&gt; Received: c ='</span>, c)</div><div class="line">    ...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro2 = simple_coro2(<span class="number">14</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> getgeneratorstate</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(my_coro2)  <span class="comment"># 1</span></div><div class="line"><span class="string">'GEN_CREATED'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(my_coro2) </div><div class="line">-&gt; Started: a = 14</div><div class="line"><span class="number">14</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(my_coro2)  <span class="comment"># 2</span></div><div class="line"><span class="string">'GEN_SUSPENDED'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro2.send(<span class="number">28</span>)  <span class="comment"># 3</span></div><div class="line">-&gt; Received: b = 28</div><div class="line"><span class="number">42</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro2.send(<span class="number">99</span>)  </div><div class="line">-&gt; Received: c = 99</div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(my_coro2)  <span class="comment"># 4</span></div><div class="line"><span class="string">'GEN_CLOSE</span></div></pre></td></tr></table></figure><ol><li><code>inspect.getgeneratorstate</code>函数表明，处于<code>GEN_CREATED</code>状态，即协程未启动</li><li><code>inspect.getgeneratorstate</code>函数表明，处于<code>GEN_SUSPENDED</code>状态，即协程在<code>yield</code>表达式处暂停</li><li>把数字28发给暂停的协程：计算<code>yield</code>表达式，得到28，再把这个数绑定给<code>b</code>。产出<code>a+b</code>的值，然后协程暂停，等待为<code>c</code>赋值</li><li><code>inspect.getgeneratorstate</code>函数表明，处于<code>GEN_CLOSED</code>状态，即协程执行结束</li></ol><h3 id="使用协程计算移动平均值"><a href="#使用协程计算移动平均值" class="headerlink" title="使用协程计算移动平均值"></a>使用协程计算移动平均值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></div><div class="line">    total = <span class="number">0.0</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    average = <span class="keyword">None</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># &lt;1&gt;</span></div><div class="line">        term = <span class="keyword">yield</span> average  <span class="comment"># &lt;2&gt;</span></div><div class="line">        total += term</div><div class="line">        count += <span class="number">1</span></div><div class="line">        average = total/count</div></pre></td></tr></table></figure><ol><li>这个无限循环表明，只要调用方不断把值发给这个协程，它就会一直收值，然后生成结果。仅当调用方在协程上调用<code>.close()</code>方法，或者没有对协程的引用而被垃圾回收程序回收时，这个协程才会终止</li><li>这里的<code>yield</code>表达式用于暂停执行协程，把结果发给调用方：还用于接受调用方后面发给协程的值，恢复无限循环</li><li>使用协程的好处是，<code>total</code>和<code>count</code>不必声明为全局变量，无需使用实例属性或闭包在多次调用之间保持上下文</li></ol><h3 id="预激协程的装饰器"><a href="#预激协程的装饰器" class="headerlink" title="预激协程的装饰器"></a>预激协程的装饰器</h3><p>如果不预激，那么协程也就没什么用。为了简化协程的用法，有时会使用一个预激装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="string">"""Decorator: primes `func` by advancing to first `yield`"""</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">primer</span><span class="params">(*args,**kwargs)</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">        gen = func(*args,**kwargs)  <span class="comment"># &lt;2&gt;</span></div><div class="line">        next(gen)  <span class="comment"># &lt;3&gt;</span></div><div class="line">        <span class="keyword">return</span> gen  <span class="comment"># &lt;4&gt;</span></div><div class="line">    <span class="keyword">return</span> primer</div><div class="line">    </div><div class="line"><span class="meta">@coroutine  # &lt;5&gt;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span>  <span class="comment"># &lt;6&gt;</span></div><div class="line">    total = <span class="number">0.0</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    average = <span class="keyword">None</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        term = <span class="keyword">yield</span> average</div><div class="line">        total += term</div><div class="line">        count += <span class="number">1</span></div><div class="line">        average = total/count</div></pre></td></tr></table></figure><ol><li>把被装饰的生成器函数替换成这里的<code>primer</code>函数；调用<code>primer</code>函数时，返回预激后的生成器。</li><li>预激生成器，返回生成器</li><li>把装饰器应用到<code>averager</code>函数上</li></ol><h3 id="终止协程和异常处理"><a href="#终止协程和异常处理" class="headerlink" title="终止协程和异常处理"></a>终止协程和异常处理</h3><p>未处理的异常会导致协程终止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoException</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">"""An exception type for the demonstration."""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_exc_handling</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'-&gt; coroutine started'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            x = <span class="keyword">yield</span></div><div class="line">        <span class="keyword">except</span> DemoException:  <span class="comment"># &lt;1&gt;</span></div><div class="line">            print(<span class="string">'*** DemoException handled. Continuing...'</span>)</div><div class="line">        <span class="keyword">else</span>:  </div><div class="line">            print(<span class="string">'-&gt; coroutine received: &#123;!r&#125;'</span>.format(x))</div><div class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">'This line should never run.'</span>)  </div><div class="line">    </div><div class="line"><span class="comment"># 激活</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> getgeneratorstate</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro = demo_exc_handling()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(exc_coro)</div><div class="line">-&gt; coroutine started</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.send(<span class="number">11</span>)</div><div class="line">-&gt; coroutine received: 11</div><div class="line">    </div><div class="line"><span class="comment"># 如果关闭</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.close()  <span class="comment"># 2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(exc_coro)</div><div class="line"><span class="string">'GEN_CLOSED'</span></div><div class="line"></div><div class="line"><span class="comment"># 如果传入异常</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.throw(DemoException)  <span class="comment"># 3</span></div><div class="line">*** DemoException handled. Continuing...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(exc_coro)</div><div class="line"><span class="string">'GEN_SUSPENDED'</span></div></pre></td></tr></table></figure><ol><li>特别处理<code>DemoException</code>异常</li><li><code>.close()</code>方法致使生成器在暂停的<code>yield</code>表达式抛出<code>GeneratorExit</code>异常。如果生成器没有处理这个异常，或者抛出<code>StopIteration</code>异常，调用方也不会报错</li><li><code>.throw</code>方法可以使生成器在暂停的<code>yield</code>表达式抛出指定异常，不会导致协程终止</li></ol><h3 id="让协程返回值"><a href="#让协程返回值" class="headerlink" title="让协程返回值"></a>让协程返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line">Result = namedtuple(<span class="string">'Result'</span>, <span class="string">'count average'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></div><div class="line">    total = <span class="number">0.0</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    average = <span class="keyword">None</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        term = <span class="keyword">yield</span></div><div class="line">        <span class="keyword">if</span> term <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">break</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">        total += term</div><div class="line">        count += <span class="number">1</span></div><div class="line">        average = total/count</div><div class="line">    <span class="keyword">return</span> Result(count, average)  <span class="comment"># &lt;2&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg = averager()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro_avg)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">10</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">30</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">6.5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</div><div class="line">    ... coro_avg.send(<span class="keyword">None</span>)</div><div class="line">    ... <span class="keyword">except</span> StopIteration <span class="keyword">as</span> exc:  <span class="comment"># 3</span></div><div class="line">        ... result = exc.value</div><div class="line">        </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>resultResult(count=<span class="number">3</span>, average=<span class="number">15.5</span>)</div></pre></td></tr></table></figure><ol><li>为了返回值，协程必须正常终止</li><li>返回一个<code>nametuple</code>，包含<code>count</code>和<code>average</code>两个字段</li><li>捕获<code>StopIteration</code>异常，获取<code>averager</code>返回的值</li></ol><h3 id="使用yield-from"><a href="#使用yield-from" class="headerlink" title="使用yield from"></a>使用yield from</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line">Result = namedtuple(<span class="string">'Result'</span>, <span class="string">'count average'</span>)</div><div class="line"></div><div class="line"><span class="comment"># the subgenerator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">    total = <span class="number">0.0</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    average = <span class="keyword">None</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        term = <span class="keyword">yield</span>  <span class="comment">#</span></div><div class="line">        <span class="keyword">if</span> term <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># &lt;3&gt;</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">        total += term</div><div class="line">        count += <span class="number">1</span></div><div class="line">        average = total/count</div><div class="line">    <span class="keyword">return</span> Result(count, average)  <span class="comment"># &lt;4&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># the delegating generator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">grouper</span><span class="params">(results, key)</span>:</span>  <span class="comment"># &lt;5&gt;</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># &lt;6&gt;</span></div><div class="line">        results[key] = <span class="keyword">yield</span> <span class="keyword">from</span> averager()  <span class="comment"># &lt;7&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># the client code, a.k.a. the caller</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(data)</span>:</span>  <span class="comment"># &lt;8&gt;</span></div><div class="line">    results = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> key, values <span class="keyword">in</span> data.items():</div><div class="line">        group = grouper(results, key)  <span class="comment"># &lt;9&gt;</span></div><div class="line">        next(group)  <span class="comment"># &lt;10&gt;</span></div><div class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> values:</div><div class="line">            group.send(value)  <span class="comment"># &lt;11&gt;</span></div><div class="line">        group.send(<span class="keyword">None</span>)  <span class="comment"># important! &lt;12&gt;</span></div><div class="line"></div><div class="line">    <span class="comment"># print(results)  # uncomment to debug</span></div><div class="line">    report(results)</div><div class="line"></div><div class="line"><span class="comment"># output report</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">(results)</span>:</span></div><div class="line">    <span class="keyword">for</span> key, result <span class="keyword">in</span> sorted(results.items()):</div><div class="line">        group, unit = key.split(<span class="string">';'</span>)</div><div class="line">        print(<span class="string">'&#123;:2&#125; &#123;:5&#125; averaging &#123;:.2f&#125;&#123;&#125;'</span>.format(</div><div class="line">              result.count, group, result.average, unit))</div><div class="line"></div><div class="line">data = &#123;</div><div class="line">    <span class="string">'girls;kg'</span>:</div><div class="line">        [<span class="number">40.9</span>, <span class="number">38.5</span>, <span class="number">44.3</span>, <span class="number">42.2</span>, <span class="number">45.2</span>, <span class="number">41.7</span>, <span class="number">44.5</span>, <span class="number">38.0</span>, <span class="number">40.6</span>, <span class="number">44.5</span>],</div><div class="line">    <span class="string">'girls;m'</span>:</div><div class="line">        [<span class="number">1.6</span>, <span class="number">1.51</span>, <span class="number">1.4</span>, <span class="number">1.3</span>, <span class="number">1.41</span>, <span class="number">1.39</span>, <span class="number">1.33</span>, <span class="number">1.46</span>, <span class="number">1.45</span>, <span class="number">1.43</span>],</div><div class="line">    <span class="string">'boys;kg'</span>:</div><div class="line">        [<span class="number">39.0</span>, <span class="number">40.8</span>, <span class="number">43.2</span>, <span class="number">40.8</span>, <span class="number">43.1</span>, <span class="number">38.6</span>, <span class="number">41.4</span>, <span class="number">40.6</span>, <span class="number">36.3</span>],</div><div class="line">    <span class="string">'boys;m'</span>:</div><div class="line">        [<span class="number">1.38</span>, <span class="number">1.5</span>, <span class="number">1.32</span>, <span class="number">1.25</span>, <span class="number">1.37</span>, <span class="number">1.48</span>, <span class="number">1.25</span>, <span class="number">1.49</span>, <span class="number">1.46</span>],</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(data)</div></pre></td></tr></table></figure><ol><li><code>averager</code>是<strong>子生成器</strong></li><li><code>main</code>函数中的客户代码发送的各个值绑定到这里的<code>term</code>变量上</li><li>至关重要的终止条件，如果没有终止条件，使用<code>yield from</code>调用这个协程的生成器会永远阻塞</li><li>返回的<code>Result</code>会成为<code>grouper</code>函数中<code>yield from</code>表达式的值</li><li><code>grouper</code>是<strong>委派生成器</strong></li><li>这个循环每次迭代时会新建一个<code>averager</code>实例，每个实例都是作为协程使用的生成器对象</li><li><code>grouper</code>发送的每个值都会经由<code>yield from</code>处理，通过管道传给<code>averager</code>实例。<code>grouper</code>会在<code>yield from</code>表达式处暂停，等待<code>averager</code>实例处理客户端发来的值。<code>averager</code>实例运行完毕后，返回的值绑定到<code>result[key]</code>上。<code>while</code>循环会不断创建<code>averager</code>实例，处理更多的值</li><li><code>main</code>函数是客户端代码，即是<strong>调用方</strong></li><li><code>group</code>是调用<code>grouper</code>函数得到的生成器对象，传给<code>grouper</code>函数的第一个参数是<code>results</code>，用于收集结果，第二个参数是某键。<code>group</code>作为协程使用。</li><li>预激<code>group</code>协程</li><li>把各个<code>value</code>传给<code>grouper</code>。传入的值最终到达<code>averager</code>函数中<code>term = yield</code>那一行</li><li>把<code>None</code>传入<code>grouper</code>，导致当前的<code>averager</code>实例终止，也让<code>grouper</code>继续运行，再创建一个<code>averager</code>实例，处理下一组值</li></ol><h3 id="yield-from的意义"><a href="#yield-from的意义" class="headerlink" title="yield from的意义"></a>yield from的意义</h3><p><code>yield from</code>的主要功能是打开双向通道，把最外层的调用方与最内层的子生成器连接起来，这样二者可以直接发送和产出值，还可以直接传入异常，而不用在位于中间的协程中添加大量处理异常的样板代码以及各种<code>.close()</code>和<code>.throw()</code>方法。</p><h2 id="使用future处理并发"><a href="#使用future处理并发" class="headerlink" title="使用future处理并发"></a>使用future处理并发</h2><blockquote><ul><li><strong>并发</strong>：交替做不同事的能力</li><li><strong>并行</strong>：同时做不同事的能力</li></ul></blockquote><h3 id="网络下载的三种风格"><a href="#网络下载的三种风格" class="headerlink" title="网络下载的三种风格"></a>网络下载的三种风格</h3><p><strong>CPU密集型任务</strong>  vs <strong>IO密集型任务</strong></p><p>为了高效处理网络IO，需要使用并发，因为网络有很高的延迟，所以为了不浪费CPU周期去等待，最好在收到网络响应之前做些其他的事。</p><h4 id="使用依序下载"><a href="#使用依序下载" class="headerlink" title="使用依序下载"></a>使用依序下载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> requests  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line">POP20_CC = (<span class="string">'CN IN US ID BR PK NG BD RU JP '</span></div><div class="line">            <span class="string">'MX PH VN ET EG DE IR TR CD FR'</span>).split()  <span class="comment"># &lt;2&gt;</span></div><div class="line">BASE_URL = <span class="string">'http://flupy.org/data/flags'</span>  <span class="comment"># &lt;3&gt;</span></div><div class="line">DEST_DIR = <span class="string">'downloads/'</span>  <span class="comment"># &lt;4&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_flag</span><span class="params">(img, filename)</span>:</span>  <span class="comment"># &lt;5&gt;</span></div><div class="line">    path = os.path.join(DEST_DIR, filename)</div><div class="line">    <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</div><div class="line">        fp.write(img)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(cc)</span>:</span>  <span class="comment"># &lt;6&gt;</span></div><div class="line">    url = <span class="string">'&#123;&#125;/&#123;cc&#125;/&#123;cc&#125;.gif'</span>.format(BASE_URL, cc=cc.lower())</div><div class="line">    resp = requests.get(url)</div><div class="line">    <span class="keyword">return</span> resp.content</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(text)</span>:</span>  <span class="comment"># &lt;7&gt;</span></div><div class="line">    print(text, end=<span class="string">' '</span>)</div><div class="line">    sys.stdout.flush()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_many</span><span class="params">(cc_list)</span>:</span>  <span class="comment"># &lt;8&gt;</span></div><div class="line">    <span class="keyword">for</span> cc <span class="keyword">in</span> sorted(cc_list):  <span class="comment"># &lt;9&gt;</span></div><div class="line">        image = get_flag(cc)</div><div class="line">        show(cc)</div><div class="line">        save_flag(image, cc.lower() + <span class="string">'.gif'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> len(cc_list)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(download_many)</span>:</span>  <span class="comment"># &lt;10&gt;</span></div><div class="line">    t0 = time.time()</div><div class="line">    count = download_many(POP20_CC)</div><div class="line">    elapsed = time.time() - t0</div><div class="line">    msg = <span class="string">'\n&#123;&#125; flags downloaded in &#123;:.2f&#125;s'</span></div><div class="line">    print(msg.format(count, elapsed))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(download_many)  <span class="comment"># &lt;11&gt;</span></div></pre></td></tr></table></figure><h4 id="使用concurrent-futures模块下载"><a href="#使用concurrent-futures模块下载" class="headerlink" title="使用concurrent.futures模块下载"></a>使用<code>concurrent.futures</code>模块下载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</div><div class="line"><span class="keyword">from</span> flags <span class="keyword">import</span> save_flag, get_flag, show, main  </div><div class="line"></div><div class="line">MAX_WORKERS = <span class="number">20</span>  <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one</span><span class="params">(cc)</span>:</span>  </div><div class="line">    image = get_flag(cc)</div><div class="line">    show(cc)</div><div class="line">    save_flag(image, cc.lower() + <span class="string">'.gif'</span>)</div><div class="line">    <span class="keyword">return</span> cc</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_many</span><span class="params">(cc_list)</span>:</span></div><div class="line">    workers = min(MAX_WORKERS, len(cc_list))  <span class="comment"># 2</span></div><div class="line">    <span class="keyword">with</span> futures.ThreadPoolExecutor(workers) <span class="keyword">as</span> executor:  <span class="comment"># 3</span></div><div class="line">        res = executor.map(download_one, sorted(cc_list))  <span class="comment"># 4</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> len(list(res))  <span class="comment"># 5</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(download_many)</div></pre></td></tr></table></figure><ol><li>设定<code>ThreadPoolEXecutor</code>类最多使用几个线程</li><li>设定工作的线程数量，使用允许的最大值<code>MAX_WORKERS</code>与要处理的数量之间较小的那个值，以免创建多余的线程</li><li>使用工作的线程数实例化<code>ThreadPoolExecutor</code>，<code>executor.__exit__</code>方法会用<code>executor.shutdown(wait=True)</code>方法，它会在所有线程都执行完毕钱阻塞线程</li><li><code>map</code>方法的作用与内置的<code>map</code>函数类似，不过<code>download_one</code>函数会在多个线程中并发调用；<code>map</code>方法返回一个生成器，因此可以迭代，获取各个返回的值</li></ol><h4 id="Future在哪里"><a href="#Future在哪里" class="headerlink" title="Future在哪里"></a><code>Future</code>在哪里</h4><p><code>Future</code>类的实例表示：可能已经完成或者尚未完成的延迟计算。它封装待完成的操作，可以放入队列，完成的状态可以查询，得到记过后可以获取结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_many</span><span class="params">(cc_list)</span>:</span></div><div class="line">    cc_list = cc_list[:<span class="number">5</span>]  </div><div class="line">    <span class="keyword">with</span> futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:  </div><div class="line">        to_do = []</div><div class="line">        <span class="keyword">for</span> cc <span class="keyword">in</span> sorted(cc_list):  </div><div class="line">            future = executor.submit(download_one, cc)  <span class="comment"># 1</span></div><div class="line">            to_do.append(future)  <span class="comment"># 2</span></div><div class="line">            msg = <span class="string">'Scheduled for &#123;&#125;: &#123;&#125;'</span></div><div class="line">            print(msg.format(cc, future))  </div><div class="line"></div><div class="line">        results = []</div><div class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> futures.as_completed(to_do):  <span class="comment"># 3</span></div><div class="line">            res = future.result()  <span class="comment"># 4</span></div><div class="line">            msg = <span class="string">'&#123;&#125; result: &#123;!r&#125;'</span></div><div class="line">            print(msg.format(future, res)) </div><div class="line">            results.append(res)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> len(results)</div></pre></td></tr></table></figure><ol><li><code>executor.submit</code>方法排定可调用对象的执行时间，然后返回一个<code>Future</code>，表示这个待执行操作</li><li>存储各个<code>Future</code>，后面传递个<code>as_completed</code>函数</li><li><code>as_completed</code>函数在<code>Future</code>运行结束后产出<code>Future</code></li><li>获取该<code>Futrue</code>的结果</li></ol><h3 id="阻塞型IO和GIL"><a href="#阻塞型IO和GIL" class="headerlink" title="阻塞型IO和GIL"></a>阻塞型IO和GIL</h3><p>CPython解释器不是线程安全的，因此有<strong>全程解释器锁</strong><code>GIL</code>，一次只允许使用一个线程执行Python字节码。</p><p>标准库中所有执行<strong>阻塞型IO操作的函数</strong>，在等待操作系统返回结果时都会释放<code>GIL</code>。这意味着在Python语言层次可以使用多线程，而IO密集型Python程序能从中受益：一个Python线程等待网络响应时，阻塞型IO函数会释放<code>GIL</code>，再运行一个线程。</p><h3 id="使用concurrent-futures模块启动进程"><a href="#使用concurrent-futures模块启动进程" class="headerlink" title="使用concurrent.futures模块启动进程"></a>使用concurrent.futures模块启动进程</h3><p><code>concurrent.futures</code>这个模块实现的是真正的并行计算，因为它使用<code>ProcessPoolExecutor</code>类把工作分配给多个Python进程处理，因此如果需要做<strong>CPU密集处理</strong>，使用这个模块能够绕开<code>GIL</code>，利用所有可用的CPU核心。</p><h3 id="实验Executor-map方法"><a href="#实验Executor-map方法" class="headerlink" title="实验Executor.map方法"></a>实验Executor.map方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, strftime</div><div class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(*args)</span>:</span>  </div><div class="line">    print(strftime(<span class="string">'[%H:%M:%S]'</span>), end=<span class="string">' '</span>)</div><div class="line">    print(*args)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loiter</span><span class="params">(n)</span>:</span>  </div><div class="line">    msg = <span class="string">'&#123;&#125;loiter(&#123;&#125;): doing nothing for &#123;&#125;s...'</span></div><div class="line">    display(msg.format(<span class="string">'\t'</span>*n, n, n))</div><div class="line">    sleep(n)</div><div class="line">    msg = <span class="string">'&#123;&#125;loiter(&#123;&#125;): done.'</span></div><div class="line">    display(msg.format(<span class="string">'\t'</span>*n, n))</div><div class="line">    <span class="keyword">return</span> n * <span class="number">10</span>  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    display(<span class="string">'Script starting.'</span>)</div><div class="line">    executor = futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>)  <span class="comment"># 1</span></div><div class="line">    results = executor.map(loiter, range(<span class="number">5</span>))  <span class="comment"># 2</span></div><div class="line">    display(<span class="string">'results:'</span>, results)  </div><div class="line">    display(<span class="string">'Waiting for individual results:'</span>)</div><div class="line">    <span class="keyword">for</span> i, result <span class="keyword">in</span> enumerate(results):  <span class="comment"># 3</span></div><div class="line">        display(<span class="string">'result &#123;&#125;: &#123;&#125;'</span>.format(i, result))</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><ol><li>创建<code>ThreadPoolExecutor</code>实例，有3个线程</li><li>把五个任务提交给<code>executor</code>，因为只有3个线程，所以只有3个任务会立即开始：<code>loiter(0)</code>、<code>loiter(1)</code>和<code>loiter(2)</code>，这是非阻塞调用</li><li><code>for</code>循环中的<code>enumerate</code>函数会隐式调用<code>next(results)</code>，这个函数又会在内部表示第一个任务<code>loiter(0)</code>的<code>_f</code>期物上调用<code>_f.result()</code>方法。<code>result</code>方法会阻塞，直到期物运行结束，因此这个循环每次迭代时都要等待下一个结果做好准备。</li></ol><h3 id="线程和多进程的替代方案"><a href="#线程和多进程的替代方案" class="headerlink" title="线程和多进程的替代方案"></a>线程和多进程的替代方案</h3><ul><li><code>futures.ThreadPoolExecutor</code>类可以创建多线程，但是不够灵活可能要使用<code>threading</code>模块来自行制定方案，比如说使用<code>queue</code>模块创建线程安全的队列，在线程之间传递数据</li><li><code>futures.ProcessPoolExecutor</code>类可以创建多进程，但是不够灵活可能要使用<code>multiprocessing</code>模块代来自行定制方案，可以解决协作进程之间传递数据的问题</li></ul><h2 id="使用asyncio包处理并发"><a href="#使用asyncio包处理并发" class="headerlink" title="使用asyncio包处理并发"></a>使用asyncio包处理并发</h2><blockquote><ul><li><strong>阻塞与非阻塞</strong>：如果不能立即获得结果，那么是否等待？</li><li><strong>同步与异步</strong>：是否需要调用者来通知结果</li></ul><p>如何解决<strong>CPU高速执行能力</strong>和<strong>IO设备低速执行能力</strong>之间的矛盾？</p><ul><li><p><strong>同步IO</strong>：等待IO操作完成，才能进行下一步操作</p><p>同步IO模型下，主线程只能被挂起。使用多线程和多进程方法解决同步IO的并发问题，但是系统不能无上限的增加线程。由于系统切换线程的开销也很大，所以一旦线程数量过多，CPU的时间就话在线程切换上了，真正运行代码的时间就少了，结果导致性能下降。</p></li><li><p><strong>异步IO</strong>：不等待IO结果，去干别的事。当IO返回结果时再通知CPU处理。</p><p>异步模型下，主线程并没有休息，而是在消息循环中继续处理其他消息。这样，一个线程就可以同时处理多个IO请求，并且没有切换线程的操作。对于大多数IO密集型的应用程序，异步IO将大大提升系统的多任务处理能力。</p></li></ul></blockquote><h3 id="线程与协程对比"><a href="#线程与协程对比" class="headerlink" title="线程与协程对比"></a>线程与协程对比</h3><blockquote><ul><li><p><strong>进程</strong>：一个程序在一个数据集中的一次动态执行过程，它是操作系统进行资源分配和调度的一个独立单位。</p><p>进程一般由程序、数据集、进程控制块三部分组成。我么编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。</p><p>进程占据独立内存，不同进程通过进程间通信来通信。创建、撤销和切换的开销比较大，但是相对稳定安全。</p></li><li><p><strong>线程</strong>：进程的一个实体，是操作系统调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</p><p>线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，如程序计数器、一组寄存器和栈，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><p>线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p></li><li><p><strong>协程</strong>：一种用户态的轻量级线程，它的调度完全由用户在代码里控制，不关操作系统什么事。</p><p>协程的执行效率非常高。因为子程序切换不是线程切换而由程序自身控制。因此没有线程切换的开销，和多线程比，线程数量越多协程性能就越明显。协程不需要多线程的锁机制。在协程中控制共享资源不加锁，只需要判断状态就好了。</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spin</span><span class="params">(msg, done)</span>:</span>  </div><div class="line">    write, flush = sys.stdout.write, sys.stdout.flush</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> itertools.cycle(<span class="string">'|/-\\'</span>):  <span class="comment"># 1</span></div><div class="line">        status = char + <span class="string">' '</span> + msg</div><div class="line">        write(status)</div><div class="line">        flush()</div><div class="line">        write(<span class="string">'\x08'</span> * len(status))  <span class="comment"># 2</span></div><div class="line">        <span class="keyword">if</span> done.wait(<span class="number">.1</span>):  </div><div class="line">            <span class="keyword">break</span></div><div class="line">    write(<span class="string">' '</span> * len(status) + <span class="string">'\x08'</span> * len(status))  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">slow_function</span><span class="params">()</span>:</span>  </div><div class="line">    <span class="comment"># pretend waiting a long time for I/O</span></div><div class="line">    time.sleep(<span class="number">3</span>)  </div><div class="line">    <span class="keyword">return</span> <span class="number">42</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">supervisor</span><span class="params">()</span>:</span>  <span class="comment"># 3</span></div><div class="line">    done = threading.Event()  <span class="comment"># 4</span></div><div class="line">    spinner = threading.Thread(target=spin,</div><div class="line">                               args=(<span class="string">'thinking!'</span>, done))</div><div class="line">    print(<span class="string">'spinner object:'</span>, spinner)  </div><div class="line">    spinner.start()  <span class="comment"># 5</span></div><div class="line">    result = slow_function()  <span class="comment"># 6</span></div><div class="line">    done.set()  </div><div class="line">    spinner.join()  </div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    result = supervisor()  </div><div class="line">    print(<span class="string">'Answer:'</span>, result)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><ol><li>这是个无限循环，因为<code>itertools.cycle</code>函数会从指定的序列中反复不断的生成元素</li><li>这是显示文本式样动画的诀窍所在，使用退格符<code>\x08</code>把光标移回来</li><li>这个函数设置从属线程，显示线程对象，运行耗时的计算，最后杀死线程</li><li>定义事件<code>done = threading.Event()</code>，阻塞事件线程<code>done.wait()</code>如果事件标志为<code>True</code>则不阻塞若有参数为阻塞时间，继续事件线程<code>done.set()</code>设置时间标志位<code>True</code>，结束事件线程<code>done.clear()</code>设置事件标志为<code>False</code></li><li><code>spinner.start()</code>启动从属线程，<code>spinner.join()</code>等待线程结束</li><li>运行<code>slow_function</code>函数，阻塞主线程，同时从属线程以动画形式显示旋转指针</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine  # &lt;1&gt;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spin</span><span class="params">(msg)</span>:</span>  </div><div class="line">    write, flush = sys.stdout.write, sys.stdout.flush</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> itertools.cycle(<span class="string">'|/-\\'</span>):</div><div class="line">        status = char + <span class="string">' '</span> + msg</div><div class="line">        write(status)</div><div class="line">        flush()</div><div class="line">        write(<span class="string">'\x08'</span> * len(status))</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">.1</span>)  <span class="comment"># &lt;2&gt;</span></div><div class="line">        <span class="keyword">except</span> asyncio.CancelledError:  <span class="comment"># &lt;3&gt;</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    write(<span class="string">' '</span> * len(status) + <span class="string">'\x08'</span> * len(status))</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">slow_function</span><span class="params">()</span>:</span>  <span class="comment"># &lt;4&gt;</span></div><div class="line">    <span class="comment"># pretend waiting a long time for I/O</span></div><div class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">3</span>)  </div><div class="line">    <span class="keyword">return</span> <span class="number">42</span></div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">supervisor</span><span class="params">()</span>:</span>  <span class="comment"># &lt;5&gt;</span></div><div class="line">    spinner = asyncio.<span class="keyword">async</span>(spin(<span class="string">'thinking!'</span>))  <span class="comment"># &lt;6&gt;</span></div><div class="line">    print(<span class="string">'spinner object:'</span>, spinner)  </div><div class="line">    result = <span class="keyword">yield</span> <span class="keyword">from</span> slow_function()  <span class="comment"># &lt;7&gt;</span></div><div class="line">    spinner.cancel()  <span class="comment"># &lt;8&gt;</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    loop = asyncio.get_event_loop()  <span class="comment"># &lt;9&gt;</span></div><div class="line">    result = loop.run_until_complete(supervisor())  <span class="comment"># &lt;10&gt;</span></div><div class="line">    loop.close()</div><div class="line">    print(<span class="string">'Answer:'</span>, result)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><ol><li>使用<code>@asyncio.coroutine</code>装饰器不是强制要求，但是强烈建议这么做，因为这样能在一众普通函数中把协程凸显出来，也有助于调试。如果还没从中产出值，协程就被垃圾回收了，那就可以发出警告。这个装饰器不会预激协程。</li><li>使用<code>yield from asyncio.sleep(.1)</code>代替<code>time.sleep(.1)</code>，这样的休眠不会阻塞事件循环</li><li>如果<code>spin</code>函数苏醒后抛出<code>asyncio.CancelledError</code>异常，其原因是发出了取消请求，因此退出了循环</li><li>现在<code>slow_function</code>函数是协程了，在用休眠假装进行IO操作时，使用<code>yield from</code>继续执行事件循环，<code>yield from asyncio.sleep(3)</code>表达式把控制权交给主循环，在休眠结束后恢复这个协程</li><li>现在<code>supervisor</code>函数也是协程了，因此可以使用<code>yield from</code>驱动<code>slow_function</code>函数</li><li><code>asyncio.async()</code>函数排定<code>spin</code>协程的运行时间，使用一个<code>Task</code>对象包装<code>spin</code>协程并立即返回</li><li>驱动<code>slow_function()</code>函数，结束后获取返回值的同时，事件循环继续运行，因为<code>slow_function</code>函数最后使用<code>yield from asynico.sleep(3)</code>表达式把控制权交回给主循环</li><li><code>Task</code>对象可以取消，取消后会在协程当前暂停的<code>yield</code>处抛出<code>asynico.CancelledError</code>异常。协程可以捕获这个异常，也可以延迟取消，甚至拒绝取消</li><li>获取事件循环的引用。所谓<strong>事件循环</strong>，程序开启一个无限的循环，程序员会把一些函数注册到事件循环上，当满足事件发生的时候，调用相应的协程函数。</li><li>驱动<code>supervisor</code>协程，让它运行完毕。这个协程的返回值是这次调用的返回值</li></ol><h4 id="asynico-Future：故意不阻塞"><a href="#asynico-Future：故意不阻塞" class="headerlink" title="asynico.Future：故意不阻塞"></a>asynico.Future：故意不阻塞</h4><ul><li><code>asynico.Future</code>类的<code>.result()</code>方法没有参数，不能指定超时时间。此外，如果调用<code>.result()</code>方法时期物还没运行完毕，那么<code>.result()</code>方法不会阻塞去等待结果，而是抛出<code>asyncio.InvalidStateError</code>异常</li><li>使用<code>yield from</code>处理期物，等待期物运行完毕这一步无需我们关心，而且不会阻塞事件循环，因为在<code>asyncio</code>包中，<code>yield from</code>的作用是把控制权还给事件循环</li><li>一般情况下，<code>asynico.Future</code>对象由<code>yield from</code>驱动，而不是靠调用<code>.done()</code>、<code>.add_done_callback()</code>和<code>.result()</code>方法驱动</li></ul><h4 id="从期物、任务和协程中产出"><a href="#从期物、任务和协程中产出" class="headerlink" title="从期物、任务和协程中产出"></a>从期物、任务和协程中产出</h4><p>在<code>asyncio</code>包中，期物和协程关系紧密，因为可以使用<code>yield from</code>从<code>asyncio.Future</code>对象中产出结果。通过如<code>res = yield from foo()</code>可以互换协程和期物。</p><p>为了执行这些操作，必须排定协程的运行时间，然后使用<code>asyncio.Task</code>对象包装协程。对协程来说，获取<code>Task</code>对象有两种方式：</p><ul><li><p><code>asynico.async(coro_or_future, *, loop=None)</code></p><p>这个函数统一了协程和期物，第一个参数可以是其中的任意一个。如果是协程，那么<code>async</code>函数会调用<code>loop.create_task()</code>方法创建<code>Task</code>对象。<code>loop=</code>关键字参数是可选的，用于传入事件循环。如果没有传入，那么<code>async</code>函数会通过调用<code>asyncio.get_event_loop()</code>函数获取循环对象。</p></li><li><p><code>BaseEventLoop.create_task(coro)</code></p><p>这个方法排定协程的执行时间，返回一个<code>asynico.Task</code>对象。</p></li></ul><h3 id="使用asyncio和aiohttp包下载"><a href="#使用asyncio和aiohttp包下载" class="headerlink" title="使用asyncio和aiohttp包下载"></a>使用<code>asyncio</code>和<code>aiohttp</code>包下载</h3><ul><li>编写的协程链条始终通过把最外层委派生成器传给<code>asynico</code>包中的某个函数，如<code>loop.run_until_complete()</code>驱动</li><li>编写的协程链条最终通过<code>yield from</code>把职责委托给<code>asyncio</code>包中的某个协程函数或协程方法，如<code>asyncio.sleep()</code>和<code>aiohttp.request()</code></li><li>概括起来就是：使用<code>asyncio</code>包时，我们编写的异步代码包含由<code>asynico</code>本身驱动的协程即委派生成器，而生成器最终把职责委托给<code>asyncio</code>包或第三方库中的协程。这种处理方式相当于架起了管道，让<code>asynico</code>事件循环驱动执行低层异步IO操作的库函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> aiohttp  </div><div class="line"><span class="keyword">from</span> flags <span class="keyword">import</span> BASE_URL, save_flag, show, main  </div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(cc)</span>:</span></div><div class="line">    url = <span class="string">'&#123;&#125;/&#123;cc&#125;/&#123;cc&#125;.gif'</span>.format(BASE_URL, cc=cc.lower())</div><div class="line">    resp = <span class="keyword">yield</span> <span class="keyword">from</span> aiohttp.request(<span class="string">'GET'</span>, url)  <span class="comment"># 1</span></div><div class="line">    image = <span class="keyword">yield</span> <span class="keyword">from</span> resp.read()  <span class="comment"># 2</span></div><div class="line">    <span class="keyword">return</span> image</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one</span><span class="params">(cc)</span>:</span>  <span class="comment"># 3</span></div><div class="line">    image = <span class="keyword">yield</span> <span class="keyword">from</span> get_flag(cc)  </div><div class="line">    show(cc)</div><div class="line">    save_flag(image, cc.lower() + <span class="string">'.gif'</span>)</div><div class="line">    <span class="keyword">return</span> cc</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_many</span><span class="params">(cc_list)</span>:</span></div><div class="line">    loop = asyncio.get_event_loop()  <span class="comment"># 4</span></div><div class="line">    to_do = [download_one(cc) <span class="keyword">for</span> cc <span class="keyword">in</span> sorted(cc_list)]  </div><div class="line">    wait_coro = asyncio.wait(to_do)  <span class="comment"># 5</span></div><div class="line">    res, _ = loop.run_until_complete(wait_coro)  <span class="comment"># 6</span></div><div class="line">    loop.close() </div><div class="line">    <span class="keyword">return</span> len(res)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(download_many)</div></pre></td></tr></table></figure><ol><li>非阻塞的操作通过协程实现，客户代码通过<code>yield from</code>把职责委托给协程，以便异步运行协程</li><li>读取相应内容是一项异步操作</li><li><code>download_one</code>函数也必须是协程，因为用到了<code>yield from</code></li><li>获取事件循环底层实现的引用</li><li><code>wait</code>是一个协程，等待给它的所有协程运行完毕后结束，把各个协程包装进一个<code>Task</code>对象</li><li>执行事件循环，直到<code>wait_coro</code>运行结束，事件循环运行的过程中，这个脚本会在这里阻塞。</li></ol><h3 id="避免阻塞型调用"><a href="#避免阻塞型调用" class="headerlink" title="避免阻塞型调用"></a>避免阻塞型调用</h3><p>有两种方法能避免阻塞型调用中止整个应用程序的进程：</p><ul><li>在单独的线程中运行个阻塞型操作，然后启用多线程，消耗的内存比较大</li><li>把每个阻塞型操作转换成非阻塞的异步调用使用</li></ul><h3 id="改进asycio下载脚本"><a href="#改进asycio下载脚本" class="headerlink" title="改进asycio下载脚本"></a>改进asycio下载脚本</h3><h4 id="使用asyncio-as-completed函数"><a href="#使用asyncio-as-completed函数" class="headerlink" title="使用asyncio.as_completed函数"></a>使用asyncio.as_completed函数</h4><p>原版把一个协程列表传给<code>asyncio.wait</code>函数，经由<code>loop.run_until_complete</code>方法驱动，全部协程运行结束后才能返回结果。可是为了更新进度条，各个协程运行结束后就要立即获取结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> collections</div><div class="line"><span class="keyword">import</span> contextlib</div><div class="line"></div><div class="line"><span class="keyword">import</span> aiohttp</div><div class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</div><div class="line"><span class="keyword">import</span> tqdm</div><div class="line"></div><div class="line"><span class="keyword">from</span> flags2_common <span class="keyword">import</span> main, HTTPStatus, Result, save_flag</div><div class="line"></div><div class="line"><span class="comment"># default set low to avoid errors from remote site, such as</span></div><div class="line"><span class="comment"># 503 - Service Temporarily Unavailable</span></div><div class="line">DEFAULT_CONCUR_REQ = <span class="number">5</span></div><div class="line">MAX_CONCUR_REQ = <span class="number">1000</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchError</span><span class="params">(Exception)</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, country_code)</span>:</span></div><div class="line">        self.country_code = country_code</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(base_url, cc)</span>:</span> <span class="comment"># &lt;2&gt;</span></div><div class="line">    url = <span class="string">'&#123;&#125;/&#123;cc&#125;/&#123;cc&#125;.gif'</span>.format(base_url, cc=cc.lower())</div><div class="line">    resp = <span class="keyword">yield</span> <span class="keyword">from</span> aiohttp.request(<span class="string">'GET'</span>, url)</div><div class="line">    <span class="keyword">with</span> contextlib.closing(resp):</div><div class="line">        <span class="keyword">if</span> resp.status == <span class="number">200</span>:</div><div class="line">            image = <span class="keyword">yield</span> <span class="keyword">from</span> resp.read()</div><div class="line">            <span class="keyword">return</span> image</div><div class="line">        <span class="keyword">elif</span> resp.status == <span class="number">404</span>:</div><div class="line">            <span class="keyword">raise</span> web.HTTPNotFound()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> aiohttp.HttpProcessingError(</div><div class="line">                code=resp.status, message=resp.reason,</div><div class="line">                headers=resp.headers)</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one</span><span class="params">(cc, base_url, semaphore, verbose)</span>:</span>  <span class="comment"># &lt;3&gt;</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> (<span class="keyword">yield</span> <span class="keyword">from</span> semaphore):  <span class="comment"># &lt;4&gt;</span></div><div class="line">            image = <span class="keyword">yield</span> <span class="keyword">from</span> get_flag(base_url, cc)  <span class="comment"># &lt;5&gt;</span></div><div class="line">    <span class="keyword">except</span> web.HTTPNotFound:  </div><div class="line">        status = HTTPStatus.not_found</div><div class="line">        msg = <span class="string">'not found'</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line">        <span class="keyword">raise</span> FetchError(cc) <span class="keyword">from</span> exc  </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        save_flag(image, cc.lower() + <span class="string">'.gif'</span>)  </div><div class="line">        status = HTTPStatus.ok</div><div class="line">        msg = <span class="string">'OK'</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> verbose <span class="keyword">and</span> msg:</div><div class="line">        print(cc, msg)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Result(status, cc)</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloader_coro</span><span class="params">(cc_list, base_url, verbose, concur_req)</span>:</span>  <span class="comment"># 6</span></div><div class="line">    counter = collections.Counter()</div><div class="line">    semaphore = asyncio.Semaphore(concur_req)  <span class="comment"># 7</span></div><div class="line">    to_do = [download_one(cc, base_url, semaphore, verbose)</div><div class="line">             <span class="keyword">for</span> cc <span class="keyword">in</span> sorted(cc_list)]  </div><div class="line"></div><div class="line">    to_do_iter = asyncio.as_completed(to_do)  <span class="comment"># 8</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> verbose:</div><div class="line">        to_do_iter = tqdm.tqdm(to_do_iter, total=len(cc_list))  </div><div class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> to_do_iter:  </div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            res = <span class="keyword">yield</span> <span class="keyword">from</span> future  </div><div class="line">        <span class="keyword">except</span> FetchError <span class="keyword">as</span> exc:  </div><div class="line">            country_code = exc.country_code  </div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                error_msg = exc.__cause__.args[<span class="number">0</span>]  </div><div class="line">            <span class="keyword">except</span> IndexError:</div><div class="line">                error_msg = exc.__cause__.__class__.__name__  </div><div class="line">            <span class="keyword">if</span> verbose <span class="keyword">and</span> error_msg:</div><div class="line">                msg = <span class="string">'*** Error for &#123;&#125;: &#123;&#125;'</span></div><div class="line">                print(msg.format(country_code, error_msg))</div><div class="line">            status = HTTPStatus.error</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            status = res.status</div><div class="line"></div><div class="line">        counter[status] += <span class="number">1</span> </div><div class="line"></div><div class="line">    <span class="keyword">return</span> counter  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_many</span><span class="params">(cc_list, base_url, verbose, concur_req)</span>:</span></div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    coro = downloader_coro(cc_list, base_url, verbose, concur_req)</div><div class="line">    counts = loop.run_until_complete(coro)  <span class="comment"># 9</span></div><div class="line">    loop.close()  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> counts</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(download_many, DEFAULT_CONCUR_REQ, MAX_CONCUR_REQ)</div></pre></td></tr></table></figure><ol><li>自定义异常用于包装其他HTTP或网络异常，并获取<code>country_code</code>，以便报告错误</li><li><code>get_flag</code>协程有三种返回结果：返回下载得到的图像；HTTP响应码为404时，抛出<code>web.HTTPNotFound</code>异常；返回其他HTTP状态码时，抛出<code>aiohttp.HttpProcessingError</code>异常。</li><li><code>semaphore</code>参数是<code>asyncio.Semaphore</code>类的实例，<code>Semaphore</code>类是同步配置，用于限制并发请求数</li><li>在<code>yield from</code>表达式中把<code>semaphore</code>当成上下文管理器使用，防止阻塞整个系统，如果<code>semaphore</code>计数器的值是所允许的最大值，只有这个协程会阻塞。</li><li>退出这个<code>with</code>语句后，<code>semaphore</code>计数器的值会递减，解除阻塞可能在等待同一个<code>semaphore</code>对象的其他协程实例</li><li>这个协程的参数与<code>download_many</code>函数一致，但是不能直接调用。因为只要函数中<code>yield from</code>，函数就会变成协程，协程是不能直接调用的。</li><li>创建一个<code>asyncio.Semaphore</code>实例，最多允许激活<code>concur_req</code>个使用这个计数器的协程</li><li>获取一个迭代器，这个迭代器会在期物运行结束后返回期物</li><li><code>download_many</code>函数只是实例化<code>downloader_coro</code>协程，然后通过<code>run_until_complete</code>方法把它传给事件循环</li></ol><h4 id="使用Executor对象，防止阻塞事件循环"><a href="#使用Executor对象，防止阻塞事件循环" class="headerlink" title="使用Executor对象，防止阻塞事件循环"></a>使用Executor对象，防止阻塞事件循环</h4><p>访问本地文件系统可能也会阻塞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one</span><span class="params">(cc, base_url, semaphore, verbose)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> (<span class="keyword">yield</span> <span class="keyword">from</span> semaphore):</div><div class="line">            image = <span class="keyword">yield</span> <span class="keyword">from</span> get_flag(base_url, cc)</div><div class="line">    <span class="keyword">except</span> web.HTTPNotFound:</div><div class="line">        status = HTTPStatus.not_found</div><div class="line">        msg = <span class="string">'not found'</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line">        <span class="keyword">raise</span> FetchError(cc) <span class="keyword">from</span> exc</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        loop = asyncio.get_event_loop()  <span class="comment"># &lt;1&gt;</span></div><div class="line">        loop.run_in_executor(<span class="keyword">None</span>,  <span class="comment"># &lt;2&gt;</span></div><div class="line">                save_flag, image, cc.lower() + <span class="string">'.gif'</span>)  <span class="comment"># &lt;3&gt;</span></div><div class="line">        status = HTTPStatus.ok</div><div class="line">        msg = <span class="string">'OK'</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> verbose <span class="keyword">and</span> msg:</div><div class="line">        print(cc, msg)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Result(status, cc)</div></pre></td></tr></table></figure><ol><li>获取事件循环对象的引用</li><li><code>run_in_executor</code>方法的第一个参数是<code>Executor</code>实例，如果设置为<code>None</code>，使用事件循环默认<code>ThreadPoolExecutor</code>实例</li><li>余下参数是可调用的对象，以及可调用对象的位置参数</li></ol><h3 id="从回调到期物和协程"><a href="#从回调到期物和协程" class="headerlink" title="从回调到期物和协程"></a>从回调到期物和协程</h3><p>如果需要协调异步请求，而不只是发起完全独立的请求，协调较之回调的好处会变得显而易见。避免陷入，<strong>回调地狱</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> collections</div><div class="line"></div><div class="line"><span class="keyword">import</span> aiohttp</div><div class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</div><div class="line"><span class="keyword">import</span> tqdm</div><div class="line"></div><div class="line"><span class="keyword">from</span> flags2_common <span class="keyword">import</span> main, HTTPStatus, Result, save_flag</div><div class="line"></div><div class="line"><span class="comment"># default set low to avoid errors from remote site, such as</span></div><div class="line"><span class="comment"># 503 - Service Temporarily Unavailable</span></div><div class="line">DEFAULT_CONCUR_REQ = <span class="number">5</span></div><div class="line">MAX_CONCUR_REQ = <span class="number">1000</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchError</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, country_code)</span>:</span></div><div class="line">        self.country_code = country_code</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_get</span><span class="params">(url)</span>:</span></div><div class="line">    res = <span class="keyword">yield</span> <span class="keyword">from</span> aiohttp.request(<span class="string">'GET'</span>, url)</div><div class="line">    <span class="keyword">if</span> res.status == <span class="number">200</span>:</div><div class="line">        ctype = res.headers.get(<span class="string">'Content-type'</span>, <span class="string">''</span>).lower()</div><div class="line">        <span class="keyword">if</span> <span class="string">'json'</span> <span class="keyword">in</span> ctype <span class="keyword">or</span> url.endswith(<span class="string">'json'</span>):</div><div class="line">            data = <span class="keyword">yield</span> <span class="keyword">from</span> res.json()  <span class="comment"># &lt;1&gt;</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            data = <span class="keyword">yield</span> <span class="keyword">from</span> res.read()  <span class="comment"># &lt;2&gt;</span></div><div class="line">        <span class="keyword">return</span> data</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> res.status == <span class="number">404</span>:</div><div class="line">        <span class="keyword">raise</span> web.HTTPNotFound()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">raise</span> aiohttp.errors.HttpProcessingError(</div><div class="line">            code=res.status, message=res.reason,</div><div class="line">            headers=res.headers)</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_country</span><span class="params">(base_url, cc)</span>:</span></div><div class="line">    url = <span class="string">'&#123;&#125;/&#123;cc&#125;/metadata.json'</span>.format(base_url, cc=cc.lower())</div><div class="line">    metadata = <span class="keyword">yield</span> <span class="keyword">from</span> http_get(url)  <span class="comment"># &lt;3&gt;</span></div><div class="line">    <span class="keyword">return</span> metadata[<span class="string">'country'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(base_url, cc)</span>:</span></div><div class="line">    url = <span class="string">'&#123;&#125;/&#123;cc&#125;/&#123;cc&#125;.gif'</span>.format(base_url, cc=cc.lower())</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">yield</span> <span class="keyword">from</span> http_get(url)) <span class="comment"># &lt;4&gt;</span></div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one</span><span class="params">(cc, base_url, semaphore, verbose)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> (<span class="keyword">yield</span> <span class="keyword">from</span> semaphore): <span class="comment"># &lt;5&gt;</span></div><div class="line">            image = <span class="keyword">yield</span> <span class="keyword">from</span> get_flag(base_url, cc)</div><div class="line">        <span class="keyword">with</span> (<span class="keyword">yield</span> <span class="keyword">from</span> semaphore):</div><div class="line">            country = <span class="keyword">yield</span> <span class="keyword">from</span> get_country(base_url, cc)</div><div class="line">    <span class="keyword">except</span> web.HTTPNotFound:</div><div class="line">        status = HTTPStatus.not_found</div><div class="line">        msg = <span class="string">'not found'</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line">        <span class="keyword">raise</span> FetchError(cc) <span class="keyword">from</span> exc</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        country = country.replace(<span class="string">' '</span>, <span class="string">'_'</span>)</div><div class="line">        filename = <span class="string">'&#123;&#125;-&#123;&#125;.gif'</span>.format(country, cc)</div><div class="line">        loop = asyncio.get_event_loop()</div><div class="line">        loop.run_in_executor(<span class="keyword">None</span>, save_flag, image, filename)</div><div class="line">        status = HTTPStatus.ok</div><div class="line">        msg = <span class="string">'OK'</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> verbose <span class="keyword">and</span> msg:</div><div class="line">        print(cc, msg)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Result(status, cc)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloader_coro</span><span class="params">(cc_list, base_url, verbose, concur_req)</span>:</span></div><div class="line">    counter = collections.Counter()</div><div class="line">    semaphore = asyncio.Semaphore(concur_req)</div><div class="line">    to_do = [download_one(cc, base_url, semaphore, verbose)</div><div class="line">             <span class="keyword">for</span> cc <span class="keyword">in</span> sorted(cc_list)]</div><div class="line"></div><div class="line">    to_do_iter = asyncio.as_completed(to_do)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> verbose:</div><div class="line">        to_do_iter = tqdm.tqdm(to_do_iter, total=len(cc_list))</div><div class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> to_do_iter:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            res = <span class="keyword">yield</span> <span class="keyword">from</span> future</div><div class="line">        <span class="keyword">except</span> FetchError <span class="keyword">as</span> exc:</div><div class="line">            country_code = exc.country_code</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                error_msg = exc.__cause__.args[<span class="number">0</span>]</div><div class="line">            <span class="keyword">except</span> IndexError:</div><div class="line">                error_msg = exc.__cause__.__class__.__name__</div><div class="line">            <span class="keyword">if</span> verbose <span class="keyword">and</span> error_msg:</div><div class="line">                msg = <span class="string">'*** Error for &#123;&#125;: &#123;&#125;'</span></div><div class="line">                print(msg.format(country_code, error_msg))</div><div class="line">            status = HTTPStatus.error</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            status = res.status</div><div class="line"></div><div class="line">        counter[status] += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> counter</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_many</span><span class="params">(cc_list, base_url, verbose, concur_req)</span>:</span></div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    coro = downloader_coro(cc_list, base_url, verbose, concur_req)</div><div class="line">    counts = loop.run_until_complete(coro)</div><div class="line">    loop.close()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> counts</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(download_many, DEFAULT_CONCUR_REQ, MAX_CONCUR_REQ)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;可迭代的对象、迭代器和生成器&quot;&gt;&lt;a href=&quot;#可迭代的对象、迭代器和生成器&quot; class=&quot;headerlink&quot; title=&quot;可迭代的对象、迭代器和生成器&quot;&gt;&lt;/a&gt;可迭代的对象、迭代器和生成器&lt;/h2&gt;&lt;h3 id=&quot;Sentence类第1版：单词序列
      
    
    </summary>
    
    
      <category term="Python" scheme="http://printxhl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Fluent Python (1)：数据结构</title>
    <link href="http://printxhl.com/2018/05/30/Python-FlunetPython-data/"/>
    <id>http://printxhl.com/2018/05/30/Python-FlunetPython-data/</id>
    <published>2018-05-30T06:55:00.392Z</published>
    <updated>2018-03-04T08:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="纸牌的数据模型"><a href="#纸牌的数据模型" class="headerlink" title="纸牌的数据模型"></a>纸牌的数据模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> collections</div><div class="line"></div><div class="line">Card = collections.namedtuple(<span class="string">'Card'</span>, [<span class="string">'rank'</span>, <span class="string">'suit'</span>]) <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrenchDeck</span>:</span></div><div class="line">    ranks = [str(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">11</span>)] + list(<span class="string">'JQKA'</span>) <span class="comment"># 2</span></div><div class="line">    suits = <span class="string">'spades diamonds clubs hearts'</span>.split()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  <span class="comment"># 3</span></div><div class="line">        self._cards = [Card(rank, suit) <span class="keyword">for</span> suit <span class="keyword">in</span> self.suits  <span class="comment"># 4</span></div><div class="line">                                        <span class="keyword">for</span> rank <span class="keyword">in</span> self.ranks]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span><span class="comment"># 5</span></div><div class="line">        <span class="keyword">return</span> len(self._cards)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, position)</span>:</span>  <span class="comment"># 6</span></div><div class="line">        <span class="keyword">return</span> self._cards[position]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    deck = FrenchDeck()</div></pre></td></tr></table></figure><ol><li><code>collections.namedtuple</code>：用以构建只有少数属性但是没有方法的对象，如数据库条目</li><li>类属型，类和实例皆可访问</li><li><code>__init__</code>：创建实例时的初始化</li><li>实例属性<ul><li><code>self.cards</code>：公共属性，在类和子类中使用，实例化后可以访问</li><li><code>self._cards</code>：单下划线，表示私有（保护类型）类型（方法，属性），在类和子类中使用，假装不给实例化后访问</li><li><code>self.__cards</code>：双下划线，表示私有类型，子类不可访问，硬要访问的话<code>_FrenchDeck__cards</code></li></ul></li><li><code>__len__</code>：特殊方法，<code>len(deck) == deck.__len__()</code></li><li><code>__getitem__</code>：特殊方法，<code>deck[1] == deck__getitem__(1)</code></li></ol><h3 id="向量的数据模型"><a href="#向量的数据模型" class="headerlink" title="向量的数据模型"></a>向量的数据模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> hypot</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span>  <span class="comment"># 1</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Vector(%r, %r)'</span> % (self.x, self.y)  <span class="comment"># 2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> hypot(self.x, self.y)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span>  <span class="comment"># 3</span></div><div class="line">        <span class="keyword">return</span> bool(abs(self))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span>  <span class="comment"># 4</span></div><div class="line">        x = self.x + other.x</div><div class="line">        y = self.y + other.y</div><div class="line">        <span class="keyword">return</span> Vector(x, y)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, scalar)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> Vector(self.x * scalar, self.y * scalar)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    a = Vector(<span class="number">4</span>, <span class="number">9</span>)</div><div class="line">    b = Vector(<span class="number">4</span>, <span class="number">6</span>)</div><div class="line">    print(a+b)</div></pre></td></tr></table></figure><ol><li><code>__repr__</code>  vs <code>__str__</code><ul><li><code>__repr__</code>：字符串表示形式，所返回的字符串准确无歧义，打印一个对象时用特定字符串显示，如果没有实现这个方法，打印时得到的字符串可能是<code>&lt;Vector object at 0x10e100070&gt;</code></li><li><code>__str__</code>：使用<code>str()</code>函数或<code>print</code>函数时被调用，如果对象没有这个方法，解释器会用<code>__repr__</code>代替，所以优先定义<code>__repr__</code>方法</li></ul></li><li><code>%r</code> vs <code>%s</code><ul><li><code>%r</code>：使用<code>repr()</code>函数格式化对象</li><li><code>%s</code>：使用<code>str()</code>函数格式化对象</li><li><code>&quot;i love %s&quot;%&#39;you&#39; != &quot;i love %r&quot;%&#39;you&#39;</code></li></ul></li><li><code>__bool__</code>：自定义布尔值，<code>if Vector(0,0)</code> &lt;=&gt; <code>if Vector(0,0)__bool__()</code></li><li><code>__add__</code>, <code>__mul__</code>：自定义加法，自定义乘法</li></ol><h2 id="序列构成的数组"><a href="#序列构成的数组" class="headerlink" title="序列构成的数组"></a>序列构成的数组</h2><h3 id="内置序列类型概览"><a href="#内置序列类型概览" class="headerlink" title="内置序列类型概览"></a>内置序列类型概览</h3><p>序列，故名思义，有顺序的一组数据。序列无非就是：迭代、切片、排序、拼接</p><ul><li>按存放的数据类型分类<ul><li>容器序列(可存放不同类型的数据)：<code>list</code>、<code>tuple</code>、<code>collections.deque</code></li><li>扁平序列(只能存放一种类型)：<code>str</code>、<code>bytes</code>、<code>bytearray</code>、<code>memeryview</code>、<code>array.array</code></li></ul></li><li>按能否被修改来分类<ul><li>可变序列：<code>list</code>、<code>bytearray</code>、<code>array.array</code>、<code>collections.deque</code>、<code>memeryview</code></li><li>不可变序列：<code>tuple</code>、<code>str</code>、<code>bytes</code></li></ul></li></ul><h3 id="列表推导和生成器表达式"><a href="#列表推导和生成器表达式" class="headerlink" title="列表推导和生成器表达式"></a>列表推导和生成器表达式</h3><h4 id="列表解析式"><a href="#列表解析式" class="headerlink" title="列表解析式"></a>列表解析式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">symbols = <span class="string">'$¢£¥€¤'</span></div><div class="line">codes = [ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbol] <span class="comment"># 1</span></div><div class="line"></div><div class="line">symbols = <span class="string">'$¢£¥€¤'</span></div><div class="line">beyond_ascii = [ord(s) <span class="keyword">for</span> s <span class="keyword">in</span> symbols <span class="keyword">if</span> ord(s) &gt; <span class="number">127</span>]</div><div class="line">beyond_ascii = list(filter(<span class="keyword">lambda</span> c: c &gt; <span class="number">127</span>, map(ord, symbols)  <span class="comment"># 2</span></div><div class="line">                           </div><div class="line">colors = [<span class="string">'black'</span>, <span class="string">'white'</span>]</div><div class="line">sizes = [<span class="string">'S'</span>, <span class="string">'M'</span>, <span class="string">'L'</span>]</div><div class="line">tshirts = [(color, size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes] <span class="comment"># 3</span></div><div class="line">tshirts = [(color, size) <span class="keyword">for</span> size <span class="keyword">in</span> sizes <span class="keyword">for</span> color <span class="keyword">in</span> colors]</div></pre></td></tr></table></figure><ol><li>列表解析式的可读性好，太复杂时也不要滥用</li><li><code>filter</code>和<code>map</code>合起来能做的事，列表解析式也能做，而且可读性更好</li><li>列表解析式可以生成两个或两个以上的可迭代类型的笛卡尔积</li></ol><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">symbols = <span class="string">'$¢£¥€¤'</span></div><div class="line">tuple(ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols)  <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> array</div><div class="line">array.array(<span class="string">'I'</span>, (ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols))  <span class="comment"># 2 </span></div><div class="line"></div><div class="line">colors = [<span class="string">'black'</span>, <span class="string">'white'</span>]</div><div class="line">sizes = [<span class="string">'S'</span>, <span class="string">'M'</span>, <span class="string">'L'</span>]</div><div class="line"><span class="keyword">for</span> tshirt <span class="keyword">in</span> (<span class="string">'%s %s'</span>%(c, s) <span class="keyword">for</span> c <span class="keyword">in</span> colors <span class="keyword">for</span> s <span class="keyword">in</span> sizes):  <span class="comment"># 3</span></div><div class="line">    print(tshirt)</div></pre></td></tr></table></figure><ol><li>如果生成器表达式是一个函数调用过程中的唯一参数，那么不需要用括号围起来</li><li><code>array</code>的构造方法需要两个参数，括号是必须的</li><li>生成器表达式会逐个产出元素，避免额外的内存占用</li></ol><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="元组和记录"><a href="#元组和记录" class="headerlink" title="元组和记录"></a>元组和记录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">traveler_ids = [(<span class="string">'USA'</span>, <span class="string">'31195855'</span>), (<span class="string">'BRA'</span>, <span class="string">'CE342567'</span>), (<span class="string">'ESP'</span>, <span class="string">'XDA205856'</span>)]</div><div class="line"><span class="keyword">for</span> passport <span class="keyword">in</span> sorted(traveler_ids):  </div><div class="line">print(<span class="string">'%s/%s'</span> % passport)  <span class="comment"># 1</span></div><div class="line">    </div><div class="line"><span class="keyword">for</span> contry, _ <span class="keyword">in</span> traveler_id:  <span class="comment"># 2</span></div><div class="line">    print(country)</div></pre></td></tr></table></figure><ol><li><code>%</code>格式化运算符能被匹配到对应的元组元素上</li><li><code>for</code>循环可以分别提取元组的元素，也作拆包，因为第二个元素对我们没什么用，所以赋值给占位符<code>_</code></li></ol><h4 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">b, a = a, b  <span class="comment"># 1</span></div><div class="line"></div><div class="line">t = (<span class="number">20</span>, <span class="number">8</span>)  <span class="comment"># 2</span></div><div class="line">divmod(*t)</div><div class="line"></div><div class="line">a, *body, c, d = range(<span class="number">5</span>)  <span class="comment">#3</span></div></pre></td></tr></table></figure><ol><li>优雅的不用中间变量交换两个变量的值</li><li><code>*</code>运算符把一个可迭代对象拆开作为函数的参数</li><li>用<code>*</code>来处理剩下的元素</li></ol><h4 id="具名元组"><a href="#具名元组" class="headerlink" title="具名元组"></a>具名元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line">City = namedtuple(<span class="string">'City'</span>, <span class="string">'name country population coordinates'</span>)   <span class="comment"># 1</span></div><div class="line">tokyo = City(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))   <span class="comment"># 2</span></div><div class="line"></div><div class="line">City._fields   <span class="comment"># 3</span></div><div class="line">delhi_data = (<span class="string">'Delhi NCR'</span>, <span class="string">'IN'</span>, <span class="number">21.935</span>, LatLong(<span class="number">28.613889</span>, <span class="number">77.208889</span>))  </div><div class="line">delhi = City._make(delhi_data)  <span class="comment"># 4</span></div><div class="line">delhi._asdict()  <span class="comment"># 5</span></div></pre></td></tr></table></figure><ol><li>创建一个具名元组需要两个参数，一个是类名，另一个是类的各个字段的名字，后者形式可以是<code>&#39;name country population coordinates&#39;</code>或者是<code>[&#39;name&#39;, &#39;counry&#39;, &#39;population&#39;, &#39;coordinates&#39;]</code></li><li>存放在对应字段的数据要以一串参数的形式传入到构造函数中</li><li><code>_fields</code>属性是一个包含这个类所有字段名称的元组</li><li><code>City._make(delhi_data) == City(*delhi_data)</code></li><li><code>_asdict()</code>把具名元组以<code>collections.OrderedDict</code>的形式返回，把元组里的信息友好的呈现出来</li></ol><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'bicycle'</span>  <span class="comment"># 1</span></div><div class="line">s[::<span class="number">3</span>]</div><div class="line">s[::<span class="number">-1</span>]</div><div class="line">s[::<span class="number">-2</span>]</div><div class="line">s[<span class="number">2</span>::<span class="number">3</span>]</div><div class="line"></div><div class="line">l = list(range(<span class="number">10</span>))  <span class="comment"># 2</span></div><div class="line">l[<span class="number">2</span>::<span class="number">5</span>] = [<span class="number">20</span>, <span class="number">30</span>]</div><div class="line"><span class="keyword">del</span> l[<span class="number">5</span>:<span class="number">7</span>]</div><div class="line">l[<span class="number">3</span>::<span class="number">2</span>] =[<span class="number">11</span>, <span class="number">22</span>]</div><div class="line">l[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">100</span>]</div></pre></td></tr></table></figure><ol><li><code>seq[start:stop:step]</code>，<code>start</code>无值时从头开始，<code>stop</code>无值时至尾结束，<code>step</code>为负时反向取值</li><li>如果赋值对象是一个切片，那么赋值语句的右侧必须是可迭代对象，即使只有一个单独的值，也要转换为可迭代序列</li></ol><h3 id="使用-和-拼接序列"><a href="#使用-和-拼接序列" class="headerlink" title="使用+和*拼接序列"></a>使用+和*拼接序列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">l = [1, 2, 3]  # 1</div><div class="line">l * 5</div><div class="line">5 * &apos;abcd&apos;</div><div class="line"></div><div class="line">board = [[&apos;_&apos;] * 3 for i in range(3)]  # 2</div><div class="line">board[1][2] = &apos;X&apos;</div><div class="line">wrong_board = [[&apos;_&apos;] *3] * 3</div><div class="line">wrong_board[1][2] = &apos;X&apos;</div></pre></td></tr></table></figure><ol><li>Python程序员会默认序列是支持<code>+</code>和<code>*</code>操作的</li><li><code>board != wrong_board</code>，引用传递和值传递的不同，可变对象都是引用传递，原地址没变</li></ol><h3 id="序列的增量赋值"><a href="#序列的增量赋值" class="headerlink" title="序列的增量赋值"></a>序列的增量赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</div><div class="line">Traceback (most recent call last):File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>])</div></pre></td></tr></table></figure><ol><li>不要把可变对象放在元祖里</li><li>增量赋值不是一个原子操作，虽然抛出了异常，但是还是完成了操作</li><li>通过<code>dis.dis(&#39;t[2] += [50, 60]&#39;)</code>可以查看Python的字节码，帮助我们了解代码背后的运行机制</li></ol><h3 id="list-sort方法和内置函数sorted"><a href="#list-sort方法和内置函数sorted" class="headerlink" title="list.sort方法和内置函数sorted"></a>list.sort方法和内置函数sorted</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fruits = [<span class="string">'grape'</span>, <span class="string">'raspberry'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>]</div><div class="line">sorted(fruits)</div><div class="line">sorted(fruits, key=len, reverse=<span class="keyword">True</span>)  <span class="comment"># 1</span></div><div class="line">fruits.sort()  <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li>新建一个按长度降序排序的结果</li><li>对原列表就地排序，返回值为<code>None</code>会被控制台忽略</li></ol><h3 id="用bisect来管理已排序的序列"><a href="#用bisect来管理已排序的序列" class="headerlink" title="用bisect来管理已排序的序列"></a>用bisect来管理已排序的序列</h3><h4 id="用bisect来搜索"><a href="#用bisect来搜索" class="headerlink" title="用bisect来搜索"></a>用bisect来搜索</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> bisect</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">HAYSTACK = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">30</span>]</div><div class="line">NEEDLES = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>]</div><div class="line"></div><div class="line">ROW_FMT = <span class="string">'&#123;0:2d&#125; @ &#123;1:2d&#125;    &#123;2&#125;&#123;0:&lt;2d&#125;'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(bisect_fn)</span>:</span></div><div class="line">    <span class="keyword">for</span> needle <span class="keyword">in</span> reversed(NEEDLES):</div><div class="line">        position = bisect_fn(HAYSTACK, needle)  <span class="comment"># &lt;1&gt;</span></div><div class="line">        <span class="comment"># print (position)</span></div><div class="line">        offset = position * <span class="string">'  |'</span>  <span class="comment"># &lt;2&gt;</span></div><div class="line">        print(ROW_FMT.format(needle, position, offset))  <span class="comment"># &lt;3&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="keyword">if</span> sys.argv[<span class="number">-1</span>] == <span class="string">'left'</span>:    <span class="comment"># &lt;4&gt;</span></div><div class="line">        bisect_fn = bisect.bisect_left</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        bisect_fn = bisect.bisect</div><div class="line"></div><div class="line">    print(<span class="string">'DEMO:'</span>, bisect_fn.__name__)  <span class="comment"># &lt;5&gt;</span></div><div class="line">    print(<span class="string">'haystack -&gt;'</span>, <span class="string">' '</span>.join(<span class="string">'%2d'</span> % n <span class="keyword">for</span> n <span class="keyword">in</span> HAYSTACK))</div><div class="line">    demo(bisect_fn)</div></pre></td></tr></table></figure><h4 id="用bisect-insort插入新元素"><a href="#用bisect-insort插入新元素" class="headerlink" title="用bisect.insort插入新元素"></a>用bisect.insort插入新元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> bisect</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">SIZE = <span class="number">7</span></div><div class="line"></div><div class="line">random.seed(<span class="number">1729</span>)</div><div class="line"></div><div class="line">my_list = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(SIZE):</div><div class="line">    new_item = random.randrange(SIZE*<span class="number">2</span>)</div><div class="line">    bisect.insort(my_list, new_item)</div><div class="line">    print(<span class="string">'%2d -&gt;'</span> % new_item, my_list)</div></pre></td></tr></table></figure><h3 id="当列表不是首选时"><a href="#当列表不是首选时" class="headerlink" title="当列表不是首选时"></a>当列表不是首选时</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</div><div class="line">floats = array(<span class="string">'d'</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))  <span class="comment"># 1</span></div><div class="line"></div><div class="line">fp = open(<span class="string">'floats.bin'</span>, <span class="string">'wb'</span>)</div><div class="line">floats.tofile(fp)  <span class="comment"># 2</span></div><div class="line">fp.close()</div><div class="line">fp = open(<span class="string">'floats.bin'</span>, <span class="string">'rb'</span>)</div><div class="line">floats.fromfile(fp, <span class="number">10</span>**<span class="number">7</span>)  <span class="comment"># 3</span></div><div class="line">fp.close()</div></pre></td></tr></table></figure><ol><li>利用一个可迭代对象建立一个双精度浮点数组，类型码是<code>d</code>，如果我们只需要一个包含数字的列表，那么<code>array.array</code>比<code>list</code>更高效</li><li><code>array.tofile</code>把数组存入文件，比写入文本文件快7倍</li><li><code>array.fromfile</code>把数组从文件读取出来，比从文本文件读取出来快60倍</li></ol><h4 id="内存视图"><a href="#内存视图" class="headerlink" title="内存视图"></a>内存视图</h4><h4 id="NumPy和SciPy"><a href="#NumPy和SciPy" class="headerlink" title="NumPy和SciPy"></a>NumPy和SciPy</h4><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><h2 id="字典和集合"><a href="#字典和集合" class="headerlink" title="字典和集合"></a>字典和集合</h2><h3 id="泛映射类型"><a href="#泛映射类型" class="headerlink" title="泛映射类型"></a>泛映射类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">my_dict = &#123;&#125;</div><div class="line">isinstance(my_dict, abc.Mapping)  <span class="comment"># 1</span></div><div class="line"></div><div class="line">tl = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</div><div class="line">hash(tl)  <span class="comment"># 2</span></div><div class="line"></div><div class="line">a = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>)  <span class="comment"># 3</span></div><div class="line">b = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</div><div class="line">c = dict(zip([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</div><div class="line">d = dict([(<span class="string">'two'</span>, <span class="number">2</span>), (<span class="string">'one'</span>, <span class="number">1</span>), (<span class="string">'three'</span>, <span class="number">3</span>)])</div><div class="line">e = dict(&#123;<span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>&#125;)</div></pre></td></tr></table></figure><ol><li><code>collections.adc</code>模块中有<code>Mapping</code>和<code>MutableMapping</code>这两个抽象基类，为<code>dict</code>和其他类似的类型定义形式接口</li><li>不可变对象都是可散列对象，就是说可变对象不能作为字典的键，如果元组中有可变对象就例外</li><li><code>a == b == c == d == e</code></li></ol><h3 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">DIAL_CODES = [</div><div class="line">        (<span class="number">86</span>, <span class="string">'China'</span>),</div><div class="line">        (<span class="number">91</span>, <span class="string">'India'</span>),</div><div class="line">        (<span class="number">1</span>, <span class="string">'United States'</span>),</div><div class="line">        (<span class="number">62</span>, <span class="string">'Indonesia'</span>),</div><div class="line">        (<span class="number">55</span>, <span class="string">'Brazil'</span>),</div><div class="line">        (<span class="number">92</span>, <span class="string">'Pakistan'</span>),</div><div class="line">        (<span class="number">880</span>, <span class="string">'Bangladesh'</span>),</div><div class="line">        (<span class="number">234</span>, <span class="string">'Nigeria'</span>),</div><div class="line">        (<span class="number">7</span>, <span class="string">'Russia'</span>),</div><div class="line">        (<span class="number">81</span>, <span class="string">'Japan'</span>),</div><div class="line">    ]</div><div class="line"></div><div class="line">country_code = &#123;country: code <span class="keyword">for</span> code, country <span class="keyword">in</span> DIAL_CODES&#125;</div><div class="line">&#123;code: country.upper() <span class="keyword">for</span> country, code <span class="keyword">in</span> country_code.items() <span class="keyword">if</span> code &lt; <span class="number">66</span>&#125;</div></pre></td></tr></table></figure><h3 id="常见映射方法"><a href="#常见映射方法" class="headerlink" title="常见映射方法"></a>常见映射方法</h3><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = &#123;&#125;</div><div class="line">m = &#123;<span class="string">'b'</span>: <span class="number">1</span>&#125;  </div><div class="line">a.update(m)  <span class="comment"># 1</span></div><div class="line">m = &#123;<span class="string">'b'</span>: <span class="number">3</span>&#125;</div><div class="line">a.update(**m)  <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li>没则插入</li><li>有则更新</li></ol><h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">WORD_RE = re.compile(<span class="string">'\w+'</span>)</div><div class="line"></div><div class="line">index = &#123;&#125;</div><div class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</div><div class="line">    <span class="keyword">for</span> line_no, line <span class="keyword">in</span> enumerate(fp, <span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</div><div class="line">            word = match.group()</div><div class="line">            column_no = match.start()+<span class="number">1</span></div><div class="line">            location = (line_no, column_no)</div><div class="line">            index.setdefault(word, []).append(location)  <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="comment"># print in alphabetical order</span></div><div class="line"><span class="keyword">for</span> word <span class="keyword">in</span> sorted(index, key=str.upper):</div><div class="line">    print(word, index[word])</div></pre></td></tr></table></figure><ol><li>获取单词出现情况的列表。如果单词不存在，单词做键，空列表做值放进字典；如果单词存在，把值添加到单词对用的列表</li></ol><h3 id="映射的弹性键查询"><a href="#映射的弹性键查询" class="headerlink" title="映射的弹性键查询"></a>映射的弹性键查询</h3><h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> collections</div><div class="line"></div><div class="line">WORD_RE = re.compile(<span class="string">'\w+'</span>)</div><div class="line"></div><div class="line">index = collections.defaultdict(list)     <span class="comment"># 1</span></div><div class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</div><div class="line">    <span class="keyword">for</span> line_no, line <span class="keyword">in</span> enumerate(fp, <span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</div><div class="line">            word = match.group()</div><div class="line">            column_no = match.start()+<span class="number">1</span></div><div class="line">            location = (line_no, column_no)</div><div class="line">            index[word].append(location)  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="comment"># print in alphabetical order</span></div><div class="line"><span class="keyword">for</span> word <span class="keyword">in</span> sorted(index, key=str.upper):</div><div class="line">    print(word, index[word])</div></pre></td></tr></table></figure><ol><li>把<code>list</code>构造方法作为<code>default_factory</code>来构建一个<code>defaultdict</code></li><li>如果index并没有word的记录，那么<code>default_factory</code>会被调用，为查询不到的键创造一个值，这个值在这里是空列表</li></ol><h4 id="missing"><a href="#missing" class="headerlink" title="__missing__"></a><code>__missing__</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict0</span><span class="params">(dict)</span>:</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span>  <span class="comment"># 1</span></div><div class="line">        <span class="keyword">if</span> isinstance(key, str):  </div><div class="line">            <span class="keyword">raise</span> KeyError(key)</div><div class="line">        <span class="keyword">return</span> self[str(key)]  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[key]  </div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">return</span> default  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span>  <span class="comment"># 2</span></div><div class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> str(key) <span class="keyword">in</span> self.keys()</div></pre></td></tr></table></figure><ol><li><code>__missing__</code>在映射类型找不到键时调用，通过<code>isinstance(key, str)</code>测试，避免代码陷入无限递归</li><li><code>dict.__contains__(key) == key in dict</code>，直接在<code>self.keys()</code>里查询，避免递归调用</li></ol><h3 id="字典的变种"><a href="#字典的变种" class="headerlink" title="字典的变种"></a>字典的变种</h3><h4 id="collections-OrderedDict"><a href="#collections-OrderedDict" class="headerlink" title="collections.OrderedDict"></a>collections.OrderedDict</h4><h4 id="collections-ChainMap"><a href="#collections-ChainMap" class="headerlink" title="collections.ChainMap"></a>collections.ChainMap</h4><h4 id="collections-Counter"><a href="#collections-Counter" class="headerlink" title="collections.Counter"></a>collections.Counter</h4><h4 id="collections-UserDict"><a href="#collections-UserDict" class="headerlink" title="collections.UserDict"></a>collections.UserDict</h4><h3 id="子类化UserDict"><a href="#子类化UserDict" class="headerlink" title="子类化UserDict"></a>子类化UserDict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> collections</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict</span><span class="params">(collections.UserDict)</span>:</span>  <span class="comment"># 1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span> </div><div class="line">        <span class="keyword">if</span> isinstance(key, str):</div><div class="line">            <span class="keyword">raise</span> KeyError(key)</div><div class="line">        <span class="keyword">return</span> self[str(key)]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(key) <span class="keyword">in</span> self.data  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, item)</span>:</span></div><div class="line">        self.data[str(key)] = item   <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li>更倾向于从<code>UserDict</code>而不是<code>dict</code>的子类继承的主要原因是，后者会在某些方法的实现上走一些捷径，导致在子类中不得不重写这些方法</li><li><code>__setitem__</code>会把所有的键都转换成字符串</li></ol><h3 id="不可变映射类型"><a href="#不可变映射类型" class="headerlink" title="不可变映射类型"></a>不可变映射类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="number">1</span>:<span class="string">'A'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy = MappingProxyType(d)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxymappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">1</span>] </div><div class="line"><span class="string">'A'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>] = <span class="string">'x'</span></div><div class="line">Traceback (most recent call last):File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;TypeError: <span class="string">'mappingproxy'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>] = <span class="string">'B'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy </div><div class="line">mappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>]</div><div class="line"><span class="string">'B'</span></div></pre></td></tr></table></figure><h3 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">l = [<span class="string">'spam'</span>, <span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'spam'</span>]</div><div class="line">set(l)  <span class="comment"># 1</span></div><div class="line"></div><div class="line">found = len(needles &amp; haystack)  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> unicodedata <span class="keyword">import</span> name</div><div class="line">&#123;chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">256</span>) <span class="keyword">if</span> <span class="string">'SIGN'</span> <span class="keyword">in</span> name(chr(i), <span class="string">''</span>)&#125;  <span class="comment"># 3</span></div></pre></td></tr></table></figure><ol><li>集合去重</li><li>集合运算</li><li>集合解析式</li></ol><h3 id="dict和set的背后"><a href="#dict和set的背后" class="headerlink" title="dict和set的背后"></a>dict和set的背后</h3><h4 id="dict和set的效率"><a href="#dict和set的效率" class="headerlink" title="dict和set的效率"></a>dict和set的效率</h4><p>不管查询有多少个元素的字典和集合，所耗费的时间都能忽略不计。而列表随元素的增多，查询时间越长。</p><h4 id="字典中的散列表"><a href="#字典中的散列表" class="headerlink" title="字典中的散列表"></a>字典中的散列表</h4><ol><li><p>散列表</p><p>Python用散列表来实现dict类型，散列表其实是一个稀疏数组，总有空白元素的数组成为稀疏数组。散列表的结构单元被称为<strong>表元</strong>，在dict的散列表中，每个键值对都占用一个表元，每个表元都有两个部分，一个是对键的引用，一个是对值的应用，因为所有表元的大小一致，所以可以通过偏移量来读取某个表元。因为Python会设法保证大概有三分之一的表元是空的，所以在快要达到这个阈值时，原有散列表会被复制到一个更大的空间。</p></li><li><p>散列值和相等性</p><p>如果两个对象在比较的时候相等，那么它们的散列值必须相等，否则散列表就不能正常运行了。为了让散列值能够胜任散列表索引的角色，它们必须在索引空间中尽量分散开来。这意味着在最理想的状况下，越是相似但不想等的对象，它们散列值的差别应该越大。</p></li><li><p>散列表算法</p></li></ol><p><img src="http://oj8vattcf.bkt.clouddn.com/%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95.png" alt="散列表算法"></p><h4 id="dict的实现及其导致的结果"><a href="#dict的实现及其导致的结果" class="headerlink" title="dict的实现及其导致的结果"></a>dict的实现及其导致的结果</h4><ol><li><p>键必须是可散列的</p><ul><li>支持<code>hash()</code>函数，并且通过<code>__hash()__</code>方法所得到的散列值是不变的</li><li>支持通过<code>__eq__()</code>方法来检测相等性</li><li>若<code>a == b</code>为真，则<code>hash(a) == hash(b)</code>也为真</li></ul></li><li><p>字典在内存上开销巨大</p><p>由于字典使用了散列表，而散列表又必须是稀疏的，这导致它在空间上的效率低下。</p></li><li><p>键查询很快</p><p>dict的实现是典型的空间换时间：字典类型有着巨大的内存开销，但它们提供了无视数据量大小的快速访问——只要字典能被装在内存里。</p></li><li><p>键的次序取决于添加顺序</p></li><li><p>往字典里添加新键可能会改变已有键的顺序</p><p>无论何时往字典里添加新的键，Python解释器都可能做出为字典扩容的决定。扩容导致的结果就是要新建一个更大的散列表，并把字典里已有的元素添加到新表里。这个过程中可能会发生新的散列冲突，导致新散列表中键的次序变化。</p></li></ol><h4 id="set的实现以及导致的结果"><a href="#set的实现以及导致的结果" class="headerlink" title="set的实现以及导致的结果"></a>set的实现以及导致的结果</h4><ol><li>集合里的元素必须是可散列的</li><li>集合很消耗内存</li><li>可以很高效地判断元素是否存在于某个集合</li><li>元素的次序取决于被添加到集合里的次序</li><li>往集合里添加元素，可能会改变集合里已有元素的次序</li></ol><h2 id="文本和字节序列"><a href="#文本和字节序列" class="headerlink" title="文本和字节序列"></a>文本和字节序列</h2><h3 id="字符问题"><a href="#字符问题" class="headerlink" title="字符问题"></a>字符问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'xiehailian'</span></div><div class="line"></div><div class="line">b = s.encode(<span class="string">'utf8'</span>)  <span class="comment"># 1</span></div><div class="line">b.decode(<span class="string">'utf8'</span>)  <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li>使用<code>UTF-8</code>把<code>str</code>对象编码成<code>bytes</code>对象</li><li>使用<code>UTF-8</code>把<code>bytes</code>对象解码成<code>str</code>对象</li></ol><h3 id="字节概要"><a href="#字节概要" class="headerlink" title="字节概要"></a>字节概要</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cafe = bytes(<span class="string">'cafe'</span>, encoding=<span class="string">'utf_8'</span>)  <span class="comment"># 1</span></div><div class="line">cafe[<span class="number">0</span>]  <span class="comment"># 2</span></div><div class="line">cafe[:<span class="number">1</span>]  <span class="comment"># 3</span></div><div class="line"></div><div class="line">cafe_arr = bytearray(cafe)  </div><div class="line">cafe_arr  <span class="comment"># 4</span></div><div class="line">cafe_arr[<span class="number">-1</span>:]  <span class="comment"># 5</span></div></pre></td></tr></table></figure><ol><li><code>bytes</code>对象可以从<code>str</code>对象使用给定的编码构建</li><li><code>bytes</code>的各个元素<code>range(256)</code>内的整数</li><li><code>bytes</code>对象的切片还是<code>bytes</code>对象，即使是只有一个字节的切片</li><li><code>bytearray</code>对象没有字面量句法，而是以<code>bytearray()</code>和字节序列字面量参数的形式显示</li><li><code>bytearray</code>对象的切片还是<code>bytearray</code>对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> array</div><div class="line">numbers = array.array(<span class="string">'h'</span>, [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</div><div class="line">octets = bytes(numbers)  <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> struct</div><div class="line">fmt = <span class="string">'&lt;3s3sHH'</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'filter.gif'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</div><div class="line">    img = memoryview(fp.read())  <span class="comment"># 2</span></div><div class="line">header = img[:<span class="number">10</span>]  </div><div class="line">bytes(header)  </div><div class="line">struct.unpack(fmt, header)  <span class="comment"># 3</span></div><div class="line"><span class="keyword">del</span> header</div></pre></td></tr></table></figure><ol><li>将数组保存为字节序列的副本</li><li>使用内存中的文件内容创建一个<code>memoryview</code>对象，<code>memoryview</code>类不用于创建或存储字节序列，而是共享内存无需复制字节序列</li><li>拆包<code>memoryview</code>对象，得到一个元祖</li></ol><h3 id="基本的编解码器"><a href="#基本的编解码器" class="headerlink" title="基本的编解码器"></a>基本的编解码器</h3><ul><li>GBK</li><li>UTF-8</li></ul><h3 id="了解编解码问题"><a href="#了解编解码问题" class="headerlink" title="了解编解码问题"></a>了解编解码问题</h3><h4 id="处理UnicodeEncodeError"><a href="#处理UnicodeEncodeError" class="headerlink" title="处理UnicodeEncodeError"></a>处理UnicodeEncodeError</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;city = <span class="string">'São Paulo'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'utf_8'</span>)  <span class="comment"># 1</span></div><div class="line"><span class="string">b'S\xc3\xa3o Paulo'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'utf_16'</span>)</div><div class="line"><span class="string">b'\xff\xfeS\x00\xe3\x00o\x00 \x00P\x00a\x00u\x00l\x00o\x00'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'iso8859_1'</span>) </div><div class="line"><span class="string">b'S\xe3o Paulo'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'cp437'</span>) </div><div class="line">Traceback (most recent call last):</div><div class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    File <span class="string">"/.../lib/python3.4/encodings/cp437.py"</span>, line <span class="number">12</span>, <span class="keyword">in</span> encode</div><div class="line">      <span class="keyword">return</span> codecs.charmap_encode(input,errors,encoding_map)</div><div class="line">UnicodeEncodeError: <span class="string">'charmap'</span> codec can<span class="string">'t encode character '</span>\xe3<span class="string">' in position 1: character maps to &lt;undefined&gt;</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">&gt;&gt;&gt; city.encode('</span>cp437<span class="string">', errors='</span>ignore<span class="string">') </span></div><div class="line"><span class="string">b'</span>So Paulo<span class="string">'</span></div><div class="line"><span class="string">&gt;&gt;&gt; city.encode('</span>cp437<span class="string">', errors='</span>replace<span class="string">') </span></div><div class="line">b'S?o Paulo'</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'cp437'</span>, errors=<span class="string">'xmlcharrefreplace'</span>) </div><div class="line"><span class="string">b'São Paul</span></div></pre></td></tr></table></figure><ol><li><code>utf_?</code>，<code>iso8859_1</code>能处理这个字符串，而<code>cp437</code>不能处理这个字符串</li><li><code>error=&#39;ignore&#39;</code>将悄无声息地跳过无法编码的字符：这样做不太好</li><li>编码时指定<code>error=&#39;replace&#39;</code>，把无法编码的字符替换成<code>?</code>：数据损坏了，但是用户知道除了问题</li><li><code>xmlcharrefreplace</code>把无法编码的字符替换成XML实体</li></ol><h4 id="处理UnicodeDecodeError"><a href="#处理UnicodeDecodeError" class="headerlink" title="处理UnicodeDecodeError"></a>处理UnicodeDecodeError</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>octets = <span class="string">b'Montr\xe9al'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>octets.decode(<span class="string">'cp1252'</span>) </div><div class="line"><span class="string">'Montréa</span></div><div class="line"><span class="string">&gt;&gt;&gt; octets.decode('</span>utf_8<span class="string">')  # 1</span></div><div class="line"><span class="string">Traceback (most recent call last):</span></div><div class="line"><span class="string">    File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></div><div class="line"><span class="string">UnicodeDecodeError: '</span>utf<span class="number">-8</span><span class="string">' codec can'</span>t decode byte <span class="number">0xe9</span> <span class="keyword">in</span> position <span class="number">5</span>:invalid continuation byte</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>octets.decode(<span class="string">'utf_8'</span>, errors=<span class="string">'replace'</span>)  <span class="comment"># 2</span></div><div class="line"><span class="string">'Montra</span></div></pre></td></tr></table></figure><ol><li><code>utf_8</code>编解码器检测到不是有效的<code>UTF-8</code>字符串，抛出<code>UnicodeDecodeError</code></li><li>使用<code>replace</code>错误处理方式，使用官方指定的替换字符，表示未知字符</li></ol><h4 id="使用预期之外的编码加载模块时抛出的SyntaxError"><a href="#使用预期之外的编码加载模块时抛出的SyntaxError" class="headerlink" title="使用预期之外的编码加载模块时抛出的SyntaxError"></a>使用预期之外的编码加载模块时抛出的SyntaxError</h4><p><code>Python 3</code>默认使用<code>UTF-8</code>编码源码，<code>Python 2</code>则默认使用<code>ASCII</code>。如果加载的<code>.py</code>模块包换<code>UTF-8</code>之外的数据，而没有声明编码，会抛出<code>SyntaxError</code></p><h4 id="如何找出字节序列的编码"><a href="#如何找出字节序列的编码" class="headerlink" title="如何找出字节序列的编码"></a>如何找出字节序列的编码</h4><p>如何找出字节序列的编码？简单来说，不能。必须有人告诉你。</p><p>可以通过试探和分析找出编码，使用编码侦测包<code>Chardet</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chardetect 04-text-byte.asciidoc</div><div class="line">04-text-byte.asciidoc: utf-8 with confidence 0.99</div></pre></td></tr></table></figure><h4 id="BOM-有用的鬼符"><a href="#BOM-有用的鬼符" class="headerlink" title="BOM: 有用的鬼符"></a>BOM: 有用的鬼符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>u16 = <span class="string">'El Niño'</span>.encode(<span class="string">'utf_16'</span>)  <span class="comment"># 1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u16</div><div class="line"><span class="string">b'\xff\xfeE\x00l\x00 \x00N\x00i\x00\xf1\x00o\x0'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u16le = <span class="string">'El Niño'</span>.encode(<span class="string">'utf_16le'</span>)  <span class="comment"># 2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(u16le)</div><div class="line">[<span class="number">69</span>, <span class="number">0</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">0</span>, <span class="number">105</span>, <span class="number">0</span>, <span class="number">241</span>, <span class="number">0</span>, <span class="number">111</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u16be = <span class="string">'El Niño'</span>.encode(<span class="string">'utf_16be'</span>)  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(u16be)</div><div class="line">[<span class="number">0</span>, <span class="number">69</span>, <span class="number">0</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">0</span>, <span class="number">105</span>, <span class="number">0</span>, <span class="number">241</span>, <span class="number">0</span>, <span class="number">11</span></div></pre></td></tr></table></figure><ol><li><code>b&#39;\xff\xfe&#39;</code>，就是BOM，即小字节序标记，指明编码时使用<code>Intel CPU</code>的小字节序。在小字节序设备中，各个码位的最低有效字节在前面，而大字节序设备中则相反。为了避免混肴，<code>UTF-16</code>编码在要编码的文本前面加上特殊的不可见字符<code>ZERO WIDTH NO-BREAK SPACE</code>，表明是小字节序编码。</li><li><code>UTF-16</code>有两种变种：<code>UTF-16LE</code>，显式指明使用小字节序；<code>UTF-16BE</code>，显式指明使用大字节序。如果使用这两个变种，不会生产BOM。</li></ol><h3 id="处理文本文件"><a href="#处理文本文件" class="headerlink" title="处理文本文件"></a>处理文本文件</h3><p>处理文本的最佳实践是，<strong><code>Unicode</code>三明治</strong> 。意思是，对于输入来说，要尽早把输入的字节序列解码成字符串；对于输出来说，则要尽量晚地把字符串编码成字节序列。</p><h4 id="编码默认值：一团糟"><a href="#编码默认值：一团糟" class="headerlink" title="编码默认值：一团糟"></a>编码默认值：一团糟</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys, locale</div><div class="line"></div><div class="line">expressions = <span class="string">"""</span></div><div class="line"><span class="string">        locale.getpreferredencoding()</span></div><div class="line"><span class="string">        type(my_file)</span></div><div class="line"><span class="string">        my_file.encoding</span></div><div class="line"><span class="string">        sys.stdout.isatty()</span></div><div class="line"><span class="string">        sys.stdout.encoding</span></div><div class="line"><span class="string">        sys.stdin.isatty()</span></div><div class="line"><span class="string">        sys.stdin.encoding</span></div><div class="line"><span class="string">        sys.stderr.isatty()</span></div><div class="line"><span class="string">        sys.stderr.encoding</span></div><div class="line"><span class="string">        sys.getdefaultencoding()</span></div><div class="line"><span class="string">        sys.getfilesystemencoding()</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">my_file = open(<span class="string">'dummy'</span>, <span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> expression <span class="keyword">in</span> expressions.split():</div><div class="line">    value = eval(expression)</div><div class="line">    print(expression.rjust(<span class="number">30</span>), <span class="string">'-&gt;'</span>, repr(value))</div></pre></td></tr></table></figure><p>对于不同操作系统，编码默认值可能是不一样的。</p><p>关于编码默认值的最佳建议是：别依赖默认值。如果遵从<strong><code>Unicode</code>三明治</strong>的建议，而且在程序中显式指定编码，那将避免很多问题。</p><h3 id="为了正确比较而规范化Unicode字符串"><a href="#为了正确比较而规范化Unicode字符串" class="headerlink" title="为了正确比较而规范化Unicode字符串"></a>为了正确比较而规范化Unicode字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">'café'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="string">'cafe\u0301'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1, s2</div><div class="line">(<span class="string">'café'</span>, <span class="string">'café'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(s1), len(s2)</div><div class="line">(<span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 == s2</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure><p>存在这样的问题，两个字符串本质上是一样的，但python看到的是不同的码位序列，因此判定二者不相等。这就可能导致，但用户输入字符串搜索文本时，而找不到相应的文本。这个问题的解决方案是使用<code>unicodedata.normalize</code>函数提供的Unicode规范化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> unicodedata <span class="keyword">import</span> normalize</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">'café'</span>  <span class="comment"># 把"e"和重音符组合在一起</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="string">'cafe\u0301'</span>  <span class="comment"># 分解成"e"和重音符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(s1), len(s2)</div><div class="line">(<span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(normalize(<span class="string">'NFC'</span>, s1)), len(normalize(<span class="string">'NFC'</span>, s2))  <span class="comment"># 1</span></div><div class="line">(<span class="number">4</span>, <span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(normalize(<span class="string">'NFD'</span>, s1)), len(normalize(<span class="string">'NFD'</span>, s2))  <span class="comment"># 2</span></div><div class="line">(<span class="number">5</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>normalize(<span class="string">'NFC'</span>, s1) == normalize(<span class="string">'NFC'</span>, s2)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>normalize(<span class="string">'NFD'</span>, s1) == normalize(<span class="string">'NFD'</span>, s2)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> unicodedata <span class="keyword">import</span> normalize, name</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>half = <span class="string">'½'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>normalize(<span class="string">'NFKC'</span>, half)  <span class="comment"># 3</span></div><div class="line"><span class="string">'1⁄2'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>four_squared = <span class="string">'4²'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>normalize(<span class="string">'NFKC'</span>, four_squared)</div><div class="line"><span class="string">'42'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>micro = <span class="string">'μ'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>micro_kc = normalize(<span class="string">'NFKC'</span>, micro)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>micro, micro_kc</div><div class="line">(<span class="string">'μ'</span>, <span class="string">'μ'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(micro), ord(micro_kc)</div><div class="line">(<span class="number">181</span>, <span class="number">956</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name(micro), name(micro_kc)</div><div class="line">(<span class="string">'MICRO SIGN'</span>, <span class="string">'GREEK SMALL LETTER MU'</span>)</div></pre></td></tr></table></figure><ol><li><code>NFC</code>是使用最少的码位构成等价的字符串，用户输入的文本默认是用<code>NFC</code>形式。不过，安全起见，保存文本之前，最好使用<code>normalize(&#39;NFC&#39;, user_text)</code>清洗字符串</li><li><code>NFD</code>是把组合字符分解成基字符和单独的组合字符</li><li><code>NFKC</code>和<code>NFKD</code>可以把兼容字符替换成一个或多兼容分解字符，使字符更可读。使用时要小心，而且只能在特殊情况中使用，例如搜索和索引，而不能用于持久存储，因为这两种转换会导致数据损失。</li></ol><h4 id="大小写折叠"><a href="#大小写折叠" class="headerlink" title="大小写折叠"></a>大小写折叠</h4><p>大小写折叠就是把所有文本变成小写，再做写其他转换。这个功能由<code>str.casefold()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>micro = <span class="string">'μ'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name(micro)</div><div class="line"><span class="string">'MICRO SIGN'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>micro_cf = micro.casefold()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name(micro_cf)</div><div class="line"><span class="string">'GREEK SMALL LETTER MU'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>micro, micro_cf(<span class="string">'μ'</span>, <span class="string">'μ'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eszett = <span class="string">'ß'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name(eszett)</div><div class="line"><span class="string">'LATIN SMALL LETTER SHARP S'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eszett_cf = eszett.casefold()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eszett, eszett_cf</div><div class="line">(<span class="string">'ß'</span>, <span class="string">'ss'</span>)</div></pre></td></tr></table></figure><h4 id="规范化文本匹配实用函数"><a href="#规范化文本匹配实用函数" class="headerlink" title="规范化文本匹配实用函数"></a>规范化文本匹配实用函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> unicodedata <span class="keyword">import</span> normalize</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nfc_equal</span><span class="params">(str1, str2)</span>:</span>  <span class="comment"># 1</span></div><div class="line">    <span class="keyword">return</span> normalize(<span class="string">'NFC'</span>, str1) == normalize(<span class="string">'NFC'</span>, str2)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fold_equal</span><span class="params">(str1, str2)</span>:</span>  <span class="comment"># 2</span></div><div class="line">    <span class="keyword">return</span> (normalize(<span class="string">'NFC'</span>,str1).casefold()==normalize(<span class="string">'NFC'</span>,str2).casefold())</div></pre></td></tr></table></figure><ol><li><code>NFC</code>和<code>NFD</code>可以放心使用，而且能合理比较Unicode字符串。对于大多数应用来说，<code>NFC</code>是最好的规范化形式。</li><li>不区分大小写的比较应该<code>str.casefold()</code></li></ol><h4 id="极端规范化：去掉变音符号"><a href="#极端规范化：去掉变音符号" class="headerlink" title="极端规范化：去掉变音符号"></a>极端规范化：去掉变音符号</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unicodedata</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shave_marks</span><span class="params">(txt)</span>:</span></div><div class="line">    <span class="string">"""去掉全部变音符号"""</span></div><div class="line">    norm_txt = unicodedata.normalize(<span class="string">'NFD'</span>, txt)  <span class="comment"># 1</span></div><div class="line">    shaved = <span class="string">''</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> norm_txt <span class="keyword">if</span> <span class="keyword">not</span> unicodedata.combining(c))  <span class="comment"># 2</span></div><div class="line">    <span class="keyword">return</span> unicodedata.normalize(<span class="string">'NFC'</span>, shaved)  <span class="comment"># 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shave_marks_latin</span><span class="params">(txt)</span>:</span></div><div class="line">    <span class="string">"""把拉丁基字符中所有的变音符号删除"""</span></div><div class="line">    norm_txt = unicodedata.normalize(<span class="string">'NFD'</span>, txt) </div><div class="line">    latin_base = <span class="keyword">False</span></div><div class="line">    keepers = []</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> norm_txt:</div><div class="line">        <span class="keyword">if</span> unicodedata.combining(c) <span class="keyword">and</span> latin_base:  </div><div class="line">            <span class="keyword">continue</span>   <span class="comment"># 忽略拉丁基字符上的变音符号</span></div><div class="line">        keepers.append(c) </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> unicodedata.combining(c):  <span class="comment"># 如果不是组合字符，那就是新的基字符</span></div><div class="line">            latin_base = c <span class="keyword">in</span> string.ascii_letters</div><div class="line">    shaved = <span class="string">''</span>.join(keepers)</div><div class="line">    <span class="keyword">return</span> unicodedata.normalize(<span class="string">'NFC'</span>, shaved）</div><div class="line">                                 </div><div class="line">single_map = str.maketrans(<span class="string">"""‚ƒ„†ˆ‹‘’“”•–—˜›"""</span>,  <span class="comment">#  4</span></div><div class="line">                           <span class="string">"""'f"*^&lt;''""---~&gt;"""</span>)</div><div class="line"></div><div class="line">multi_map = str.maketrans(&#123;  </div><div class="line">    <span class="string">'€'</span>: <span class="string">'&lt;euro&gt;'</span>,</div><div class="line">    <span class="string">'…'</span>: <span class="string">'...'</span>,</div><div class="line">    <span class="string">'Œ'</span>: <span class="string">'OE'</span>,</div><div class="line">    <span class="string">'™'</span>: <span class="string">'(TM)'</span>,</div><div class="line">    <span class="string">'œ'</span>: <span class="string">'oe'</span>,</div><div class="line">    <span class="string">'‰'</span>: <span class="string">'&lt;per mille&gt;'</span>,</div><div class="line">    <span class="string">'‡'</span>: <span class="string">'**'</span>,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">multi_map.update(single_map)  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dewinize</span><span class="params">(txt)</span>:</span></div><div class="line">    <span class="string">"""Replace Win1252 symbols with ASCII chars or sequences"""</span></div><div class="line">    <span class="keyword">return</span> txt.translate(multi_map)  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">asciize</span><span class="params">(txt)</span>:</span></div><div class="line">    no_marks = shave_marks_latin(dewinize(txt))     </div><div class="line">    no_marks = no_marks.replace(<span class="string">'ß'</span>, <span class="string">'ss'</span>)          </div><div class="line">    <span class="keyword">return</span> unicodedata.normalize(<span class="string">'NFKC'</span>, no_marks)</div></pre></td></tr></table></figure><ol><li>把所有字符分解成基字符和组合记号</li><li>过滤掉所有组合记号</li><li>重组</li><li>更彻底的规范化步骤是把西文文本中常见符号替换成<code>ASCII</code>的对等字符，构建字符替换映射表</li></ol><h3 id="Unicode文本排序"><a href="#Unicode文本排序" class="headerlink" title="Unicode文本排序"></a>Unicode文本排序</h3><p>不同的区域采用的排序规则有所不同，葡萄牙语等很多语言按照拉丁字母表排序，英语汉语则按照英文字母表排序。在Python中，非ASCII文本的标准排序方式是使用<code>locale.strxfrm</code>，前提是操作支持区域设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyuca</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>coll = pyuca.Collator()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fruits = [<span class="string">'caju'</span>, <span class="string">'atemoia'</span>, <span class="string">'cajá'</span>, <span class="string">'açaí'</span>, <span class="string">'acerola'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_fruits = sorted(fruits, key=coll.sort_key)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_fruits</div><div class="line">[<span class="string">'açaí'</span>, <span class="string">'acerola'</span>, <span class="string">'atemoia'</span>, <span class="string">'cajá'</span>, <span class="string">'caju'</span>]</div></pre></td></tr></table></figure><p><code>PyUCA</code>没有考虑区域设置。如果想定制排序方式，可以把自定义的排序表路径传给<code>Collator()</code>构造方法。<code>PyUCA</code>默认使用项目自带的<code>allkeys.txt</code></p><h3 id="Unicode数据库"><a href="#Unicode数据库" class="headerlink" title="Unicode数据库"></a>Unicode数据库</h3><p>Unicode数据库记录了字符是否可以打印、是不是字母、是不是数字，或者是不是其他数值符号。字符串的<code>isidentitier</code>、<code>isprintable</code>、<code>isdecimal</code>、<code>isnumeric</code>等方法就是靠这些信息作判断的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unicodedata</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">re_digit = re.compile(<span class="string">r'\d'</span>)</div><div class="line"></div><div class="line">sample = <span class="string">'1\xbc\xb2\u0969\u136b\u216b\u2466\u2480\u3285'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> char <span class="keyword">in</span> sample:</div><div class="line">    print(<span class="string">'U+%04x'</span> % ord(char),                       <span class="comment"># &lt;1&gt;</span></div><div class="line">          char.center(<span class="number">6</span>),                             <span class="comment"># &lt;2&gt;</span></div><div class="line">          <span class="string">'re_dig'</span> <span class="keyword">if</span> re_digit.match(char) <span class="keyword">else</span> <span class="string">'-'</span>,  <span class="comment"># &lt;3&gt;</span></div><div class="line">          <span class="string">'isdig'</span> <span class="keyword">if</span> char.isdigit() <span class="keyword">else</span> <span class="string">'-'</span>,         <span class="comment"># &lt;4&gt;</span></div><div class="line">          <span class="string">'isnum'</span> <span class="keyword">if</span> char.isnumeric() <span class="keyword">else</span> <span class="string">'-'</span>,       <span class="comment"># &lt;5&gt;</span></div><div class="line">          format(unicodedata.numeric(char), <span class="string">'5.2f'</span>),  <span class="comment"># &lt;6&gt;</span></div><div class="line">          unicodedata.name(char),                     <span class="comment"># &lt;7&gt;</span></div><div class="line">          sep=<span class="string">'\t'</span>)</div></pre></td></tr></table></figure><h3 id="支持字符串和字节序列的双模式API"><a href="#支持字符串和字节序列的双模式API" class="headerlink" title="支持字符串和字节序列的双模式API"></a>支持字符串和字节序列的双模式API</h3><h4 id="正则表达式中的字符串和字节序列"><a href="#正则表达式中的字符串和字节序列" class="headerlink" title="正则表达式中的字符串和字节序列"></a>正则表达式中的字符串和字节序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">re_numbers_str = re.compile(<span class="string">r'\d+'</span>)     <span class="comment"># &lt;1&gt;</span></div><div class="line">re_words_str = re.compile(<span class="string">r'\w+'</span>)</div><div class="line">re_numbers_bytes = re.compile(r<span class="string">b'\d+'</span>)  <span class="comment"># &lt;2&gt;</span></div><div class="line">re_words_bytes = re.compile(r<span class="string">b'\w+'</span>)</div><div class="line"></div><div class="line">text_str = (<span class="string">"Ramanujan saw \u0be7\u0bed\u0be8\u0bef"</span>  <span class="comment"># &lt;3&gt;</span></div><div class="line">            <span class="string">" as 1729 = 1³ + 12³ = 9³ + 10³."</span>)        <span class="comment"># &lt;4&gt;</span></div><div class="line"></div><div class="line">text_bytes = text_str.encode(<span class="string">'utf_8'</span>)  <span class="comment"># &lt;5&gt;</span></div><div class="line"></div><div class="line">print(<span class="string">'Text'</span>, repr(text_str), sep=<span class="string">'\n  '</span>)</div><div class="line">print(<span class="string">'Numbers'</span>)</div><div class="line">print(<span class="string">'  str  :'</span>, re_numbers_str.findall(text_str))      <span class="comment"># &lt;6&gt;</span></div><div class="line">print(<span class="string">'  bytes:'</span>, re_numbers_bytes.findall(text_bytes))  <span class="comment"># &lt;7&gt;</span></div><div class="line">print(<span class="string">'Words'</span>)</div><div class="line">print(<span class="string">'  str  :'</span>, re_words_str.findall(text_str))        <span class="comment"># &lt;8&gt;</span></div><div class="line">print(<span class="string">'  bytes:'</span>, re_words_bytes.findall(text_bytes))    <span class="comment"># &lt;9&gt;</span></div></pre></td></tr></table></figure><h4 id="os函数中的字符串和字节序列"><a href="#os函数中的字符串和字节序列" class="headerlink" title="os函数中的字符串和字节序列"></a>os函数中的字符串和字节序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'.'</span>) </div><div class="line">[<span class="string">'abc.txt'</span>, <span class="string">'digits-of-π.txt'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">b'.'</span>) </div><div class="line">[<span class="string">b'abc.txt'</span>, <span class="string">b'digits-of-\xcf\x80.txt'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pi_name_bytes = os.listdir(<span class="string">b'.'</span>)[<span class="number">1</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pi_name_str = pi_name_bytes.decode(<span class="string">'ascii'</span>, <span class="string">'surrogateescape'</span>)  <span class="comment"># 1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pi_name_str </div><div class="line"><span class="string">'digits-of-\udccf\udc80.txt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pi_name_str.encode(<span class="string">'ascii'</span>, <span class="string">'surrogateescape'</span>)  <span class="comment"># 2</span></div><div class="line"><span class="string">b'digits-of-\xcf\x80.t</span></div></pre></td></tr></table></figure><ol><li>使用<code>ascii</code>编解码器和<code>surrogateescape</code>错误处理方式把它解码成字符串，Windows使用的错误处理方式是<code>strict</code></li><li>编码成ASCII字节序列，各个代替码位还原成被替换的字节</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据模型&quot;&gt;&lt;a href=&quot;#数据模型&quot; class=&quot;headerlink&quot; title=&quot;数据模型&quot;&gt;&lt;/a&gt;数据模型&lt;/h2&gt;&lt;h3 id=&quot;纸牌的数据模型&quot;&gt;&lt;a href=&quot;#纸牌的数据模型&quot; class=&quot;headerlink&quot; title=&quot;纸牌的
      
    
    </summary>
    
    
      <category term="Python" scheme="http://printxhl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django 工程结构</title>
    <link href="http://printxhl.com/2018/05/30/Python-Django-Architecture/"/>
    <id>http://printxhl.com/2018/05/30/Python-Django-Architecture/</id>
    <published>2018-05-30T06:54:59.640Z</published>
    <updated>2018-07-13T09:24:04.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装必要包"><a href="#安装必要包" class="headerlink" title="安装必要包"></a>安装必要包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django djangorestframework markdown django-filter</div></pre></td></tr></table></figure><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mkdir MxShop</div><div class="line"><span class="built_in">cd</span> MxShop</div><div class="line">django-admin startproject MxShop</div><div class="line"></div><div class="line">tree</div><div class="line">├── manage.py            <span class="comment"># 使用命令行与Django项目进行交互</span></div><div class="line">└── MxShop<span class="comment"># 项目容器</span></div><div class="line">    ├── __init__.py <span class="comment"># 空文件，表明这是一个python包</span></div><div class="line">    ├── settings.py       <span class="comment"># Django项目的设置/配置</span></div><div class="line">    ├── urls.py <span class="comment"># url声明</span></div><div class="line">    └── wsgi.py           <span class="comment"># Web服务器入口</span></div></pre></td></tr></table></figure><h4 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp users</div></pre></td></tr></table></figure><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改django数据库配置，针对mysql5.6</span></div><div class="line">vim settings.py</div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">"mxshop"</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">"abc19900514"</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">"192.168.3.56"</span>,</div><div class="line">        <span class="string">'OPTIONS'</span>: &#123; <span class="string">'init_command'</span>: <span class="string">'SET default_storage_engine=INNODB;'</span> &#125;   </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 在mysql中创建数据库</span></div><div class="line">mysql -u root -p</div><div class="line">CREATE DATABASE mxshop DEFAULT CHARACTER SET utf8;</div></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/MxShop/</div><div class="line">mkdir apps    </div><div class="line">mv usrs app/</div><div class="line">touch apps/__init__.py  </div><div class="line">mkdir extra_apps   </div><div class="line">touch extra_apps/__init__.py  </div><div class="line">mkdir templates  </div><div class="line">mkdir db_tools   </div><div class="line">mkdir media      </div><div class="line"></div><div class="line">tree</div><div class="line">├── apps                           <span class="comment"># 存放所有app</span></div><div class="line">│   ├── __init__.py</div><div class="line">│   └── users</div><div class="line">│       ├── admin.py</div><div class="line">│       ├── apps.py</div><div class="line">│       ├── __init__.py</div><div class="line">│       ├── migrations</div><div class="line">│       │   └── __init__.py</div><div class="line">│       ├── models.py</div><div class="line">│       ├── tests.py</div><div class="line">│       └── views.py</div><div class="line">├── db_tools                       <span class="comment"># 存放python脚本</span></div><div class="line">├── extra_apps                     <span class="comment"># 存放第三方包，修改源码</span></div><div class="line">│   └── __init__.py</div><div class="line">├── manage.py</div><div class="line">├── media <span class="comment"># 存放图片</span></div><div class="line">├── MxShop</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── settings.py</div><div class="line">│   ├── urls.py</div><div class="line">│   └── wsgi.py</div><div class="line">└── templates  <span class="comment"># 存放静态文件</span></div></pre></td></tr></table></figure><h4 id="包的路径设置"><a href="#包的路径设置" class="headerlink" title="包的路径设置"></a>包的路径设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim settings.py</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></div><div class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</div><div class="line">sys.path.insert(<span class="number">0</span>, BASE_DIR)</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'apps'</span>))</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'extra_apps'</span>))</div></pre></td></tr></table></figure><h4 id="新增app"><a href="#新增app" class="headerlink" title="新增app"></a>新增app</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp goods   <span class="comment"># 商品</span></div><div class="line">mv goods apps</div><div class="line"></div><div class="line">python manage.py startapp trade   <span class="comment"># 交易</span></div><div class="line">mv trade apps</div><div class="line"></div><div class="line">python manage.py startapp user_operation   <span class="comment"># 用户cao</span></div><div class="line">mv user_operation apps</div></pre></td></tr></table></figure><h4 id="设计Model"><a href="#设计Model" class="headerlink" title="设计Model"></a>设计Model</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">vim settings.py</div><div class="line"></div><div class="line">AUTH_USER_MODEL = <span class="string">"users.UserProfile"</span></div><div class="line"></div><div class="line"><span class="comment"># Application definition</span></div><div class="line"></div><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="string">'users.apps.UsersConfig'</span>,</div><div class="line">    <span class="string">'DjangoUeditor'</span>,</div><div class="line">    <span class="string">'goods.apps.GoodsConfig'</span>,</div><div class="line">    <span class="string">'trade.apps.TradeConfig'</span>,</div><div class="line">    <span class="string">'user_operation.apps.UserOperationConfig'</span>,</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="数据表生成"><a href="#数据表生成" class="headerlink" title="数据表生成"></a>数据表生成</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 凡是修改model，必须运行这两条命令</span></div><div class="line"><span class="comment"># 生成代码</span></div><div class="line">python .\manage.py makemigrations</div><div class="line"></div><div class="line"><span class="comment"># 生成数据表</span></div><div class="line">python .\manage.py migrate</div></pre></td></tr></table></figure><h4 id="后台管理系统xadmin"><a href="#后台管理系统xadmin" class="headerlink" title="后台管理系统xadmin"></a>后台管理系统xadmin</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装xadmin及其依赖</span></div><div class="line"><span class="comment"># xadmin使用crispy-forms插件来美化文档，安装并加入到配置</span></div><div class="line">pip install django-crispy-forms</div><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="string">'users.apps.UsersConfig'</span>,</div><div class="line">    <span class="string">'DjangoUeditor'</span>,</div><div class="line">    <span class="string">'goods.apps.GoodsConfig'</span>,</div><div class="line">    <span class="string">'trade.apps.TradeConfig'</span>,</div><div class="line">    <span class="string">'user_operation.apps.UserOperationConfig'</span>,</div><div class="line">    <span class="string">'crispy_forms'</span>,</div><div class="line">    <span class="string">'xadmin'</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># 为每个app配置adminx.py</span></div><div class="line"></div><div class="line"><span class="comment"># 生成数据表</span></div><div class="line"></div><div class="line"><span class="comment"># 修改admin为xadmin</span></div><div class="line">import xadmin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^xadmin/'</span>, xadmin.site.urls),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># 创建超级用户</span></div><div class="line">python .\manage.py createsuperuser</div><div class="line"></div><div class="line"><span class="comment"># 设置中文及时区</span></div><div class="line"><span class="comment">#设置时区</span></div><div class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span>  <span class="comment">#中文支持，django1.8以后支持；1.8以前是zh-cn</span></div><div class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line">USE_I18N = True</div><div class="line">USE_L10N = True</div><div class="line">USE_TZ = False   <span class="comment">#默认是Ture，时间是utc时间，由于我们要用本地时间，所用手动修改为false！！！！</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 登录后台管理系统</span></div><div class="line">http://localhost:8000/xadmin</div></pre></td></tr></table></figure><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 入库脚本</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 加入环境搜索路径</span></div><div class="line">pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))</div><div class="line">sys.path.append(pwd)     </div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"MxShop.settings"</span>)   <span class="comment"># 设置环境变量，可以单独使用django的Model</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> django</div><div class="line">django.setup()</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsCategory</div><div class="line"></div><div class="line"><span class="keyword">from</span> db_tools.data.category_data <span class="keyword">import</span> row_data</div></pre></td></tr></table></figure><h4 id="配置文件访问路径"><a href="#配置文件访问路径" class="headerlink" title="配置文件访问路径"></a>配置文件访问路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">vim settings.py</div><div class="line">MEDIA_URL = <span class="string">"/media/"</span></div><div class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"media"</span>)</div><div class="line"></div><div class="line">vim urls.py</div><div class="line">from django.conf.urls import url</div><div class="line"><span class="comment"># from django.contrib import admin</span></div><div class="line">import xadmin</div><div class="line"></div><div class="line">from MxShop.settings import MEDIA_ROOT</div><div class="line">from django.views.static import serve</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^xadmin/'</span>, xadmin.site.urls),</div><div class="line">    url(r<span class="string">'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;),</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="序列化方法"><a href="#序列化方法" class="headerlink" title="序列化方法"></a>序列化方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用django自带的序列化方法，使用JsonResponse代替HttpResponse返回json</span></div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</div><div class="line">json_data = serializers.serialize(<span class="string">"json"</span>, goods)</div><div class="line">json_data = json.loads(json_data)    <span class="comment"># 转换成字典</span></div><div class="line"><span class="keyword">return</span> JsonResponse(json_data, safe=<span class="keyword">False</span>)</div></pre></td></tr></table></figure><h4 id="配置Django-REST-framework"><a href="#配置Django-REST-framework" class="headerlink" title="配置Django REST framework"></a>配置Django REST framework</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装Django REST framework依赖包</span></div><div class="line">pip install djangorestframework</div><div class="line">pip install markdown       <span class="comment"># Markdown support for the browsable API.</span></div><div class="line">pip install django-filter  <span class="comment"># Filtering support</span></div><div class="line">pip install coreapi        <span class="comment"># 生成文档</span></div><div class="line"></div><div class="line"><span class="comment"># 配置url, vim urls.py</span></div><div class="line">from rest_framework.documentation import include_docs_urls</div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'docs/'</span>, include_docs_urls(title=<span class="string">"Mall"</span>)),        <span class="comment"># api文档</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># 配置app, vim settings.py</span></div><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="string">'users.apps.UsersConfig'</span>,</div><div class="line">    <span class="string">'DjangoUeditor'</span>,</div><div class="line">    <span class="string">'goods.apps.GoodsConfig'</span>,</div><div class="line">    <span class="string">'trade.apps.TradeConfig'</span>,</div><div class="line">    <span class="string">'user_operation.apps.UserOperationConfig'</span>,</div><div class="line">    <span class="string">'crispy_forms'</span>,</div><div class="line">    <span class="string">'xadmin'</span>,</div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># 配置drf的url</span></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>))</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="使用drf序列化方法"><a href="#使用drf序列化方法" class="headerlink" title="使用drf序列化方法"></a>使用drf序列化方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新建serializers.py</span></div><div class="line"><span class="comment"># 根据字段映射</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSerializer</span><span class="params">(serializers.Serializer)</span>:</span></div><div class="line">    name  = serializers.CharField(required=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</div><div class="line">    click_num = serializers.IntegerField(default=<span class="number">0</span>)</div><div class="line">    goods_front_image = serializers.ImageField()</div><div class="line">    </div><div class="line"><span class="comment"># 根据model映射</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    category = CategorySerializer()    <span class="comment"># 加入外键信息</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Goods</div><div class="line">        fields = <span class="string">"__all__"</span>   <span class="comment"># 序列化所有字段</span></div></pre></td></tr></table></figure><h4 id="使用drf精简视图层代码"><a href="#使用drf精简视图层代码" class="headerlink" title="使用drf精简视图层代码"></a>使用drf精简视图层代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 原代码</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(APIView)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    List all snippets, or create a new snippet.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        goods = Goods.objects.all()[:<span class="number">10</span>]</div><div class="line"></div><div class="line">        <span class="comment"># 使用dsf提供的序列化方法</span></div><div class="line">        goods_serializer = GoodsSerializer(goods, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(goods_serializer.data)</div><div class="line"></div><div class="line"><span class="comment"># 精简代码</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(mixins.ListModelMixin, generics.GenericAPIView)</span>:</span></div><div class="line">    </div><div class="line">    queryset = Goods.objects.all()[:<span class="number">10</span>]</div><div class="line">    serializer_class = GoodsSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</div><div class="line">    </div><div class="line"><span class="comment"># 再次精简代码</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    </div><div class="line">    queryset = Goods.objects.all()[:<span class="number">10</span>]</div><div class="line">    serializer_class = GoodsSerializer</div></pre></td></tr></table></figure><h4 id="使用drf分页"><a href="#使用drf分页" class="headerlink" title="使用drf分页"></a>使用drf分页</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim settings.py</span></div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.LimitOffsetPagination'</span>,</div><div class="line">    <span class="string">'PAGE_SIZE'</span>: 10</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="使用drf分页，搜索，过滤，排序"><a href="#使用drf分页，搜索，过滤，排序" class="headerlink" title="使用drf分页，搜索，过滤，排序"></a>使用drf分页，搜索，过滤，排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim settings.py</span></div><div class="line">INSTALLED_APPS = [</div><div class="line"><span class="string">'django_filters'</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># vim views.py</span></div><div class="line">from django_filters.rest_framework import DjangoFilterBackend</div><div class="line"></div><div class="line">class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):</div><div class="line">    <span class="string">""</span><span class="string">"</span></div><div class="line"><span class="string">    商品列表页，分页，搜索，过滤，排序</span></div><div class="line"><span class="string">    "</span><span class="string">""</span></div><div class="line">    queryset = Goods.objects.all()</div><div class="line">    serializer_class = GoodsSerializer</div><div class="line">    pagination_class = GoodsPagination</div><div class="line">    filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)   <span class="comment"># 配置过滤，搜索，排序</span></div><div class="line">    <span class="comment"># filter_fields = ('name', 'shop_price')</span></div><div class="line">    filter_class = GoodsFilter</div><div class="line">    search_fields = (<span class="string">'=name'</span>, <span class="string">'goods_desc'</span>, <span class="string">'goods_brief'</span>)     <span class="comment"># 模糊查询</span></div><div class="line">    ordering_fields = (<span class="string">'sold_num'</span>, <span class="string">'add_time'</span>)</div></pre></td></tr></table></figure><h4 id="跨域设置"><a href="#跨域设置" class="headerlink" title="跨域设置"></a>跨域设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">pip install django-cors-headers</div><div class="line"></div><div class="line"><span class="comment"># vim settings.py</span></div><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'corsheaders'</span>,</div><div class="line">)</div><div class="line"></div><div class="line">MIDDLEWARE = [ </div><div class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</div><div class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</div><div class="line">]</div><div class="line"></div><div class="line">CORS_ORIGIN_WHITELIST = (</div><div class="line">    <span class="string">'google.com'</span>,</div><div class="line">    <span class="string">'hostname.example.com'</span>,</div><div class="line">    <span class="string">'localhost:8000'</span>,</div><div class="line">    <span class="string">'127.0.0.1:9000'</span></div><div class="line">)</div></pre></td></tr></table></figure><h4 id="自定义过滤"><a href="#自定义过滤" class="headerlink" title="自定义过滤"></a>自定义过滤</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsFilter</span><span class="params">(django_filters.rest_framework.FilterSet)</span>:</span></div><div class="line">    pricemin = django_filters.NumberFilter(name=<span class="string">'shop_price'</span>, lookup_expr=<span class="string">'gte'</span>)</div><div class="line">    pricemax = django_filters.NumberFilter(name=<span class="string">'shop_price'</span>, lookup_expr=<span class="string">'lte'</span>)</div><div class="line">    <span class="comment"># name = django_filters.CharFilter(name='name', lookup_expr='icontains')   # 模糊查询</span></div><div class="line"></div><div class="line">    top_category = django_filters.NumberFilter(method=<span class="string">"top_category_filter"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_category_filter</span><span class="params">(self, queryset, name, value)</span>:</span></div><div class="line">        <span class="keyword">return</span> queryset.filter(Q(category_id=value)|Q(category__parent_category_id=value)|Q(category__parent_category__parent_category_id=value))</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Goods</div><div class="line">        fields = [<span class="string">'pricemin'</span>, <span class="string">'pricemax'</span>, <span class="string">'name'</span>]</div></pre></td></tr></table></figure><h4 id="用户验证"><a href="#用户验证" class="headerlink" title="用户验证"></a>用户验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim settings.py</span></div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</div><div class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</div><div class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</div><div class="line">    )</div><div class="line">&#125;</div><div class="line"></div><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'rest_framework.authtoken'</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># vim urls.py</span></div><div class="line">from rest_framework.authtoken import views</div><div class="line">urlpatterns += [</div><div class="line">    url(r<span class="string">'^api-token-auth/'</span>, views.obtain_auth_token)</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim settings.py</span></div><div class="line">AUTHENTICATION_BACKENDS = (</div><div class="line">    <span class="string">'users.views.CustomBackend'</span>,</div><div class="line">)</div><div class="line"></div><div class="line">JWT_AUTH = &#123;</div><div class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=7),</div><div class="line">    <span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># vim users/views.py</span></div><div class="line">from django.contrib.auth.backends import ModelBackend</div><div class="line">from django.contrib.auth import get_user_model</div><div class="line">from django.db.models import Q</div><div class="line"></div><div class="line">User = get_user_model()</div><div class="line"></div><div class="line">class CustomBackend(ModelBackend):</div><div class="line">    <span class="string">""</span><span class="string">"</span></div><div class="line"><span class="string">    自定义用户验证</span></div><div class="line"><span class="string">    "</span><span class="string">""</span></div><div class="line">    def authenticate(self, request, username=None, password=None, **kwargs):</div><div class="line">        try:</div><div class="line">            user = User.objects.get(Q(username=username)|Q(mobile=username))</div><div class="line">            <span class="keyword">if</span> user.check_password(password):</div><div class="line">                <span class="built_in">return</span> user</div><div class="line">        except Exception as e:</div><div class="line">            <span class="built_in">return</span> None</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装必要包&quot;&gt;&lt;a href=&quot;#安装必要包&quot; class=&quot;headerlink&quot; title=&quot;安装必要包&quot;&gt;&lt;/a&gt;安装必要包&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="Web" scheme="http://printxhl.com/tags/Web/"/>
    
      <category term="Python" scheme="http://printxhl.com/tags/Python/"/>
    
      <category term="Django" scheme="http://printxhl.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Fluent Python (3)：面向对象</title>
    <link href="http://printxhl.com/2018/05/30/Python-FlunetPython-class/"/>
    <id>http://printxhl.com/2018/05/30/Python-FlunetPython-class/</id>
    <published>2018-05-30T06:54:59.526Z</published>
    <updated>2018-03-23T02:14:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象引用、可变性和垃圾回收"><a href="#对象引用、可变性和垃圾回收" class="headerlink" title="对象引用、可变性和垃圾回收"></a>对象引用、可变性和垃圾回收</h2><h3 id="变量不是盒子"><a href="#变量不是盒子" class="headerlink" title="变量不是盒子"></a>变量不是盒子</h3><p>一言以蔽之，变量名是存在于内存中真实对象的一个标签而已，一个对象可以贴多个标签。</p><h3 id="标识、相等性和别名"><a href="#标识、相等性和别名" class="headerlink" title="标识、相等性和别名"></a>标识、相等性和别名</h3><h4 id="在-和is之间选择"><a href="#在-和is之间选择" class="headerlink" title="在==和is之间选择"></a>在==和is之间选择</h4><ul><li><code>==</code>运算符比较两个对象中保存的值，而<code>is</code>比较对象的<code>id</code></li><li>通常关注对象值而不是标识，所以<code>==</code>出现频率比<code>is</code>高。最常使用<code>is</code>检测变量绑定值是不是<code>None</code>，<code>x is None</code></li><li><code>is</code>运算符比<code>==</code>速度快，因为它不重载，所以不用寻找并调用特殊方法。而<code>==</code>是语法糖，等同于<code>a.__eq__(b)</code></li></ul><h4 id="元组的相对不可变性"><a href="#元组的相对不可变性" class="headerlink" title="元组的相对不可变性"></a>元组的相对不可变性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t2 = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>]) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1 == t2 </div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(t1[<span class="number">-1</span>]) </div><div class="line"><span class="number">4302515784</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1[<span class="number">-1</span>].append(<span class="number">99</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>, <span class="number">99</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(t1[<span class="number">-1</span>]) </div><div class="line"><span class="number">4302515784</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1 == t2 </div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure><p>元组的值会随着引用对象的变化而变，元组中不可变的是元素的标识。</p><h3 id="默认做浅复制"><a href="#默认做浅复制" class="headerlink" title="默认做浅复制"></a>默认做浅复制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = list(l1)  <span class="comment"># 1 </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l2</div><div class="line">[<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l2 == l1 </div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l2 <span class="keyword">is</span> l1   <span class="comment"># 2</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure><ol><li><code>l2 = list(l1)</code>等价于<code>l2 = l1[:]</code>等价于<code>l2 = l1.copy()</code></li><li><code>list(l1)</code>创建<code>l1</code>的副本，二者值相等，但是指代不同的对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span>:</span></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=None)</span>:</span></div><div class="line"><span class="keyword">if</span> passengers <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">self.passengers = []</div><div class="line"><span class="keyword">else</span>:</div><div class="line">self.passengers = list(passengers)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></div><div class="line">self.passengers.append(name)</div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></div><div class="line">self.passengers.remove(name)</div><div class="line">        </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bus1 = Bus([<span class="string">'Alice'</span>, <span class="string">'Bill'</span>, <span class="string">'Claire'</span>, <span class="string">'David'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bus2 = copy.copy(bus1)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bus3 = copy.deepcopy(bus1)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(bus1), id(bus2), id(bus3)</div><div class="line">(<span class="number">4301498296</span>, <span class="number">4301499416</span>, <span class="number">4301499752</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.drop(<span class="string">'Bill'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bus2.passengers</div><div class="line">[<span class="string">'Alice'</span>, <span class="string">'Claire'</span>, <span class="string">'David'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(bus1.passengers), id(bus2.passengers), id(bus3.passengers) <span class="comment"># 1</span></div><div class="line">(<span class="number">4302658568</span>, <span class="number">4302658568</span>, <span class="number">4302657800</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bus3.passengers</div><div class="line">[<span class="string">'Alice'</span>, <span class="string">'Bill'</span>, <span class="string">'Claire'</span>, <span class="string">'David'</span>]  <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li><code>bus1</code>和<code>bus2</code>共享一个列表对象，因为<code>bus2</code>是<code>bus1</code>的浅复制副本</li><li><code>bus3</code>是<code>bus1</code>的深复制副本，因为它的<code>passengers</code>属性指代另一个列表</li></ol><h3 id="函数的参数作为引用时"><a href="#函数的参数作为引用时" class="headerlink" title="函数的参数作为引用时"></a>函数的参数作为引用时</h3><h4 id="不要使用可变类型作为参数的默认值"><a href="#不要使用可变类型作为参数的默认值" class="headerlink" title="不要使用可变类型作为参数的默认值"></a>不要使用可变类型作为参数的默认值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HauntedBus</span>:</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=[])</span>:</span> </div><div class="line">self.passengers = passengers </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></div><div class="line">self.passengers.append(name) </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></div><div class="line">self.passengers.remove(name)</div></pre></td></tr></table></figure><p>本例中使用列表作为默认值，当不同实例按默认值初始化时，将导致不同实例的<code>passengers</code>指代同一个列表</p><h4 id="防御可变参数"><a href="#防御可变参数" class="headerlink" title="防御可变参数"></a>防御可变参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwilightBus</span>:</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=None)</span>:</span></div><div class="line"><span class="keyword">if</span> passengers <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">self.passengers = []  <span class="comment"># 1</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">self.passengers = list(passengers)  <span class="comment"># 2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></div><div class="line">self.passengers.append(name)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></div><div class="line">self.passengers.remove(name)</div></pre></td></tr></table></figure><ol><li>当<code>passengers</code>为<code>None</code>时，创建一个新的空列表，防御可变参数</li><li>不要影响初始化校车时传入的参数，如果不是列表就转换成列表</li></ol><h3 id="del和垃圾回收"><a href="#del和垃圾回收" class="headerlink" title="del和垃圾回收"></a>del和垃圾回收</h3><ul><li><code>del</code>语句删除名称，而不是对象。<code>del</code>命令可能会导致对象被当作垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用</li><li>如果两个对象相互引用，当它们的引用只存在二者之间时，垃圾回收程序会判定它们都无法获取，进而把它们都销毁</li><li>在<code>CPython</code>中，垃圾回收使用的主要算法是<strong>引用计数</strong>。每个对象都会统计有多少引用指向自己，当引用计数归零时，对象立即被销毁：<code>CPython</code>会在对象上调用<code>__del__</code>方法，然后释放分配给对象的内存</li></ul><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> weakref  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a_set = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>wref = weakref.ref(a_set)  <span class="comment"># 1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>wref</div><div class="line">&lt;weakref at <span class="number">0x100637598</span>; to <span class="string">'set'</span> at <span class="number">0x100636748</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>wref()  <span class="comment"># 2</span></div><div class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a_set = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>wref()  <span class="comment"># 3</span></div><div class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>wref() <span class="keyword">is</span> <span class="keyword">None</span>  <span class="comment"># 4</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>wref() <span class="keyword">is</span> <span class="keyword">None</span> </div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><ol><li>创建弱引用对象<code>wref</code>，弱应用不会增加对象的引用数量，若引用并不会妨碍所指对象被当作垃圾回收</li><li>调用<code>wref()</code>返回的是被引用对象，<code>{0, 1}</code>。因为这是控制台会话，所以<code>{0, 1}</code>会绑定给<code>_</code>变量</li><li><code>a_set</code>不再指代<code>{0, 1}</code>集合，因此集合的引用数量减少了，但是<code>_</code>变量仍然指代它</li><li>计算这个表达式时，<code>{0, 1}</code>存在，因此<code>wref()</code>不是<code>None</code>。但是随后<code>_</code>绑定到结果值<code>False</code>。现在<code>{0, 1}</code>没有强引用了</li></ol><h4 id="WeakValueDictionary简介"><a href="#WeakValueDictionary简介" class="headerlink" title="WeakValueDictionary简介"></a>WeakValueDictionary简介</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheese</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kind)</span>:</span></div><div class="line">        self.kind = kind</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Cheese(%r)'</span> % self.kind</div><div class="line">        </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> weakref</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>stock = weakref.WeakValueDictionary() </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>catalog = [Cheese(<span class="string">'Red Leicester'</span>), Cheese(<span class="string">'Tilsit'</span>),</div><div class="line"><span class="meta">... </span>Cheese(<span class="string">'Brie'</span>), Cheese(<span class="string">'Parmesan'</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cheese <span class="keyword">in</span> catalog:</div><div class="line"><span class="meta">... </span>stock[cheese.kind] = cheese </div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(stock.keys())</div><div class="line">[<span class="string">'Brie'</span>, <span class="string">'Parmesan'</span>, <span class="string">'Red Leicester'</span>, <span class="string">'Tilsit'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> catalog</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(stock.keys())</div><div class="line">[<span class="string">'Parmesan'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> cheese</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(stock.keys())</div><div class="line">[]</div></pre></td></tr></table></figure><h4 id="弱引用的局限"><a href="#弱引用的局限" class="headerlink" title="弱引用的局限"></a>弱引用的局限</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list)</span>:</span></div><div class="line"><span class="string">"""list的子类，实例可以作为弱引用的目标"""</span></div><div class="line">    </div><div class="line">a_list = MyList(range(<span class="number">10</span>))</div><div class="line"><span class="comment"># a_list可以作为弱引用的目标</span></div><div class="line">wref_to_a_list = weakref.ref(a_list)</div></pre></td></tr></table></figure><p>不是每个Python对象都可以作为弱引用的目标，基本的<code>list</code>和<code>dict</code>实例不能作为所指的对象，但是它们的子类可以解决这个问题。</p><h2 id="符合Python风格的对象"><a href="#符合Python风格的对象" class="headerlink" title="符合Python风格的对象"></a>符合Python风格的对象</h2><h3 id="对象表现形式"><a href="#对象表现形式" class="headerlink" title="对象表现形式"></a>对象表现形式</h3><ul><li><code>repr()</code>：以便于开发者理解的方式返回对象的字符串表示形式</li><li><code>str()</code>：以便于用户理解的方式返回对象的字符串表示形式</li></ul><h3 id="向量类"><a href="#向量类" class="headerlink" title="向量类"></a>向量类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector2d</span>:</span></div><div class="line">    typecode = <span class="string">'d'</span>  <span class="comment"># 1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.x = float(x)    </div><div class="line">        self.y = float(y)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> (i <span class="keyword">for</span> i <span class="keyword">in</span> (self.x, self.y))  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        class_name = type(self).__name__</div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;(&#123;!r&#125;, &#123;!r&#125;)'</span>.format(class_name, *self)  <span class="comment"># 2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(tuple(self))  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bytes__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> (bytes([ord(self.typecode)]) +</div><div class="line">                bytes(array(self.typecode, self)))  <span class="comment"># 3</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> tuple(self) == tuple(other) </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> math.hypot(self.x, self.y)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> bool(abs(self))</div></pre></td></tr></table></figure><ol><li><p><code>typecode</code>是类属性，在<code>Vector2d</code>实例和字节序列之间转换时使用</p><p>| Type code | C Type             | Python Type       | Minimum size in bytes | Notes |<br>| ——— | —————— | —————– | ——————— | —– |<br>| <code>&#39;b&#39;</code>     | signed char        | int               | 1                     |       |<br>| <code>&#39;B&#39;</code>     | unsigned char      | int               | 1                     |       |<br>| <code>&#39;u&#39;</code>     | Py_UNICODE         | Unicode character | 2                     | (1)   |<br>| <code>&#39;h&#39;</code>     | signed short       | int               | 2                     |       |<br>| <code>&#39;H&#39;</code>     | unsigned short     | int               | 2                     |       |<br>| <code>&#39;i&#39;</code>     | signed int         | int               | 2                     |       |<br>| <code>&#39;I&#39;</code>     | unsigned int       | int               | 2                     |       |<br>| <code>&#39;l&#39;</code>     | signed long        | int               | 4                     |       |<br>| <code>&#39;L&#39;</code>     | unsigned long      | int               | 4                     |       |<br>| <code>&#39;q&#39;</code>     | signed long long   | int               | 8                     | (2)   |<br>| <code>&#39;Q&#39;</code>     | unsigned long long | int               | 8                     | (2)   |<br>| <code>&#39;f&#39;</code>     | float              | float             | 4                     |       |<br>| <code>&#39;d&#39;</code>     | double             | float             | 8                     |       |</p></li><li><p><code>__repr__</code>方法使用<code>{!r}</code>获取各个分量的表示形式，然后插值，构成一个字符串。因为<code>Vector2d</code>实例是可迭代对象，所以<code>*self</code>会把<code>x</code>和<code>y</code>分量提供给<code>format</code>函数</p></li><li><p>迭代<code>Vector2d</code>实例，得到一个数组，再把数组转换成字节序列。<code>ord()</code>是<code>chr()</code>的配对函数，以一个字符作为参数，返回对应的<code>ASCII</code>数值</p></li></ol><h3 id="备选构造方法"><a href="#备选构造方法" class="headerlink" title="备选构造方法"></a>备选构造方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@classmethod  # 1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">frombytes</span><span class="params">(cls, octets)</span>:</span>  </div><div class="line">    typecode = chr(octets[<span class="number">0</span>])  <span class="comment"># 2</span></div><div class="line">    memv = memoryview(octets[<span class="number">1</span>:]).cast(typecode)  <span class="comment"># 3</span></div><div class="line">    <span class="keyword">return</span> cls(*memv)  <span class="comment"># 4</span></div></pre></td></tr></table></figure><ol><li>使用<code>classmethod</code>装饰器定义备选构造方法，可以使用<code>Vector2d.frombytes(octets)</code>把字节序列转换成<code>Vector2d</code>实例。</li><li>从第一个字节中读取<code>typecode</code></li><li>使用传入的<code>octets</code>字节序列创建一个<code>memoryview</code>，然后使用<code>typecode</code>转换</li><li>拆包转换后的<code>memoryview</code>，得到构造方法所需的一对参数</li></ol><h3 id="classmethod与staticmethod"><a href="#classmethod与staticmethod" class="headerlink" title="classmethod与staticmethod"></a>classmethod与staticmethod</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></div><div class="line">    </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">klassmeth</span><span class="params">(*args)</span>:</span></div><div class="line">        <span class="keyword">return</span> args</div><div class="line">    </div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">statmeth</span><span class="params">(*args)</span>:</span></div><div class="line">        <span class="keyword">return</span> args</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Demo.klassmeth()  </div><div class="line">(&lt;class '__main__.Demo'&gt;,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Demo.klassmeth(<span class="string">'spam'</span>)</div><div class="line">(&lt;class '__main__.Demo'&gt;, 'spam')</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Demo.statmeth()   </div><div class="line">()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Demo.statmeth(<span class="string">'spam'</span>)</div><div class="line">(<span class="string">'spam'</span>,)</div></pre></td></tr></table></figure><ul><li><code>classmethod</code>，定义操作类而不是操作实例的方法，最常见的用途是定义备选构造方法</li><li><code>staticmethod</code>，静态方法其实就是普通的函数，只是碰巧在类的定义中，而不是在模块层定义。有时函数虽然从不处理类，但是函数的功能和类密切相关，想把它放在近处让代码好看点，并不是特别有用</li></ul><h3 id="格式化显示"><a href="#格式化显示" class="headerlink" title="格式化显示"></a>格式化显示</h3><blockquote><p><a href="https://docs.python.org/3/library/string.html#formatspec" target="_blank" rel="external">str.format()</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, fmt_spec=<span class="string">''</span>)</span>:</span></div><div class="line">        <span class="keyword">if</span> fmt_spec.endswith(<span class="string">'p'</span>):  <span class="comment"># 1</span></div><div class="line">            fmt_spec = fmt_spec[:<span class="number">-1</span>]  </div><div class="line">            coords = (abs(self), self.angle())  </div><div class="line">            outer_fmt = <span class="string">'&lt;&#123;&#125;, &#123;&#125;&gt;'</span>  <span class="comment"># 2</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            coords = self  </div><div class="line">            outer_fmt = <span class="string">'(&#123;&#125;, &#123;&#125;)'</span>  </div><div class="line">        components = (format(c, fmt_spec) <span class="keyword">for</span> c <span class="keyword">in</span> coords)  </div><div class="line">        <span class="keyword">return</span> outer_fmt.format(*components)  </div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>format(Vector2d(<span class="number">1</span>, <span class="number">1</span>), <span class="string">'p'</span>)</div><div class="line"><span class="string">'&lt;1.4142135623730951, 0.7853981633974483&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>format(Vector2d(<span class="number">1</span>, <span class="number">1</span>), <span class="string">'.3ep'</span>)</div><div class="line"><span class="string">'&lt;1.414e+00, 7.854e-01&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>format(Vector2d(<span class="number">1</span>, <span class="number">1</span>), <span class="string">'0.5fp'</span>)</div><div class="line"><span class="string">'&lt;1.41421, 0.78540&gt;'</span></div></pre></td></tr></table></figure><ol><li>如果格式代码以<code>p</code>结尾，使用极坐标。如果不是，则使用直角坐标</li><li>定义格式化的模板，极坐标用尖括号，直角坐标用圆括号</li></ol><h3 id="可散列的Vector2d"><a href="#可散列的Vector2d" class="headerlink" title="可散列的Vector2d"></a>可散列的Vector2d</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector2d</span>:</span></div><div class="line">    typecode = <span class="string">'d'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.__x = float(x)  <span class="comment"># 1</span></div><div class="line">        self.__y = float(y)</div><div class="line"></div><div class="line"><span class="meta">    @property  # 2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> self.__x  </div><div class="line"></div><div class="line"><span class="meta">    @property  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> (i <span class="keyword">for</span> i <span class="keyword">in</span> (self.x, self.y))  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        class_name = type(self).__name__</div><div class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;(&#123;!r&#125;, &#123;!r&#125;)'</span>.format(class_name, *self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(tuple(self))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bytes__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> (bytes([ord(self.typecode)]) +</div><div class="line">                bytes(array(self.typecode, self)))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> tuple(self) == tuple(other)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> hash(self.x) ^ hash(self.y)  <span class="comment"># 3</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> math.hypot(self.x, self.y)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> bool(abs(self))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">angle</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> math.atan2(self.y, self.x)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, fmt_spec=<span class="string">''</span>)</span>:</span></div><div class="line">        <span class="keyword">if</span> fmt_spec.endswith(<span class="string">'p'</span>):</div><div class="line">            fmt_spec = fmt_spec[:<span class="number">-1</span>]</div><div class="line">            coords = (abs(self), self.angle())</div><div class="line">            outer_fmt = <span class="string">'&lt;&#123;&#125;, &#123;&#125;&gt;'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            coords = self</div><div class="line">            outer_fmt = <span class="string">'(&#123;&#125;, &#123;&#125;)'</span></div><div class="line">        components = (format(c, fmt_spec) <span class="keyword">for</span> c <span class="keyword">in</span> coords)</div><div class="line">        <span class="keyword">return</span> outer_fmt.format(*components)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">frombytes</span><span class="params">(cls, octets)</span>:</span></div><div class="line">        typecode = chr(octets[<span class="number">0</span>])</div><div class="line">        memv = memoryview(octets[<span class="number">1</span>:]).cast(typecode)</div><div class="line">        <span class="keyword">return</span> cls(*memv)</div></pre></td></tr></table></figure><ol><li>使用两个前导下划线，把属性标记为私有的</li><li><code>@property</code>装饰器把读值方法标记为特性</li><li>要创建可散列的类型，只需正确地实现<code>__hash__</code>和<code>__eq__</code>方法，但是实例的散列值绝不应该变化，因此使用了只读属性。最好使用位运算异或<code>^</code>混合各分量的散列值。</li></ol><h3 id="Python的私有属性和受保护属性"><a href="#Python的私有属性和受保护属性" class="headerlink" title="Python的私有属性和受保护属性"></a>Python的私有属性和受保护属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = Vector2d(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>v1.__dict__</div><div class="line">&#123;<span class="string">'_Vector2d__y'</span>: <span class="number">4.0</span>, <span class="string">'_Vector2d__x'</span>: <span class="number">3.0</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>v1._Vector2d__x</div><div class="line"><span class="number">3.0</span></div></pre></td></tr></table></figure><ul><li><code>self.__x</code>被称为私有属性，这个私有属性硬要通过实例来访问的话，可以使用<code>v1._Vector2d__x</code></li><li><code>self._x</code>被称为受保护属性，名称不会被解释器改写</li></ul><h3 id="使用-slots-类属性节省空间"><a href="#使用-slots-类属性节省空间" class="headerlink" title="使用__slots__类属性节省空间"></a>使用<code>__slots__</code>类属性节省空间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector2d</span>:</span></div><div class="line">__slots__ = (<span class="string">'__x'</span>, <span class="string">'__y'</span>)</div><div class="line">    </div><div class="line">    typecode = <span class="string">'d'</span></div></pre></td></tr></table></figure><ul><li>在类中定义<code>__slots__</code>属性的目的是告诉解释器，这个类的所有属性都在这了。这样Python会在各个实例中使用类似元组的结构存储实例变量，从避免使用消耗内存的<code>__dict__</code>属性。如果有数百万个实例同时活动，这样做能节省大量的内存</li><li>每个子类都要定义<code>__slots__</code>属性，因为解释器会忽略继承的<code>__slots__</code>属性</li><li>实例只能拥有<code>__slots__</code>中列出的属性，除非把<code>__dict__</code>加入<code>__slots__</code>中，这样做就失去了节省内存的功效</li><li>如果不把<code>__weakref__</code>加入<code>__slots__</code>，实例就不能作为弱引用的目标</li></ul><h3 id="覆盖类属性"><a href="#覆盖类属性" class="headerlink" title="覆盖类属性"></a>覆盖类属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = Vector2d(<span class="number">1.1</span>, <span class="number">2.2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dumpd = bytes(v1)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dumpdb</div><div class="line"><span class="string">'d\x9a\x99\x99\x99\x99\x99\xf1?\x9a\x99\x99\x99\x99\x99\x01@'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(dumpd) </div><div class="line"><span class="number">17</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>v1.typecode = <span class="string">'f'</span> <span class="comment"># 2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dumpf = bytes(v1)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dumpf</div><div class="line"><span class="string">b'f\xcd\xcc\x8c?\xcd\xcc\x0c@'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(dumpf) </div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Vector2d.typecode <span class="comment"># 2</span></div><div class="line"><span class="string">'d'</span></div></pre></td></tr></table></figure><ol><li>把<code>v1</code>实例的<code>typecode</code>属性设为<code>f</code></li><li><code>Vector2d.typecode</code>属性的值不变，只有<code>v1</code>实例的<code>typecode</code>属性使用<code>f</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> vector2d_v3 <span class="keyword">import</span> Vector2d</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ShortVector2d</span><span class="params">(Vector2d)</span>:</span>  <span class="comment"># 1</span></div><div class="line"><span class="meta">... </span>typecode = <span class="string">'f'</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sv = ShortVector2d(<span class="number">1</span>/<span class="number">11</span>, <span class="number">1</span>/<span class="number">27</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sv</div><div class="line">ShortVector2d(<span class="number">0.09090909090909091</span>, <span class="number">0.037037037037037035</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(bytes(sv)) </div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure><ol><li>创建一个子类，只用于覆盖typecode类属性</li></ol><h2 id="序列的修改、散列和切片"><a href="#序列的修改、散列和切片" class="headerlink" title="序列的修改、散列和切片"></a>序列的修改、散列和切片</h2><h3 id="Vector类：用户定义的序列类型"><a href="#Vector类：用户定义的序列类型" class="headerlink" title="Vector类：用户定义的序列类型"></a>Vector类：用户定义的序列类型</h3><h3 id="Vector类第1版：与Vector2d类兼容"><a href="#Vector类第1版：与Vector2d类兼容" class="headerlink" title="Vector类第1版：与Vector2d类兼容"></a>Vector类第1版：与Vector2d类兼容</h3><p>序列类型的构造方法最好接受可迭代的对象参数，因为所有内置的序列类型都是这样做的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</div><div class="line"><span class="keyword">import</span> reprlib</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></div><div class="line">    typecode = <span class="string">'d'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, components)</span>:</span></div><div class="line">        self._components = array(self.typecode, components)  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> iter(self._components)  <span class="comment"># &lt;2&gt;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        components = reprlib.repr(self._components)  <span class="comment"># &lt;3&gt;</span></div><div class="line">        components = components[components.find(<span class="string">'['</span>):<span class="number">-1</span>]  <span class="comment"># &lt;4&gt;</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Vector(&#123;&#125;)'</span>.format(components)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(tuple(self))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bytes__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> (bytes([ord(self.typecode)]) +</div><div class="line">                bytes(self._components))  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> tuple(self) == tuple(other)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> math.sqrt(sum(x * x <span class="keyword">for</span> x <span class="keyword">in</span> self))  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> bool(abs(self))</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">frombytes</span><span class="params">(cls, octets)</span>:</span></div><div class="line">        typecode = chr(octets[<span class="number">0</span>])</div><div class="line">        memv = memoryview(octets[<span class="number">1</span>:]).cast(typecode)</div><div class="line">        <span class="keyword">return</span> cls(memv)  <span class="comment"># &lt;5&gt;</span></div></pre></td></tr></table></figure><ol><li><code>self._components</code>是受保护的实例属性，把<code>Vector</code>的分量保存在一个数组中</li><li>为了迭代，使用<code>self._components</code>构建一个迭代器</li><li>使用<code>reprlib.repr()</code>函数获取<code>self._compoents</code>的有限长度表示形式，如<code>array(&#39;d&#39;,[0,1,2,3,4,...]</code></li><li>把字符串插入<code>Vector</code>的构造方法调用之前，去掉前面的<code>array(&#39;d</code>和后面的<code>)</code>。</li><li>直接把<code>memoryview</code>传给构造方法，不用像前面那样使用<code>*</code>拆包</li></ol><h3 id="Vector类第2版：可切片的序列"><a href="#Vector类第2版：可切片的序列" class="headerlink" title="Vector类第2版：可切片的序列"></a>Vector类第2版：可切片的序列</h3><p>在面向对象编程中，协议是非正式的接口，只在文档中定义不在代码中定义。例如，Python的<strong>序列协议</strong>只需要实现<code>__len__</code>和<code>__getitem__</code>两个方法。任何类只要实现了这两个方法，就可切片。协议是非正式的，没有强制力，为了支持迭代，只需实现<code>__getitem__</code>方法，没必要提供<code>__len__</code>方法。所以<strong>鸭子类型</strong>的意思是，只要这个类实现了<code>__getitem__</code>方法，那么我们就说它是序列，因为它的行为像序列，这才是重点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span>  </div><div class="line">    <span class="keyword">return</span> len(self._components)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></div><div class="line">    cls = type(self)  <span class="comment"># 1</span></div><div class="line">    <span class="keyword">if</span> isinstance(index, slice):   <span class="comment"># 2</span></div><div class="line">        <span class="keyword">return</span> cls(self._components[index])  </div><div class="line">    <span class="keyword">elif</span> isinstance(index, numbers.Integral):   <span class="comment"># 3</span></div><div class="line">        <span class="keyword">return</span> self._components[index]  </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        msg = <span class="string">'&#123;cls.__name__&#125; indices must be integers'</span>  </div><div class="line">        <span class="keyword">raise</span> TypeError(msg.format(cls=cls))</div></pre></td></tr></table></figure><ol><li>获取实例所属的类，供后面使用</li><li>如果<code>index</code>参数的值是<code>slice</code>对象，调用类的构造方法，使用<code>_components</code>数组的切片构建一个新的<code>Vector</code>实例。</li><li>如果<code>index</code>是<code>int</code>或其他整数类型，那就返回<code>_components</code>中相应的元素</li></ol><h3 id="Vector类第3版：动态存取属性"><a href="#Vector类第3版：动态存取属性" class="headerlink" title="Vector类第3版：动态存取属性"></a>Vector类第3版：动态存取属性</h3><p>使用单个字母访问前几个分量。</p><p>在<code>Vector2d</code>中，使用 <code>@property</code>装饰器可以把<code>x</code>和<code>y</code>标记为只读特性。在<code>Vector</code>中也可以这样做，但是太麻烦，使用<code>__getattr__</code>更方便。属性查找失败后，解释器会调用<code>__getattr__</code>方法。简单来说，对<code>my_obj.x</code>表达式，解释器会先检查<strong>实例</strong>有没有<code>x</code>属性，如果没有再检查<strong>类</strong><code>my_obj.__class__</code>中查找，如果没有再顺着继承树查找，实在找不到就调用<code>my_obj</code>所属类中定义的<code>__getattr__</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">shortcut_names = <span class="string">'xyzt'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">    cls = type(self)  </div><div class="line">    <span class="keyword">if</span> len(name) == <span class="number">1</span>:  </div><div class="line">        pos = cls.shortcut_names.find(name)   <span class="comment"># 1</span></div><div class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= pos &lt; len(self._components):  </div><div class="line">            <span class="keyword">return</span> self._components[pos]</div><div class="line">    msg = <span class="string">'&#123;.__name__!r&#125; object has no attribute &#123;!r&#125;'</span>  </div><div class="line">    <span class="keyword">raise</span> AttributeError(msg.format(cls, name))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></div><div class="line">    cls = type(self)</div><div class="line">    <span class="keyword">if</span> len(name) == <span class="number">1</span>:  </div><div class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> cls.shortcut_names:   <span class="comment"># 2</span></div><div class="line">            error = <span class="string">'readonly attribute &#123;attr_name!r&#125;'</span></div><div class="line">        <span class="keyword">elif</span> name.islower():  </div><div class="line">            error = <span class="string">"can't set attributes 'a' to 'z' in &#123;cls_name!r&#125;"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            error = <span class="string">''</span>  </div><div class="line">        <span class="keyword">if</span> error:  </div><div class="line">            msg = error.format(cls_name=cls.__name__, attr_name=name)</div><div class="line">            <span class="keyword">raise</span> AttributeError(msg)</div><div class="line">    super().__setattr__(name, value)  <span class="comment"># 3</span></div></pre></td></tr></table></figure><ol><li>查找那个字母的位置，如果位置落在范围内，返回数组对应的元素</li><li>如果<code>name</code>是<code>xyzt</code>中的一个，设置特殊的错误信息，避免用户私自设置类的属性</li><li>在超类上调用<code>__setattr__</code>方法。<code>super()</code>函数用于动态访问超类的方法，使用这个函数把子类的方法的某些任务委托给超类中适当的方法。</li></ol><h3 id="Vector第4版：散列和快速等值测试"><a href="#Vector第4版：散列和快速等值测试" class="headerlink" title="Vector第4版：散列和快速等值测试"></a>Vector第4版：散列和快速等值测试</h3><p>通过实现<code>__hash__</code>方法，加上现有的<code>__eq__</code>方法，把<code>Vector</code>实例变成可以散列的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># hashes = (hash(x) for x in self)</span></div><div class="line">    hashes = map(hash, self._components)   <span class="comment"># 1</span></div><div class="line">    <span class="keyword">return</span> functools.reduce(operator.xor, hashes, <span class="number">0</span>)  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">    <span class="keyword">return</span> (len(self) == len(other) <span class="keyword">and</span></div><div class="line">            all(a == b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(self, other)))</div></pre></td></tr></table></figure><ol><li><code>Python 2</code>中使用<code>map</code>函数效率低些，因为<code>map</code>函数要使用结果构建一个列表，但在<code>Python 3</code>中，<code>map</code>函数是惰性的，它会创建一个生成器，按需产出结果，因此节省内存</li><li>把<code>hashes</code>提供给<code>reduce</code>函数，使用<code>xor</code>函数计算聚合的散列值，第三个参数，0是初始值。对于<code>+</code>、<code>|</code>和<code>^</code>来说，初始值应该是0。对于<code>*</code>和<code>&amp;</code>来说，初始值应该是1。</li><li><code>zip</code>函数生成一个由元组构成的生成器，元组中的元素来自各个可迭代对象。前面比较长度测试时有必要的，因为一旦有一个输入耗尽，<code>zip</code>函数会立即停止生成值，而且不发出警告，你就发现不了问题了。只要有一次比较的结果是<code>False</code>，<code>all</code>函数就返回<code>False</code>。</li></ol><h3 id="Vector第5版：格式化"><a href="#Vector第5版：格式化" class="headerlink" title="Vector第5版：格式化"></a>Vector第5版：格式化</h3><p>因为<code>Vector</code>类支持<code>n</code>个维度，而超过四维后，球体变成超球体。所以<code>Vector</code>类的<code>__format__</code>方法就要使用球面坐标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">angle</span><span class="params">(self, n)</span>:</span>   <span class="comment"># 1</span></div><div class="line">    r = math.sqrt(sum(x * x <span class="keyword">for</span> x <span class="keyword">in</span> self[n:]))</div><div class="line">    a = math.atan2(r, self[n<span class="number">-1</span>])</div><div class="line">    <span class="keyword">if</span> (n == len(self) - <span class="number">1</span>) <span class="keyword">and</span> (self[<span class="number">-1</span>] &lt; <span class="number">0</span>):</div><div class="line">        <span class="keyword">return</span> math.pi * <span class="number">2</span> - a</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> a</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">angles</span><span class="params">(self)</span>:</span>  </div><div class="line">    <span class="keyword">return</span> (self.angle(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, len(self)))  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, fmt_spec=<span class="string">''</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> fmt_spec.endswith(<span class="string">'h'</span>):  <span class="comment"># hyperspherical coordinates</span></div><div class="line">        fmt_spec = fmt_spec[:<span class="number">-1</span>]</div><div class="line">        coords = itertools.chain([abs(self)], self.angles())  <span class="comment"># 3</span></div><div class="line">        outer_fmt = <span class="string">'&lt;&#123;&#125;&gt;'</span>  </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        coords = self</div><div class="line">        outer_fmt = <span class="string">'(&#123;&#125;)'</span>  </div><div class="line">    components = (format(c, fmt_spec) <span class="keyword">for</span> c <span class="keyword">in</span> coords)  </div><div class="line">    <span class="keyword">return</span> outer_fmt.format(<span class="string">', '</span>.join(components))</div></pre></td></tr></table></figure><ol><li>使用公式计算某个角座标</li><li>创建生成器表达式，按需计算所有角座标</li><li>使用<code>itertools.chain</code>函数生成器表达式，无缝接待向量的模和各个角座标</li></ol><h2 id="接口：从协议到抽象基类"><a href="#接口：从协议到抽象基类" class="headerlink" title="接口：从协议到抽象基类"></a>接口：从协议到抽象基类</h2><h3 id="Python文化中的接口和协议"><a href="#Python文化中的接口和协议" class="headerlink" title="Python文化中的接口和协议"></a>Python文化中的接口和协议</h3><ul><li><strong>接口</strong>：抽象类就是接口，实现特定角色的方法集合，如文件类对象或可迭代对象，一个类可能会实现多个接口，从而让实例扮演多个角色</li><li><strong>协议</strong>：协议是接口，但不是正式的，只由文档和约定定义，因此协议不能像正式接口那样施加限制，一个类可能只实现了部分接口，这是允许的</li></ul><h3 id="Python喜欢序列"><a href="#Python喜欢序列" class="headerlink" title="Python喜欢序列"></a>Python喜欢序列</h3><p>Python数据模型的哲学是尽量支持基本协议。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, pos)</span>:</span></div><div class="line">        <span class="keyword">return</span> range(<span class="number">0</span>, <span class="number">30</span>, <span class="number">10</span>)[pos]</div></pre></td></tr></table></figure><p><code>Foo</code>类没有继承<code>abs.Sequence</code>，而且只实现了序列协议的一个方法<code>__getitem__</code>，这样足够访问元素、迭代和使用<code>in</code>运算符了。鉴于<strong>序列协议</strong>的重要性，如果没有<code>__iter__</code>和<code>__contains__</code>方法，Python会调用<code>__getitem__</code>方法，设法让迭代和<code>in</code>运算符可用。</p><h3 id="使用猴子补丁在运行时实现协议"><a href="#使用猴子补丁在运行时实现协议" class="headerlink" title="使用猴子补丁在运行时实现协议"></a>使用猴子补丁在运行时实现协议</h3><p>如果遵守既定协议，很可能增加利用现有的标准库和第三方代码的可能性，这得益于鸭子类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_card</span><span class="params">(deck, position, card)</span>:</span>  <span class="comment"># 1</span></div><div class="line"><span class="meta">... </span>deck._cards[position] = card</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>FrenchDeck.__setitem__ = set_card   <span class="comment"># 2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shuffle(deck)  <span class="comment"># 3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>deck[:<span class="number">5</span>][Card(rank=<span class="string">'3'</span>, suit=<span class="string">'hearts'</span>), Card(rank=<span class="string">'4'</span>, suit=<span class="string">'diamonds'</span>), Card(rank=<span class="string">'4'</span>,suit=<span class="string">'clubs'</span>), Card(rank=<span class="string">'7'</span>, suit=<span class="string">'hearts'</span>), Card(rank=<span class="string">'9'</span>, suit=<span class="string">'spades'</span>)]</div></pre></td></tr></table></figure><ol><li>每个Python方法说白了就是普通函数，把第一个参数命名为<code>self</code>只是一种约定，按照文档那样应该使用<code>set_card(self, key, value</code>。</li><li>Python是<strong>动态语言</strong>，可以在运行时提供<code>__setitem__</code>方法，实现可变序列协议。这种在运行时修改类或模块而不改变源码的技术叫做<strong>猴子补丁</strong>，但是打补丁的代码必须与要打补丁的程序耦合紧密，而且要处理隐藏和没有文档的部分。</li><li><code>random.shuffle</code>函数不关心参数的类型，只要那个对象实现了部分可变序列协议即可。这就是所谓的<strong>鸭子类型</strong>：对象的类型无关紧要，只要实现了特定的协议即可。</li></ol><h3 id="鸭子类型-vs-白鹅类型"><a href="#鸭子类型-vs-白鹅类型" class="headerlink" title="鸭子类型 vs  白鹅类型"></a>鸭子类型 vs  白鹅类型</h3><ul><li><strong>鸭子类型</strong>：忽略对象的真正类型，转而关注对象有没有实现所需的方法、签名和语义，这基本上避免了使用<code>isinstance</code>检查对象类型。</li><li><strong>白鹅类型</strong>：只要<code>cls</code>是<strong>抽象基类</strong>，即<code>cls</code>的元类是<code>abc.ABCMeta</code>，就可以使用<code>isinstance(obj, cls)</code></li></ul><h3 id="定义抽象基类的子类"><a href="#定义抽象基类的子类" class="headerlink" title="定义抽象基类的子类"></a>定义抽象基类的子类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> collections</div><div class="line"></div><div class="line">Card = collections.namedtuple(<span class="string">'Card'</span>, [<span class="string">'rank'</span>, <span class="string">'suit'</span>])</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrenchDeck2</span><span class="params">(collections.MutableSequence)</span>:</span></div><div class="line">    ranks = [str(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">11</span>)] + list(<span class="string">'JQKA'</span>)</div><div class="line">    suits = <span class="string">'spades diamonds clubs hearts'</span>.split()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._cards = [Card(rank, suit) <span class="keyword">for</span> suit <span class="keyword">in</span> self.suits</div><div class="line">                                        <span class="keyword">for</span> rank <span class="keyword">in</span> self.ranks]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self._cards)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, position)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._cards[position]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, position, value)</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">        self._cards[position] = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, position)</span>:</span>  <span class="comment"># &lt;2&gt;</span></div><div class="line">        <span class="keyword">del</span> self._cards[position]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, position, value)</span>:</span>  <span class="comment"># &lt;3&gt;</span></div><div class="line">        self._cards.insert(position, value)</div></pre></td></tr></table></figure><ol><li>为了支持洗牌，只需实现<code>__setitem__</code>方法</li><li>但是继承<code>MutableSequence</code>的类必须实现<code>__delitem__</code>方法</li><li>此外还必须实现<code>insert</code>方法，如果没有实现那么实例化时会报错</li></ol><h3 id="标准库中的抽象基类"><a href="#标准库中的抽象基类" class="headerlink" title="标准库中的抽象基类"></a>标准库中的抽象基类</h3><h4 id="collections-abc模块中的抽象基类"><a href="#collections-abc模块中的抽象基类" class="headerlink" title="collections.abc模块中的抽象基类"></a>collections.abc模块中的抽象基类</h4><p><img src="http://oj8vattcf.bkt.clouddn.com/%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB.PNG" alt="抽象基类"></p><ul><li><p><code>Iterable</code>、<code>Container</code>和<code>Sized</code></p><p>各个集合应该继承这三个抽象基类，或者至少实现兼容的协议。<code>Iterable</code>通过<code>__iter__</code>方法支持迭代，<code>Container</code>通过<code>__contains__</code>方法支持<code>in</code>运算符，<code>Sized</code>通过<code>__len__</code>方法支持<code>len()</code>函数</p></li><li><p><code>Sequence</code>、<code>Mapping</code>和<code>Set</code></p><p>这三个是主要的不可变集合类型，而各自都有可变的子类。</p></li><li><p><code>MappingView</code></p><p>映射<code>.items()</code>、<code>.keys()</code>和<code>.values()</code>返回的对象分别是<code>ItemsView</code>、<code>KeyView</code>和<code>ValuesView</code>的实例。前两个类还从<code>Set</code>类继承了丰富的接口</p></li><li><p><code>Callable</code>和<code>Hashable</code></p><p>这两个抽象基类与集合没有太大的关系。这两个抽象基类的主要作用是为内置函数<code>isinstance</code>提供支持，以一种安全的方式判断对象能不能调用或散列</p></li><li><p><code>Iterator</code></p><p>注意它是<code>Iterable</code>的子类</p></li></ul><h4 id="抽象基类的数字塔"><a href="#抽象基类的数字塔" class="headerlink" title="抽象基类的数字塔"></a>抽象基类的数字塔</h4><p><code>numbers</code>包定义的是数字塔，其中<code>Number</code>是位于最顶端的超类，随后是<code>Complex</code>子类，依次往下，最低端是<code>Integral</code>类：</p><ul><li>Number</li><li>Complex</li><li>Real</li><li>Rational</li><li>Integral</li></ul><h3 id="定义并使用一个抽象基类"><a href="#定义并使用一个抽象基类" class="headerlink" title="定义并使用一个抽象基类"></a>定义并使用一个抽象基类</h3><p>定义一个支持用户提供随机挑选的无重复类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> abc</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tombola</span><span class="params">(abc.ABC)</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line"><span class="meta">    @abc.abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, iterable)</span>:</span>  <span class="comment"># &lt;2&gt;</span></div><div class="line">        <span class="string">"""Add items from an iterable."""</span></div><div class="line"></div><div class="line"><span class="meta">    @abc.abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span>:</span>  <span class="comment"># &lt;3&gt;</span></div><div class="line">        <span class="string">"""Remove item at random, returning it.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        This method should raise `LookupError` when the instance is empty.</span></div><div class="line"><span class="string">        """</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loaded</span><span class="params">(self)</span>:</span>  <span class="comment"># &lt;4&gt;</span></div><div class="line">        <span class="string">"""Return `True` if there's at least 1 item, `False` otherwise."""</span></div><div class="line">        <span class="keyword">return</span> bool(self.inspect())  </div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inspect</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Return a sorted tuple with the items currently inside."""</span></div><div class="line">        items = []</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:  </div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                items.append(self.pick())</div><div class="line">            <span class="keyword">except</span> LookupError:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        self.load(items)  </div><div class="line">        <span class="keyword">return</span> tuple(sorted(items))</div></pre></td></tr></table></figure><ol><li>自己定义的抽象基类要继承<code>abc.ABC</code></li><li>抽象方法使用<code>@abstractmethod</code>装饰器标记，而且定义体中通常只有文档字符串</li><li>根据文档字符串，如果没有元素可选时，应该抛出<code>LookupError</code></li><li>抽象基类中可以包含具体方法，只能使用抽象基类中的其他具体方法、抽象方法或特性</li></ol><h4 id="抽象基类句法详解"><a href="#抽象基类句法详解" class="headerlink" title="抽象基类句法详解"></a>抽象基类句法详解</h4><ul><li>声明抽象基类最简单的方式是继承<code>abc.ABC</code>，旧版中是这样的<code>class Tombola(metaclass=abc.ABCMeta):</code>，更旧版中在类中声明<code>__metaclass__ = abc.ABCMeta</code></li><li>在<code>@abstractmethod</code>和<code>def</code>语句之间不能有其他装饰器，也就是说其他装饰器要堆叠在<code>@abstractmethod</code>的上面</li></ul><h4 id="定义Tombola抽象基类的子类"><a href="#定义Tombola抽象基类的子类" class="headerlink" title="定义Tombola抽象基类的子类"></a>定义Tombola抽象基类的子类</h4><p>开发两个子类，满足<code>Tombola</code>规定的接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> tombola <span class="keyword">import</span> Tombola</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BingoCage</span><span class="params">(Tombola)</span>:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, items)</span>:</span></div><div class="line">        self._randomizer = random.SystemRandom()  <span class="comment"># &lt;2&gt;</span></div><div class="line">        self._items = []</div><div class="line">        self.load(items)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, items)</span>:</span></div><div class="line">        self._items.extend(items)</div><div class="line">        self._randomizer.shuffle(self._items)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self._items.pop()</div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">raise</span> LookupError(<span class="string">'pick from empty BingoCage'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span>  </div><div class="line">        self.pick()</div></pre></td></tr></table></figure><ol><li>明确指定<code>BingoCage</code>类扩展<code>Tombola</code>类</li><li><code>random.SystemRandom</code>使用<code>os.urandom()</code>实现，<code>os.urandom()</code>函数生成适合用于加密的随机字节序列</li><li><code>BingoCage</code>从<code>Tombola</code>中继承了耗时的<code>loaded</code>方法和笨拙的<code>inspect</code>方法，并没有覆盖</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> tombola <span class="keyword">import</span> Tombola</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LotteryBlower</span><span class="params">(Tombola)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable)</span>:</span></div><div class="line">        self._balls = list(iterable)  <span class="comment"># 1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, iterable)</span>:</span></div><div class="line">        self._balls.extend(iterable)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            position = random.randrange(len(self._balls))  </div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            <span class="keyword">raise</span> LookupError(<span class="string">'pick from empty BingoCage'</span>)</div><div class="line">        <span class="keyword">return</span> self._balls.pop(position)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loaded</span><span class="params">(self)</span>:</span>  <span class="comment"># 2</span></div><div class="line">        <span class="keyword">return</span> bool(self._balls)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inspect</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> tuple(sorted(self._balls))</div></pre></td></tr></table></figure><ol><li>初始化方法接受任何可迭代对象，把参数构建成列表，创建参数的副本，避免原始列表被修改</li><li>覆盖<code>loaded</code>方法，避免调用<code>inspect</code>方法，可以直接处理<code>self._balls</code>而不必构建整个有序元组提升速度</li></ol><h4 id="Tombola的虚拟子类"><a href="#Tombola的虚拟子类" class="headerlink" title="Tombola的虚拟子类"></a>Tombola的虚拟子类</h4><p>白鹅类型的一个基本特性：即便不继承，也有办法把一个类注册为抽象基类的虚拟子类。</p><p>把<code>Tombolist</code>注册为<code>Tombola</code>的虚拟子类，<code>Tombolist</code>是<code>list</code>的真实子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</div><div class="line"><span class="keyword">from</span> tombola <span class="keyword">import</span> Tombola</div><div class="line"></div><div class="line"><span class="meta">@Tombola.register  </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TomboList</span><span class="params">(list)</span>:</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self:  </div><div class="line">            position = randrange(len(self))</div><div class="line">            <span class="keyword">return</span> self.pop(position)  </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> LookupError(<span class="string">'pop from empty TomboList'</span>)</div><div class="line"></div><div class="line">    load = list.extend  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loaded</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> bool(self)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inspect</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> tuple(sorted(self))</div></pre></td></tr></table></figure><h3 id="Tombola子类的测试方法"><a href="#Tombola子类的测试方法" class="headerlink" title="Tombola子类的测试方法"></a>Tombola子类的测试方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> doctest</div><div class="line"><span class="keyword">from</span> tombola <span class="keyword">import</span> Tombola</div><div class="line"></div><div class="line"><span class="keyword">import</span> bingo, lotto, tombolist, drum  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line">TEST_FILE = <span class="string">'tombola_tests.rst'</span></div><div class="line">TEST_MSG = <span class="string">'&#123;0:16&#125; &#123;1.attempted:2&#125; tests, &#123;1.failed:2&#125; failed - &#123;2&#125;'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></div><div class="line">    verbose = <span class="string">'-v'</span> <span class="keyword">in</span> argv</div><div class="line">    real_subclasses = Tombola.__subclasses__()  <span class="comment"># &lt;2&gt;</span></div><div class="line">    virtual_subclasses = list(Tombola._abc_registry)  <span class="comment"># &lt;3&gt;</span></div><div class="line">    <span class="keyword">for</span> cls <span class="keyword">in</span> real_subclasses + virtual_subclasses:  </div><div class="line">        test(cls, verbose)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(cls, verbose=False)</span>:</span></div><div class="line">    res = doctest.testfile(</div><div class="line">            TEST_FILE,</div><div class="line">            globs=&#123;<span class="string">'ConcreteTombola'</span>: cls&#125;,  <span class="comment"># &lt;4&gt;</span></div><div class="line">            verbose=verbose,</div><div class="line">            optionflags=doctest.REPORT_ONLY_FIRST_FAILURE)</div><div class="line">    tag = <span class="string">'FAIL'</span> <span class="keyword">if</span> res.failed <span class="keyword">else</span> <span class="string">'OK'</span></div><div class="line">    print(TEST_MSG.format(cls.__name__, res, tag))  </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">import</span> sys</div><div class="line">    main(sys.argv)</div></pre></td></tr></table></figure><ol><li>导入包含<code>Tombola</code>真实子类和虚拟子类的模块，用于测试</li><li><code>__subclasses__</code>返回类的真实子类列表，不含虚拟子类</li><li><code>_abc_registry</code>，只有抽象基类有这个数据属性，其值是一个<code>WeakSet</code>对象，即抽象类注册的虚拟子类的弱引用</li><li>把<code>cls</code>参数绑定到全局命名空间里的<code>ConcreteTombola</code>名称上，供<code>doctest</code>使用</li></ol><h3 id="Python使用register的方式"><a href="#Python使用register的方式" class="headerlink" title="Python使用register的方式"></a>Python使用register的方式</h3><ul><li>当作类装饰器使用：<code>@Tombola.register</code></li><li>当作普通函数使用：<code>Sequence.register(tuple)</code></li></ul><h2 id="继承的优缺点"><a href="#继承的优缺点" class="headerlink" title="继承的优缺点"></a>继承的优缺点</h2><h3 id="子类化内置类型很麻烦"><a href="#子类化内置类型很麻烦" class="headerlink" title="子类化内置类型很麻烦"></a>子类化内置类型很麻烦</h3><p>在Python2.2之后，内置类型可以子类化了。但是使用C语言编写的内置类型不会调用用户定义的类覆盖的特殊方法。如果子类化使用Python编写的类，就不会受此影响。</p><ul><li>内置类型<code>dict</code>的<code>__init__</code>和<code>__update__</code>方法会忽略我们覆盖的<code>__setitem__</code>方法</li><li>子类化<code>collections.UserDict</code>不会覆盖掉</li></ul><h3 id="多重继承和方法解析顺序"><a href="#多重继承和方法解析顺序" class="headerlink" title="多重继承和方法解析顺序"></a>多重继承和方法解析顺序</h3><p>任何实现多重继承的语言都要处理潜在的命名冲突，这种冲突由不相关的祖先类实现同名方法引起的。对于同名方法先找到哪个就调用哪个。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'ping:'</span>, self)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pong</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'pong:'</span>, self)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pong</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'PONG:'</span>, self)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">(self)</span>:</span></div><div class="line">        super().ping()   <span class="comment"># 4</span></div><div class="line">        <span class="comment"># A.ping(self)   # 5</span></div><div class="line">        print(<span class="string">'post-ping:'</span>, self)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pingpong</span><span class="params">(self)</span>:</span></div><div class="line">        self.ping()</div><div class="line">        super().ping()</div><div class="line">        self.pong()</div><div class="line">        super().pong()</div><div class="line">        C.pong(self)</div><div class="line">        </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> diamond <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = D()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.pong()   <span class="comment"># 1</span></div><div class="line">pong: &lt;diamond.D object at <span class="number">0x10066c278</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>C.pong(d)   <span class="comment"># 2</span></div><div class="line">PONG: &lt;diamond.D object at <span class="number">0x10066c278</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>D.__mro__   <span class="comment"># 3</span></div><div class="line">(&lt;class 'diamond.D'&gt;, &lt;class 'diamond.B'&gt;, &lt;class 'diamond.C'&gt;,&lt;class 'diamond.A'&gt;, &lt;class 'object'&gt;)</div></pre></td></tr></table></figure><ol><li>调用<code>d.pong()</code>时运行的是<code>B</code>类中的版本，因为<code>Class D(B, C)</code>中，<code>B</code>在<code>C</code>    前</li><li>超类中的方法都可以直接调用，此时把实例作为显式参数传入</li><li>Python会按照特定的顺序遍历继承图，这个顺序叫方法解析顺序，类都有一个名为<code>__mro__</code>的属性，它的值是一个元组，按照方法解析顺序列出各个超类，从当前类一直线上知道<code>object</code>类。</li><li>若想把方法调用委托给超类，推荐的方式是使用内置的<code>super()</code>函数</li><li>有时可能需要绕过方法解析顺序，直接调用某个超类的方法</li></ol><h3 id="处理多重继承"><a href="#处理多重继承" class="headerlink" title="处理多重继承"></a>处理多重继承</h3><ol><li><p>把<strong>接口继承</strong>和<strong>实现继承</strong>区分开</p><ul><li>继承接口，创建子类型，实现“是什么”关系，是框架的支柱</li><li>继承实现，通过重用避免代码重复，通常可以换用组合和委托模式</li></ul></li><li><p>使用<strong>抽象基类</strong>显式表示接口</p><p>现代Python中，如果类的作用是定义接口，应该明确把它定义为抽象基类</p></li><li><p>通过<strong>混入类</strong>重用代码</p><p>如果一个类的作用是为多个不相关的子类提供方法实现，从而实现重用，但不体现是什么的关系，应该把那个类明确的定义为混入类<code>mixinclass</code>。从概念上讲，混入类不定义新类型，只是打包方法便于重用。混入类绝不能实例化，而且具体类不能只继承混入类。混入类应该提供某方面的特定行为，只实现少量关系非常紧密的方法。</p></li><li><p>在名称中明确指明混入</p><p>因为在Python中没有把类声明为混入的正规方式，所以强烈推荐在名称中假如<code>...Mixin</code>后缀。</p></li><li><p>抽象基类可以作为混入，反过来则不成立</p><p>抽象基类可以实现具体方法，因此也可以作为混入使用。不过，抽象基类会定义类型，而混入做不到。此外，抽象基类可以作为其他类的唯一基类，而混入绝不能作为唯一超类，除非继承另一个更具体的混入。</p></li><li><p>不要子类化多个<strong>具体类</strong></p><p>具体类可以没有或最多只有一个具体超类。也就是说，具体类的超类除了这一个具体超类之外，其余的都是抽象基类或者混入类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConcreteClass</span><span class="params">(Alpha, Beta, Gamma)</span>:</span></div><div class="line"><span class="string">"""这是一个具体类，可以实例化。"""</span></div><div class="line"><span class="comment"># ……更多代码</span></div></pre></td></tr></table></figure></li><li><p>为用户提供<strong>聚合类</strong></p><p>如果抽象基类或混入的组合对客户代码非常有用，那就提供一个类，使用易于理解的方式把它们结合起来。这种类称为聚合类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span><span class="params">(BaseWidget, Pack, Place, Grid)</span>:</span></div><div class="line"><span class="string">"""Internal class.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Base class for a widget which can be positioned with the geometry managers </span></div><div class="line"><span class="string">Pack, Place or Grid."""</span></div><div class="line">paas</div></pre></td></tr></table></figure><p><code>Widget</code>类的定义体是空的，但是这个类提供了有用的服务：把四个超类结合在一起，这样创建新小组件的用户无需记住全部混入，也不用担心声明<code>class</code>语句时没有遵守特定的顺序。</p></li><li><p>优先使用对象组合，而不是类继承</p><p>熟悉继承之后，太容易过渡使用。优先使用组合才能让设计更灵活。因为子类化是一种紧耦合，而且较高的继承树容易倒。<strong>组合和委托</strong>可以代替混入，把行为提供给不同的类，但是不能取代接口继承去定义类型的层次结构。</p></li><li><p>想想哪些类是真正需要的，我们极少需要编写作为其他类的超类，我们自己编写的类几乎是末端类，当你发现自己在构建多层类层次结构时，你可能在：</p><ul><li>你在重新发明轮子，去找框架或库，他们提供的组件可以在应用程序中重用</li><li>你使用的框架设计不良，去寻找替代品</li><li>你在过读设计，记住要遵守<strong>KISS</strong>原则</li><li>你厌烦了编写应用程序，决定新造一个框架</li></ul></li></ol><h3 id="正确重载运算符"><a href="#正确重载运算符" class="headerlink" title="正确重载运算符"></a>正确重载运算符</h3><h3 id="运算符重载基础"><a href="#运算符重载基础" class="headerlink" title="运算符重载基础"></a>运算符重载基础</h3><ul><li>不能重载内置类型的运算符</li><li>不能新建运算符，只能重载现有的</li><li>某些运算符不能重载，<code>is</code>、<code>and</code>、<code>or</code>和<code>not</code>不能，<code>&amp;</code>、<code>|</code>和<code>~</code>可以</li></ul><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>支持一元运算符很简单，只需实现相应的特殊方法。这些特殊方法只有一个参数，<code>self</code>。然后使用符合所在类的逻辑实现，始终返回一个新对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> math.sqrt(sum(x * x <span class="keyword">for</span> x <span class="keyword">in</span> self))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__neg__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> Vector(-x <span class="keyword">for</span> x <span class="keyword">in</span> self)  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__pos__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> Vector(self)  <span class="comment"># &lt;2&gt;</span></div></pre></td></tr></table></figure><ol><li>为了计算<code>-v</code>，构建一个新的<code>Vector</code>实例，把<code>self</code>的每个分量都取反</li><li>为了计算<code>+v</code>，构建一个新的<code>Vector</code>实例，传入<code>self</code>的各个分量</li></ol><h3 id="重载向量加法运算符"><a href="#重载向量加法运算符" class="headerlink" title="重载向量加法运算符+"></a>重载向量加法运算符+</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        pairs = itertools.zip_longest(self, other, fillvalue=<span class="number">0.0</span>)  <span class="comment"># 1</span></div><div class="line">        <span class="keyword">return</span> Vector(a + b <span class="keyword">for</span> a, b <span class="keyword">in</span> pairs)</div><div class="line">    <span class="keyword">except</span> TypeError:     </div><div class="line">        <span class="keyword">return</span> <span class="built_in">NotImplemented</span>   <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span>   <span class="comment"># 3</span></div><div class="line">    <span class="keyword">return</span> self + other</div></pre></td></tr></table></figure><ol><li><code>pairs</code>是个生成器，它会生成<code>(a, b)</code>形式的元组，其中<code>a</code>来自<code>self</code>，<code>b</code>来自<code>other</code>。如果<code>self</code>和<code>other</code>的长度不同，使用<code>fillvalue</code>填充较短那个可迭代对象</li><li>如果由于类型不兼容而导致运算符特殊方法无法返回有效的结果，那么应该返回<code>NotImplemented</code>，而不是抛出<code>TpyeError</code>。返回<code>NotImplemented</code>时，另一个操作数所属的类型的<strong>还有机会</strong>执行运算，而Python会尝试调用反向方法。</li><li>如果左操作数没有实现<code>__add__</code>方法或者实现了但是返回<code>NotImplemented</code>表明它不知道如何处理右操作数，那么Python会调用<code>__radd__</code>方法</li><li><code>__radd__</code>直接委托<code>__add__</code></li></ol><h3 id="重载标量乘法运算符"><a href="#重载标量乘法运算符" class="headerlink" title="重载标量乘法运算符*"></a>重载标量乘法运算符*</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, scalar)</span>:</span></div><div class="line">    <span class="keyword">if</span> isinstance(scalar, numbers.Real):   <span class="comment"># 1</span></div><div class="line">        <span class="keyword">return</span> Vector(n * scalar <span class="keyword">for</span> n <span class="keyword">in</span> self)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span><span class="params">(self, scalar)</span>:</span></div><div class="line">    <span class="keyword">return</span> self * scalar</div></pre></td></tr></table></figure><ol><li>如果<code>scalar</code>是<code>numbers.Real</code>某个子类的实例，用分量的乘积创建一个新的<code>Vector</code>实例</li><li>否则，返回<code>NotImplemented</code>，让Python尝试在<code>scalar</code>操作数上调用<code>__rmul__</code>方法</li><li><code>__rmul__</code>直接委托<code>__mul__</code></li></ol><h3 id="众多比较运算符"><a href="#众多比较运算符" class="headerlink" title="众多比较运算符"></a>众多比较运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">    <span class="keyword">if</span> isinstance(other, Vector):  <span class="comment"># &lt;1&gt;</span></div><div class="line">        <span class="keyword">return</span> (len(self) == len(other) <span class="keyword">and</span></div><div class="line">                all(a == b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(self, other)))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="built_in">NotImplemented</span>  <span class="comment"># &lt;2&gt;</span></div></pre></td></tr></table></figure><ol><li>如果<code>other</code>操作数是<code>Vector</code>实例，那就像之前那样比较</li><li>否则，返回<code>NotImplemnted</code></li></ol><h3 id="增量赋值运算符"><a href="#增量赋值运算符" class="headerlink" title="增量赋值运算符"></a>增量赋值运算符</h3><p>增量赋值不会修改不可变目标，而是新建实例，然后重新绑定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddableBingoCage</span><span class="params">(BingoCage)</span>:</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(other, Tombola): </div><div class="line">            <span class="keyword">return</span> AddableBingoCage(self.inspect() + other.inspect())  </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iadd__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(other, Tombola):</div><div class="line">            other_iterable = other.inspect()  <span class="comment"># 1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                other_iterable = iter(other)  <span class="comment"># 2</span></div><div class="line">            <span class="keyword">except</span> TypeError:  </div><div class="line">                self_cls = type(self).__name__</div><div class="line">                msg = <span class="string">"right operand in += must be &#123;!r&#125; or an iterable"</span></div><div class="line">                <span class="keyword">raise</span> TypeError(msg.format(self_cls))</div><div class="line">        self.load(other_iterable)  </div><div class="line">        <span class="keyword">return</span> self  <span class="comment"># 3</span></div></pre></td></tr></table></figure><ol><li>如果<code>other</code>是<code>Tombola</code>实例，从中获取元素，否则尝试使用<code>other</code>创建迭代器</li><li>如果尝试失败，抛出异常，并告知用户该怎么做。如果可能，错误消息应该明确指导用户怎么解决问题</li><li>增量赋值特殊方法必须返回<code>self</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象引用、可变性和垃圾回收&quot;&gt;&lt;a href=&quot;#对象引用、可变性和垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;对象引用、可变性和垃圾回收&quot;&gt;&lt;/a&gt;对象引用、可变性和垃圾回收&lt;/h2&gt;&lt;h3 id=&quot;变量不是盒子&quot;&gt;&lt;a href=&quot;#变量不
      
    
    </summary>
    
    
      <category term="Python" scheme="http://printxhl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django 部署</title>
    <link href="http://printxhl.com/2018/05/30/Python-Django-Deploy/"/>
    <id>http://printxhl.com/2018/05/30/Python-Django-Deploy/</id>
    <published>2018-05-30T06:54:59.487Z</published>
    <updated>2018-10-15T08:32:26.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="uWSGI-django-nginx"><a href="#uWSGI-django-nginx" class="headerlink" title="uWSGI+django+nginx"></a>uWSGI+django+nginx</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li>首先客户端请求服务资源</li><li>nginx作为直接对外的服务接口，客户端发送过来的http请求，会解包、分析</li><li>如果是静态文件请求就根据nginx配置的静态文件目录，返回请求的资源</li><li>如果是动态的请求，nginx就通过配置文件，将请求传递给uWSGI。uWSGI 将接收到的包进行处理，并转发给wsgi</li><li>wsgi根据请求调用django工程的某个文件或函数，处理完后django将返回值交给wsgi</li><li>wsgi将返回值进行打包，转发给uWSGI</li><li>uWSGI接收后转发给nginx，nginx最终将返回值返回给客户端(如浏览器)</li></ol><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>第一级的nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程</li><li>在nginx上加上安全性或其他的限制，可以达到保护程序的作用</li><li>uWSGI本身是内网接口，开启多个work和processes可能也不够用，而nginx可以代理多台uWSGI完成uWSGI的负载均衡</li></ol><h3 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 配置阿里云的yum源</span></div><div class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</div><div class="line">mv CentOS-Base.repo CentOS-Base.repo.bak</div><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</div><div class="line">yum clean all</div><div class="line">yum makecache</div><div class="line"></div><div class="line"><span class="comment"># 配置nginx的yum源</span></div><div class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment"># 安装依赖</span></div><div class="line">yum groupinstall <span class="string">"Development tools"</span></div><div class="line">yum install -y zlib-devel bzip2-devel pcre-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel</div></pre></td></tr></table></figure><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install Django</div><div class="line">django-admin.py startproject finance</div></pre></td></tr></table></figure><h4 id="测试工程"><a href="#测试工程" class="headerlink" title="测试工程"></a>测试工程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd /home/finance/finance</span></div><div class="line"><span class="comment"># vim view.py</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello world ! "</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim urls.py</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"> </div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> view</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^$'</span>, view.hello),</div><div class="line">]</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 运行</span></div><div class="line">python manage.py runserver 0.0.0.0:8000</div></pre></td></tr></table></figure><h3 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h3><h4 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装uwsgi</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install uwsgi</div><div class="line">uwsgi --version</div><div class="line"></div><div class="line">uwsgi uwsgi.ini # 启动uwsgi</div></pre></td></tr></table></figure><h4 id="uwsgi应用测试"><a href="#uwsgi应用测试" class="headerlink" title="uwsgi应用测试"></a>uwsgi应用测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim test.py</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>,<span class="string">'text/html'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">b"Hello World"</span>] <span class="comment"># python3</span></div><div class="line">    <span class="comment">#return ["Hello World"] # python2</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --http :8000 --wsgi-file test.py</div></pre></td></tr></table></figure><h4 id="uwsgi配置文件"><a href="#uwsgi配置文件" class="headerlink" title="uwsgi配置文件"></a>uwsgi配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysite_uwsgi.ini file</span></div><div class="line">[uwsgi]</div><div class="line"></div><div class="line"><span class="comment"># Django-related settings</span></div><div class="line">http = :8001</div><div class="line">pythonpath = /mnt/tools/accounting_center/trunk</div><div class="line">wsgi-file = trunk/wsgi.py</div><div class="line">processes = 2</div><div class="line">daemonize = /mnt/tools/accounting_center/trunk/<span class="built_in">log</span>/uwsgi.log</div><div class="line">vacuum = <span class="literal">true</span></div><div class="line">pidfile = /mnt/tools/accounting_center/trunk/uwsgi.pid</div><div class="line">socket=/mnt/tools/accounting_center/trunk/uwsgi.sock</div><div class="line">py-autoreload=10</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line"></div><div class="line"><span class="comment"># Django-related settings</span></div><div class="line">http = :8000</div><div class="line">pythonpath = /home/finance</div><div class="line">wsgi-file = finance/wsgi.py</div><div class="line">processes = 4</div><div class="line">daemonize = /home/finance/<span class="built_in">log</span>/uwsgi.log</div><div class="line">vacuum = <span class="literal">true</span></div><div class="line">socket=/home/finance/uwsgi.sock</div><div class="line">py-autoreload=1<span class="comment"># 平滑重启</span></div></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum install -y nginx# 安装nginx</div><div class="line"></div><div class="line">systemctl start nginx.service# 启动ngnix</div><div class="line">systemctl stop nginx.service# 终止ngnix</div><div class="line">systemctl reload nginx.service# 平滑重启ngnix</div><div class="line">systemctl restart nginx.service# 重启ngnix</div><div class="line">systemctl enable nginx.service# 开机启动</div></pre></td></tr></table></figure><h4 id="Nginx配置信息"><a href="#Nginx配置信息" class="headerlink" title="Nginx配置信息"></a>Nginx配置信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> /etc/nginx/nginx.conf</span></div><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/nginx/conf.d/finance.conf</span></div><div class="line"></div><div class="line">server &#123;   </div><div class="line">       listen 80;  # 我要监听那个端口</div><div class="line">       server_name 192.168.2.40 ;  # 你访问的路径前面的url名称</div><div class="line">       charset  utf-8; # Nginx编码</div><div class="line">       gzip on;  # 启用压缩,这个的作用就是给用户一个网页,比如3M压缩后1M这样传输速度就会提高很多</div><div class="line">       gzip_types text/plain application/x-javascript text/css text/javascript application/x-httpd-php application/json text/json image/jpeg image/gif image/png application/octet-stream;  # 支持压缩的类型</div><div class="line"></div><div class="line">       error_page  404           /404.html;  # 错误页面</div><div class="line">       error_page   500 502 503 504  /50x.html;  # 错误页面</div><div class="line"></div><div class="line">       # 指定项目路径uwsgi</div><div class="line">       location / &#123;        # 这个location就和咱们Django的url(r'^admin/', admin.site.urls),</div><div class="line">           include uwsgi_params;  # 导入一个Nginx模块他是用来和uWSGI进行通讯的</div><div class="line">           uwsgi_connect_timeout 30;  # 设置连接uWSGI超时时间</div><div class="line">           uwsgi_pass unix:/home/finance/uwsgi.sock;  # 指定uwsgi的sock文件所有动态请求就会直接丢给他</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       # 指定静态文件路径</div><div class="line">       location /static/ &#123;</div><div class="line">           alias  /home/finance/static/;</div><div class="line">           index  index.html index.htm;</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Nginx负载均衡配置"><a href="#Nginx负载均衡配置" class="headerlink" title="Nginx负载均衡配置"></a>Nginx负载均衡配置</h4><blockquote><p>主服务器：192.168.2.37</p><p>工作服务器：192.168.2.36，192.168.2.40</p></blockquote><h5 id="负载均衡的作用"><a href="#负载均衡的作用" class="headerlink" title="负载均衡的作用"></a>负载均衡的作用</h5><ol><li><strong>转发功能</strong>：按照一定算法(权重、轮询)，将客户端请求转发到不同应用服务器上，减轻单个服务器压力，提高系统并发量</li><li><strong>故障移除</strong>：通过心跳检测方式，判断应用服务器当前是否可以正常工作，如果服务器宕机，自动将请求发送到其他应用服务器</li><li><strong>恢复添加</strong>：如检测到发生故障的应用服务器恢复工作，自动将其添加到处理用户请求队列中</li></ol><h5 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h5><h5 id="主服务器配置"><a href="#主服务器配置" class="headerlink" title="主服务器配置"></a>主服务器配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">user  nginx;  </div><div class="line">worker_processes  auto;  </div><div class="line">  </div><div class="line">error_log  /var/log/nginx/error.log warn;  </div><div class="line">pid        /var/run/nginx.pid;  </div><div class="line">  </div><div class="line">  </div><div class="line">events &#123;  </div><div class="line">    worker_connections  1024;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">http &#123;  </div><div class="line">    include       /etc/nginx/mime.types;  </div><div class="line">    default_type  application/octet-stream;  </div><div class="line">  </div><div class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '  </div><div class="line">                      '$status $body_bytes_sent "$http_referer" '  </div><div class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';  </div><div class="line">  </div><div class="line">    access_log  /var/log/nginx/access.log  main;  </div><div class="line">  </div><div class="line">    sendfile        on;  </div><div class="line">    #tcp_nopush     on;  </div><div class="line">  </div><div class="line">    keepalive_timeout  65;  </div><div class="line">  </div><div class="line">    #gzip  on;  </div><div class="line">    upstream finance &#123;  </div><div class="line">    server 192.168.2.40:8080;  </div><div class="line">    server 192.168.2.36:8080;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    server&#123;  </div><div class="line">        listen 80;  </div><div class="line">        server_name 192.168.2.37; </div><div class="line">        location / &#123;</div><div class="line">        </div><div class="line">        allow  211.161.60.12;</div><div class="line">        allow  59.110.16.204;</div><div class="line">        allow  59.110.11.24;</div><div class="line">        allow  101.201.46.230;</div><div class="line">        allow  101.201.41.72;</div><div class="line">        allow  47.93.175.161;</div><div class="line">        allow  47.93.175.119;</div><div class="line">        deny   all;</div><div class="line">                #如果后端的服务器返回502、504、执行超时等错误，自动将请求转发</div><div class="line">                proxy_next_upstream http_502 http_504 error timeout invalid_header;  </div><div class="line">  </div><div class="line"></div><div class="line">                #对不同的HTTP状态码设置不同的缓存时间  </div><div class="line">                proxy_cache_valid   200 304 12h; </div><div class="line">        </div><div class="line">                proxy_pass         http://finance;  </div><div class="line">                proxy_set_header   Host             $host;  </div><div class="line">                proxy_set_header   X-Real-IP        $remote_addr;  </div><div class="line">                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  </div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="工作服务器配置"><a href="#工作服务器配置" class="headerlink" title="工作服务器配置"></a>工作服务器配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> #</span><span class="bash"> vim /etc/nginx/conf.d/finance.conf</span></div><div class="line"> </div><div class="line"> server &#123;</div><div class="line">        listen 8080; </div><div class="line">        server_name 192.168.2.36 ;</div><div class="line">        charset  utf-8; </div><div class="line">        gzip on;  </div><div class="line">        gzip_types text/plain application/x-javascript text/css text/javascript application/x-httpd-php application/json text/json image/jpeg image/gif image/png application/octet-stream; </div><div class="line"></div><div class="line">        error_page  404           /404.html;  </div><div class="line">        error_page   500 502 503 504  /50x.html; </div><div class="line"></div><div class="line">        location / &#123;      </div><div class="line">            include uwsgi_params; </div><div class="line">            uwsgi_connect_timeout 30;  </div><div class="line">            uwsgi_pass unix:/home/finance/uwsgi.sock; </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        location /static/ &#123;</div><div class="line">            alias  /home/finance/static/;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;uWSGI-django-nginx&quot;&gt;&lt;a href=&quot;#uWSGI-django-nginx&quot; class=&quot;headerlink&quot; title=&quot;uWSGI+django+nginx&quot;&gt;&lt;/a&gt;uWSGI+django+nginx&lt;/h3&gt;&lt;h4 id=&quot;流
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://printxhl.com/tags/Linux/"/>
    
      <category term="Web" scheme="http://printxhl.com/tags/Web/"/>
    
      <category term="Python" scheme="http://printxhl.com/tags/Python/"/>
    
      <category term="Django" scheme="http://printxhl.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Fluent Python (2)：函数</title>
    <link href="http://printxhl.com/2018/05/30/Python-FlunetPython-function/"/>
    <id>http://printxhl.com/2018/05/30/Python-FlunetPython-function/</id>
    <published>2018-05-30T06:54:59.188Z</published>
    <updated>2018-03-10T02:40:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h2><p>在Python中，函数是一等对象。编程语言理论家把<strong>一等对象</strong>定义为满足下述条件的程序实体：</p><ul><li>在运行时创建</li><li>能赋值给变量或数据结构中的元素</li><li>能作为参数传给函数</li><li>能作为函数的返回结果</li></ul><h3 id="把函数视作对象"><a href="#把函数视作对象" class="headerlink" title="把函数视作对象"></a>把函数视作对象</h3><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fruits = [<span class="string">'strawberry'</span>, <span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'raspberry'</span>, <span class="string">'banana'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(fruits, key=len)</div><div class="line">[<span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'banana'</span>, <span class="string">'raspberry'</span>, <span class="string">'strawberry'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(fact, range(<span class="number">6</span>))) </div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[fact(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">6</span>)] </div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(factorial, filter(<span class="keyword">lambda</span> n: n % <span class="number">2</span>, range(<span class="number">6</span>)))) </div><div class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">120</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[factorial(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">6</span>) <span class="keyword">if</span> n % <span class="number">2</span>] </div><div class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">120</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> add </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(add, range(<span class="number">100</span>)) </div><div class="line"><span class="number">4950</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(range(<span class="number">100</span>)) </div><div class="line"><span class="number">4950</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>all([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>any([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fruits = [<span class="string">'strawberry'</span>, <span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'raspberry'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(fruits, key=<span class="keyword">lambda</span> word: word[::<span class="number">-1</span>])</div></pre></td></tr></table></figure><h3 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h3><ul><li>用户定义的函数：使用<code>def</code>语句或<code>lambda</code>表达式创建</li><li>内置函数：使用C语言(CPython)实现的函数，如<code>len</code></li><li>内置方法：使用C语言实现的方法，如<code>dict.get</code></li><li>方法：在类的定义体中定义的函数</li><li>类：调用类时会运行类的<code>__new__</code>方法创建一个实例，然后运行<code>__init__</code>方法，初始化实例，最后把实例返回给调用方</li><li>类的实例：如果类定义了<code>__call__</code>方法，那么它的实例可以作为函数调用</li><li>生成器函数：使用<code>yield</code>关键字的函数或方法。调用生成器函数返回的是生成器对象</li></ul><h3 id="用户定义的可调用类型"><a href="#用户定义的可调用类型" class="headerlink" title="用户定义的可调用类型"></a>用户定义的可调用类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BingoCage</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, items)</span>:</span></div><div class="line">        self._items = list(items)  </div><div class="line">        random.shuffle(self._items)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self._items.pop()</div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">raise</span> LookupError(<span class="string">'pick from empty BingoCage'</span>)  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> self.pick()</div><div class="line"></div><div class="line">bingo = BingoCage(range(<span class="number">3</span>))</div></pre></td></tr></table></figure><p><code>bingo.pick()</code>的快捷方式是<code>bingo()</code></p><h3 id="函数的内省"><a href="#函数的内省" class="headerlink" title="函数的内省"></a>函数的内省</h3><p><code>dir(factorial)</code>，获取函数属性</p><h3 id="从定位参数到仅限关键字参数"><a href="#从定位参数到仅限关键字参数" class="headerlink" title="从定位参数到仅限关键字参数"></a>从定位参数到仅限关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(name, *content, cls=None, **attrs)</span>:</span></div><div class="line">    <span class="string">"""Generate one or more HTML tags"""</span></div><div class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        attrs[<span class="string">'class'</span>] = cls</div><div class="line">    <span class="keyword">if</span> attrs:</div><div class="line">        attr_str = <span class="string">''</span>.join(<span class="string">' %s="%s"'</span> % (attr, value)</div><div class="line">                           <span class="keyword">for</span> attr, value</div><div class="line">                           <span class="keyword">in</span> sorted(attrs.items()))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        attr_str = <span class="string">''</span></div><div class="line">    <span class="keyword">if</span> content:</div><div class="line">        <span class="keyword">return</span> <span class="string">'\n'</span>.join(<span class="string">'&lt;%s%s&gt;%s&lt;/%s&gt;'</span> %</div><div class="line">                         (name, attr_str, c, name) <span class="keyword">for</span> c <span class="keyword">in</span> content)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s%s /&gt;'</span> % (name, attr_str)</div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag(<span class="string">'br'</span>)  <span class="comment"># 1</span></div><div class="line"><span class="string">'&lt;br /&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag(<span class="string">'p'</span>, <span class="string">'hello'</span>)  <span class="comment"># 2 </span></div><div class="line"><span class="string">'&lt;p&gt;hello&lt;/p&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(tag(<span class="string">'p'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>))</div><div class="line">&lt;p&gt;hello&lt;/p&gt;&lt;p&gt;world&lt;/p&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag(<span class="string">'p'</span>, <span class="string">'hello'</span>, id=<span class="number">33</span>)  <span class="comment"># 3 </span></div><div class="line"><span class="string">'&lt;p id="33"&gt;hello&lt;/p&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(tag(<span class="string">'p'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>, cls=<span class="string">'sidebar'</span>))  <span class="comment"># 4 </span></div><div class="line">&lt;p class="sidebar"&gt;hello&lt;/p&gt;&lt;p class="sidebar"&gt;world&lt;/p&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag(content=<span class="string">'testing'</span>, name=<span class="string">"img"</span>)  <span class="comment"># 5</span></div><div class="line"><span class="string">'&lt;img content="testing" /&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_tag = &#123;<span class="string">'name'</span>: <span class="string">'img'</span>, <span class="string">'title'</span>: <span class="string">'Sunset Boulevard'</span>,<span class="string">'src'</span>: <span class="string">'sunset.jpg'</span>, <span class="string">'cls'</span>: <span class="string">'framed'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag(**my_tag)  <span class="comment"># 6</span></div><div class="line"><span class="string">'&lt;img class="framed" src="sunset.jpg" title="Sunset Boulevard" /&gt;'</span></div></pre></td></tr></table></figure><ol><li>传入单个<strong>定位参数</strong>，生成一个指定名称的空标签</li><li>第一个参数后面的任意个参数会被<code>*content</code>捕获，存入一个元祖</li><li><code>tag</code>函数签名中没有明确指定名称的<strong>关键字参数</strong>会被<code>**attrs</code>捕获，存入一个字典</li><li><code>cls</code>参数只能作为关键字参数传入</li><li>调用<code>tag</code>函数时，即便第一个参数也能作为关键字参数传入</li><li>在<code>my_tag</code>前面加上<code>**</code>，字典中所有元素作为单个参数传入，同名键会绑定到对应的具名参数上，余下的则被<code>**attrs</code>捕获</li></ol><h3 id="获取关于参数的信息"><a href="#获取关于参数的信息" class="headerlink" title="获取关于参数的信息"></a>获取关于参数的信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text, max_len=<span class="number">80</span>)</span>:</span></div><div class="line">    <span class="string">"""Return text clipped at the last space before or after max_len</span></div><div class="line"><span class="string">    """</span></div><div class="line">    end = <span class="keyword">None</span></div><div class="line">    <span class="keyword">if</span> len(text) &gt; max_len:</div><div class="line">        space_before = text.rfind(<span class="string">' '</span>, <span class="number">0</span>, max_len)</div><div class="line">        <span class="keyword">if</span> space_before &gt;= <span class="number">0</span>:</div><div class="line">            end = space_before</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            space_after = text.rfind(<span class="string">' '</span>, max_len)</div><div class="line">            <span class="keyword">if</span> space_after &gt;= <span class="number">0</span>:</div><div class="line">                end = space_after</div><div class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># no spaces were found</span></div><div class="line">        end = len(text)</div><div class="line">    <span class="keyword">return</span> text[:end].rstrip()</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> clip <span class="keyword">import</span> clip</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__defaults__   <span class="comment"># 1</span></div><div class="line">(<span class="number">80</span>,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__    </div><div class="line">&lt;code object clip at <span class="number">0</span>x...&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__.co_varnames   <span class="comment"># 2</span></div><div class="line">(<span class="string">'text'</span>, <span class="string">'max_len'</span>, <span class="string">'end'</span>, <span class="string">'space_before'</span>, <span class="string">'space_after'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__.co_argcount   <span class="comment"># 3</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><ol><li><code>__defaults__</code>属性，它的值是一个元组，里面保存着定位参数和关键字参数的默认值</li><li><code>__code__.co_varnames</code>，它的值是一个元组，里面参数名称以及函数定义体中创建的局部变量</li><li><code>__code__.co_argcount</code>，参数的数目</li></ol><h3 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text:str, max_len:<span class="string">'int &gt; 0'</span>=<span class="number">80</span>)</span> -&gt; str:</span>  <span class="comment"># &lt;1&gt;</span></div><div class="line">    <span class="string">"""Return text clipped at the last space before or after max_len</span></div><div class="line"><span class="string">    """</span></div><div class="line">    end = <span class="keyword">None</span></div><div class="line">    <span class="keyword">if</span> len(text) &gt; max_len:</div><div class="line">        space_before = text.rfind(<span class="string">' '</span>, <span class="number">0</span>, max_len)</div><div class="line">        <span class="keyword">if</span> space_before &gt;= <span class="number">0</span>:</div><div class="line">            end = space_before</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            space_after = text.rfind(<span class="string">' '</span>, max_len)</div><div class="line">            <span class="keyword">if</span> space_after &gt;= <span class="number">0</span>:</div><div class="line">                end = space_after</div><div class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># no spaces were found</span></div><div class="line">        end = len(text)</div><div class="line">    <span class="keyword">return</span> text[:end].rstrip()</div><div class="line"></div><div class="line">print(clip.__annotations__)  <span class="comment"># 2</span></div></pre></td></tr></table></figure><ol><li>函数声明中的各个参数可以在<code>:</code>之后增加注解表达式。如果参数有默认值，注解放在参数名和<code>=</code>号之间。如果想注解返回值，使用<code>-&gt;</code>和一个表达式。</li><li><code>__annotations__</code>，存储函数的注解</li></ol><h3 id="支持函数式编程的包"><a href="#支持函数式编程的包" class="headerlink" title="支持函数式编程的包"></a>支持函数式编程的包</h3><h4 id="operator模块"><a href="#operator模块" class="headerlink" title="operator模块"></a>operator模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul   <span class="comment"># 1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(mul, range(<span class="number">1</span>, n+<span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>metro_data = [</div><div class="line"><span class="meta">... </span>(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>)),</div><div class="line"><span class="meta">... </span>(<span class="string">'Delhi NCR'</span>, <span class="string">'IN'</span>, <span class="number">21.935</span>, (<span class="number">28.613889</span>, <span class="number">77.208889</span>)),</div><div class="line"><span class="meta">... </span>(<span class="string">'Mexico City'</span>, <span class="string">'MX'</span>, <span class="number">20.142</span>, (<span class="number">19.433333</span>, <span class="number">-99.133333</span>)),</div><div class="line"><span class="meta">... </span>(<span class="string">'New York-Newark'</span>, <span class="string">'US'</span>, <span class="number">20.104</span>, (<span class="number">40.808611</span>, <span class="number">-74.020386</span>)),</div><div class="line"><span class="meta">... </span>(<span class="string">'Sao Paulo'</span>, <span class="string">'BR'</span>, <span class="number">19.649</span>, (<span class="number">-23.547778</span>, <span class="number">-46.635833</span>)),</div><div class="line"><span class="meta">... </span>]</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter  </div><div class="line"><span class="keyword">for</span> city <span class="keyword">in</span> sorted(metro_data, key=itemgetter(<span class="number">1</span>)):</div><div class="line">    print(city)</div><div class="line">    </div><div class="line">cc_name = itemgetter(<span class="number">1</span>, <span class="number">0</span>)   <span class="comment"># 2</span></div><div class="line"><span class="keyword">for</span> city <span class="keyword">in</span> metro_data:</div><div class="line">    print(cc_name(city))</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>LatLong = namedtuple(<span class="string">'LatLong'</span>, <span class="string">'lat long'</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Metropolis = namedtuple(<span class="string">'Metropolis'</span>, <span class="string">'name cc pop coord'</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>metro_areas = [Metropolis(name, cc, pop, LatLong(lat, long)) </div><div class="line"><span class="meta">... </span><span class="keyword">for</span> name, cc, pop, (lat, long) <span class="keyword">in</span> metro_data]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> attrgetter   </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name_lat = attrgetter(<span class="string">'name'</span>, <span class="string">'coord.lat'</span>)  <span class="comment"># 3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> city <span class="keyword">in</span> sorted(metro_areas, key=attrgetter(<span class="string">'coord.lat'</span>)): </div><div class="line"><span class="meta">... </span>print(name_lat(city))</div></pre></td></tr></table></figure><ol><li><code>operator</code>模块为多个算术运算符提供了对应的函数</li><li><code>itemgetter(1, 0)</code>等价于<code>lambda x: x[1], x[0]</code></li><li><code>attrgetter(&#39;name&#39;, &#39;coord.lat&#39;)</code>等价于<code>lambda x: x[&#39;name&#39;], x[&#39;coord.lat&#39;]</code></li></ol><h4 id="使用functools-partial冻结参数"><a href="#使用functools-partial冻结参数" class="headerlink" title="使用functools.partial冻结参数"></a>使用functools.partial冻结参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> mul</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>triple = partial(mul, <span class="number">3</span>)   <span class="comment"># 1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>triple(<span class="number">7</span>) </div><div class="line"><span class="number">21</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(triple, range(<span class="number">1</span>, <span class="number">10</span>))) </div><div class="line">[<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> unicodedata, functools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nfc = functools.partial(unicodedata.normalize, <span class="string">'NFC'</span>)  <span class="comment"># 2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">'café'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="string">'cafe\u0301'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1, s2</div><div class="line">(<span class="string">'café'</span>, <span class="string">'café'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 == s2</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nfc(s1) == nfc(s2)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><ol><li>使用<code>mul</code>创建<code>triple</code>函数，把第一个定位参数定为3</li><li><code>partial</code>的第一个参数是一个可调用对象，后面跟着任意个要绑定的定位参数和关键字参数</li></ol><h2 id="使用一等函数实现设计模式"><a href="#使用一等函数实现设计模式" class="headerlink" title="使用一等函数实现设计模式"></a>使用一等函数实现设计模式</h2><h3 id="重构策略模式"><a href="#重构策略模式" class="headerlink" title="重构策略模式"></a>重构策略模式</h3><h4 id="经典的策略模式"><a href="#经典的策略模式" class="headerlink" title="经典的策略模式"></a>经典的策略模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></div><div class="line">        self.product = product</div><div class="line">        self.quantity = quantity</div><div class="line">        self.price = price</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.price * self.quantity</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span>  <span class="comment"># the Context</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></div><div class="line">        self.customer = customer</div><div class="line">        self.cart = list(cart)</div><div class="line">        self.promotion = promotion</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</div><div class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</div><div class="line">        <span class="keyword">return</span> self.__total</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            discount = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            discount = self.promotion.discount(self)</div><div class="line">        <span class="keyword">return</span> self.total() - discount</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></div><div class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promotion</span><span class="params">(ABC)</span>:</span>  <span class="comment"># the Strategy: an Abstract Base Class</span></div><div class="line"></div><div class="line"><span class="meta">    @abstractmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></div><div class="line">        <span class="string">"""Return discount as a positive dollar amount"""</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FidelityPromo</span><span class="params">(Promotion)</span>:</span>  <span class="comment"># first Concrete Strategy</span></div><div class="line">    <span class="string">"""5% discount for customers with 1000 or more fidelity points"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></div><div class="line">        <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BulkItemPromo</span><span class="params">(Promotion)</span>:</span>  <span class="comment"># second Concrete Strategy</span></div><div class="line">    <span class="string">"""10% discount for each LineItem with 20 or more units"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></div><div class="line">        discount = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</div><div class="line">            <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</div><div class="line">                discount += item.total() * <span class="number">.1</span></div><div class="line">        <span class="keyword">return</span> discount</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeOrderPromo</span><span class="params">(Promotion)</span>:</span>  <span class="comment"># third Concrete Strategy</span></div><div class="line">    <span class="string">"""7% discount for orders with 10 or more distinct items"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></div><div class="line">        distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</div><div class="line">        <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</div><div class="line">            <span class="keyword">return</span> order.total() * <span class="number">.07</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure><h4 id="使用函数实现策略模式"><a href="#使用函数实现策略模式" class="headerlink" title="使用函数实现策略模式"></a>使用函数实现策略模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></div><div class="line">        self.product = product</div><div class="line">        self.quantity = quantity</div><div class="line">        self.price = price</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.price * self.quantity</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span>  <span class="comment"># the Context</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></div><div class="line">        self.customer = customer</div><div class="line">        self.cart = list(cart)</div><div class="line">        self.promotion = promotion</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</div><div class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</div><div class="line">        <span class="keyword">return</span> self.__total</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            discount = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            discount = self.promotion(self)  <span class="comment"># &lt;1&gt;</span></div><div class="line">        <span class="keyword">return</span> self.total() - discount</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></div><div class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity_promo</span><span class="params">(order)</span>:</span>  <span class="comment"># &lt;2&gt;</span></div><div class="line">    <span class="string">"""5% discount for customers with 1000 or more fidelity points"""</span></div><div class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item_promo</span><span class="params">(order)</span>:</span></div><div class="line">    <span class="string">"""10% discount for each LineItem with 20 or more units"""</span></div><div class="line">    discount = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</div><div class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</div><div class="line">            discount += item.total() * <span class="number">.1</span></div><div class="line">    <span class="keyword">return</span> discount</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order_promo</span><span class="params">(order)</span>:</span></div><div class="line">    <span class="string">"""7% discount for orders with 10 or more distinct items"""</span></div><div class="line">    distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</div><div class="line">    <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</div><div class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure><h4 id="选择最佳策略：简单方式"><a href="#选择最佳策略：简单方式" class="headerlink" title="选择最佳策略：简单方式"></a>选择最佳策略：简单方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">promos = [fidelity_promo, bulk_item_promo, large_order_promo]  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span>  <span class="comment"># &lt;2&gt;</span></div><div class="line">    <span class="string">"""Select best discount available</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)  <span class="comment"># &lt;3&gt;</span></div></pre></td></tr></table></figure><h4 id="找出模块中的全部策略"><a href="#找出模块中的全部策略" class="headerlink" title="找出模块中的全部策略"></a>找出模块中的全部策略</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">promos = [globals()[name] <span class="keyword">for</span> name <span class="keyword">in</span> globals()  <span class="comment"># 1</span></div><div class="line">            <span class="keyword">if</span> name.endswith(<span class="string">'_promo'</span>)  </div><div class="line">            <span class="keyword">and</span> name != <span class="string">'best_promo'</span>]   </div><div class="line"></div><div class="line">promos = [func <span class="keyword">for</span> name, func <span class="keyword">in</span></div><div class="line">                inspect.getmembers(promotions, inspect.isfunction)]  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></div><div class="line">    <span class="string">"""Select best discount available</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)  <span class="comment"># &lt;4&gt;</span></div></pre></td></tr></table></figure><ol><li>使用<code>globals</code>函数内省，构建<code>promos</code>列表</li><li>使用<code>inspect.getmembers</code>函数获取对象属性，第二个参数是可选的判断条件</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span>:</span></div><div class="line"><span class="string">"""一个执行一组命令的命令"""</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, commands)</span>:</span></div><div class="line">self.commands = list(commands)   <span class="comment"># 1</span></div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="keyword">for</span> command <span class="keyword">in</span> self.commands:   <span class="comment"># 2</span></div><div class="line">command()</div></pre></td></tr></table></figure><ol><li>使用<code>commands</code>参数构建一个列表，这样能确保参数是可迭代对象，还能在各个<code>MacroCommand</code>实例中保存各个命令引用的副本</li><li>调用<code>MacroCommand</code>实例时，<code>self.commands</code>中的各个命令依序执行</li></ol><h2 id="函数装饰器和闭包"><a href="#函数装饰器和闭包" class="headerlink" title="函数装饰器和闭包"></a>函数装饰器和闭包</h2><h3 id="装饰器基础知识"><a href="#装饰器基础知识" class="headerlink" title="装饰器基础知识"></a>装饰器基础知识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'running inner()'</span>)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'running target()'</span>)</div></pre></td></tr></table></figure><p><code>target()</code>等价于<code>deco(target)</code></p><h3 id="Python何时执行装饰器"><a href="#Python何时执行装饰器" class="headerlink" title="Python何时执行装饰器"></a>Python何时执行装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">registry = []  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(func)</span>:</span>  </div><div class="line">    print(<span class="string">'running register(%s)'</span> % func)  </div><div class="line">    registry.append(func)  </div><div class="line">    <span class="keyword">return</span> func  </div><div class="line"></div><div class="line"><span class="meta">@register  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'running f1()'</span>)</div><div class="line"></div><div class="line"><span class="meta">@register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'running f2()'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span>  </div><div class="line">    print(<span class="string">'running f3()'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>  </div><div class="line">    print(<span class="string">'running main()'</span>)</div><div class="line">    print(<span class="string">'registry -&gt;'</span>, registry)</div><div class="line">    f1()</div><div class="line">    f2()</div><div class="line">    f3()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><ul><li>函数装饰器在导入模块时立即执行，而被装饰的函数只在明确调用时运行</li><li>装饰器函数与被装饰的函数在同一个模块中定义，实际上装饰器通常在一个模块中定义，然后应用到其他模块中的函数上</li><li><code>register</code>装饰器返回的函数与通过参数传入的相同，实际上大多数装饰器会在内部定义一个函数，然后将其返回</li></ul><h3 id="使用装饰器改进策略模式"><a href="#使用装饰器改进策略模式" class="headerlink" title="使用装饰器改进策略模式"></a>使用装饰器改进策略模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></div><div class="line">        self.product = product</div><div class="line">        self.quantity = quantity</div><div class="line">        self.price = price</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.price * self.quantity</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span>  <span class="comment"># the Context</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></div><div class="line">        self.customer = customer</div><div class="line">        self.cart = list(cart)</div><div class="line">        self.promotion = promotion</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</div><div class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</div><div class="line">        <span class="keyword">return</span> self.__total</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            discount = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            discount = self.promotion(self)</div><div class="line">        <span class="keyword">return</span> self.total() - discount</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></div><div class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</div><div class="line"></div><div class="line">promos = []  <span class="comment"># &lt;1&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">promotion</span><span class="params">(promo_func)</span>:</span>  <span class="comment"># &lt;2&gt;</span></div><div class="line">    promos.append(promo_func)</div><div class="line">    <span class="keyword">return</span> promo_func</div><div class="line"></div><div class="line"><span class="meta">@promotion  # &lt;3&gt;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity</span><span class="params">(order)</span>:</span></div><div class="line">    <span class="string">"""5% discount for customers with 1000 or more fidelity points"""</span></div><div class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="meta">@promotion</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item</span><span class="params">(order)</span>:</span></div><div class="line">    <span class="string">"""10% discount for each LineItem with 20 or more units"""</span></div><div class="line">    discount = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</div><div class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</div><div class="line">            discount += item.total() * <span class="number">.1</span></div><div class="line">    <span class="keyword">return</span> discount</div><div class="line"></div><div class="line"><span class="meta">@promotion</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order</span><span class="params">(order)</span>:</span></div><div class="line">    <span class="string">"""7% discount for orders with 10 or more distinct items"""</span></div><div class="line">    distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</div><div class="line">    <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</div><div class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span>  <span class="comment"># &lt;4&gt;</span></div><div class="line">    <span class="string">"""Select best discount available</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</div></pre></td></tr></table></figure><h3 id="变量作用域规则"><a href="#变量作用域规则" class="headerlink" title="变量作用域规则"></a>变量作用域规则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a)</span>:</span></div><div class="line"><span class="meta">... </span>print(a)</div><div class="line"><span class="meta">... </span>print(b)</div><div class="line"><span class="meta">... </span>b = <span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">3</span>)</div><div class="line"><span class="number">3</span></div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> f2</div><div class="line">UnboundLocalError: local variable <span class="string">'b'</span> referenced before assignme   <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(a)</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">global</span> b   <span class="comment"># 2</span></div><div class="line"><span class="meta">... </span>print(a)</div><div class="line"><span class="meta">... </span>print(b)</div><div class="line"><span class="meta">... </span>b = <span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3(<span class="number">3</span>)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure><ol><li>Python在编译函数时，假定在函数定义体中赋值的变量是局部变量。也就是说，它判断<code>b</code>为局部变量，但在打印时，<code>b</code>没有绑定值，所以报错</li><li>使用<code>global</code>声明全局变量</li></ol><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Averager</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.series = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, new_value)</span>:</span></div><div class="line">        self.series.append(new_value)</div><div class="line">        total = sum(self.series)</div><div class="line">        <span class="keyword">return</span> total/len(self.series)</div></pre></td></tr></table></figure><p>以上是类实现，一下是函数式实现，即闭包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></div><div class="line">    series = []   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></div><div class="line">        series.append(new_value)</div><div class="line">        total = sum(series)</div><div class="line">        <span class="keyword">return</span> total/len(series)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> averager</div></pre></td></tr></table></figure><ul><li><code>series</code>是<code>make_averager</code>函数的局部变量，在调用<code>avg(10)</code>时，<code>make_averager</code>函数已经返回，本地作用域消失。<code>seriers</code>则成了自由变量。</li><li>闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用了，但仍能使用那些绑定。</li></ul><h3 id="nonlocal声明"><a href="#nonlocal声明" class="headerlink" title="nonlocal声明"></a>nonlocal声明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    total = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> count, total</div><div class="line">        count += <span class="number">1</span></div><div class="line">        total += new_value</div><div class="line">        <span class="keyword">return</span> total / count</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> averag</div></pre></td></tr></table></figure><p><code>nonlocal</code>声明，把变量标记为自由变量，即使在函数中为变量赋予新值了，也会变成自由变量。如果为<code>nonlocal</code>声明的变量赋予新值，闭包中保存的绑定会更新。</p><h3 id="实现一个简单的装饰器"><a href="#实现一个简单的装饰器" class="headerlink" title="实现一个简单的装饰器"></a>实现一个简单的装饰器</h3><h4 id="简单版本"><a href="#简单版本" class="headerlink" title="简单版本"></a>简单版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args)</span>:</span></div><div class="line">        t0 = time.time()</div><div class="line">        result = func(*args)</div><div class="line">        elapsed = time.time() - t0</div><div class="line">        name = func.__name__</div><div class="line">        arg_str = <span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args)</div><div class="line">        print(<span class="string">'[%0.8fs] %s(%s) -&gt; %r'</span> % (elapsed, name, arg_str, result))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> clocked</div><div class="line"></div><div class="line"><span class="meta">@clock</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></div><div class="line">    time.sleep(seconds)</div><div class="line"></div><div class="line"><span class="meta">@clock</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n*factorial(n<span class="number">-1</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    print(<span class="string">'*'</span> * <span class="number">40</span>, <span class="string">'Calling snooze(.123)'</span>)</div><div class="line">    snooze(<span class="number">.123</span>)</div><div class="line">    print(<span class="string">'*'</span> * <span class="number">40</span>, <span class="string">'Calling factorial(6)'</span>)</div><div class="line">    print(<span class="string">'6! ='</span>, factorial(<span class="number">6</span>))</div></pre></td></tr></table></figure><h4 id="改进版本"><a href="#改进版本" class="headerlink" title="改进版本"></a>改进版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        t0 = time.time()</div><div class="line">        result = func(*args, **kwargs)</div><div class="line">        elapsed = time.time() - t0</div><div class="line">        name = func.__name__</div><div class="line">        arg_lst = []</div><div class="line">        <span class="keyword">if</span> args:</div><div class="line">            arg_lst.append(<span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args))</div><div class="line">        <span class="keyword">if</span> kwargs:</div><div class="line">            pairs = [<span class="string">'%s=%r'</span> % (k, w) <span class="keyword">for</span> k, w <span class="keyword">in</span> sorted(kwargs.items())]</div><div class="line">            arg_lst.append(<span class="string">', '</span>.join(pairs))</div><div class="line">        arg_str = <span class="string">', '</span>.join(arg_lst)</div><div class="line">        print(<span class="string">'[%0.8fs] %s(%s) -&gt; %r '</span> % (elapsed, name, arg_str, result))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> clock</div></pre></td></tr></table></figure><p>原版本不支持关键字参数，而且遮盖了被装饰函数的<code>__name__</code>和<code>__doc__</code>属性。<code>functools.wraps</code>装饰器把相关属性从<code>func</code>复制到<code>clocked</code>中。</p><h3 id="标准库中的装饰器"><a href="#标准库中的装饰器" class="headerlink" title="标准库中的装饰器"></a>标准库中的装饰器</h3><h4 id="使用functools-lru-cache做备忘"><a href="#使用functools-lru-cache做备忘" class="headerlink" title="使用functools.lru_cache做备忘"></a>使用functools.lru_cache做备忘</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">from</span> clockdeco <span class="keyword">import</span> clock</div><div class="line"></div><div class="line"><span class="meta">@functools.lru_cache()  # 1</span></div><div class="line"><span class="meta">@clock  # 2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> n</div><div class="line">    <span class="keyword">return</span> fibonacci(n<span class="number">-2</span>) + fibonacci(n<span class="number">-1</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(fibonancci(<span class="number">6</span>))</div></pre></td></tr></table></figure><ol><li><code>functools.lru_cache</code>实现了备忘功能，把耗时函数的结果保存起来，避免传入相同的参数时重复计算。带括号是因为<code>lru_cache</code>可以接受配置参数</li><li>叠放了装饰器，<code>@lru_cache()</code>应用到<code>@clock</code>返回的函数上</li></ol><h4 id="单分派泛函数"><a href="#单分派泛函数" class="headerlink" title="单分派泛函数"></a>单分派泛函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch  </div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</div><div class="line"><span class="keyword">import</span> numbers</div><div class="line"><span class="keyword">import</span> html</div><div class="line"></div><div class="line"><span class="meta">@singledispatch   # 1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">htmlize</span><span class="params">(obj)</span>:</span></div><div class="line">    content = html.escape(repr(obj))</div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&#123;&#125;&lt;/pre&gt;'</span>.format(content)</div><div class="line"></div><div class="line"><span class="meta">@htmlize.register(str)   # 2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(text)</span>:</span>   <span class="comment"># 3         </span></div><div class="line">    content = html.escape(text).replace(<span class="string">'\n'</span>, <span class="string">'&lt;br&gt;\n'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;p&gt;&#123;0&#125;&lt;/p&gt;'</span>.format(content)</div><div class="line"></div><div class="line"><span class="meta">@htmlize.register(numbers.Integral)  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&#123;0&#125; (0x&#123;0:x&#125;)&lt;/pre&gt;'</span>.format(n)</div><div class="line"></div><div class="line"><span class="meta">@htmlize.register(tuple)   # 4</span></div><div class="line"><span class="meta">@htmlize.register(abc.MutableSequence)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(seq)</span>:</span></div><div class="line">    inner = <span class="string">'&lt;/li&gt;\n&lt;li&gt;'</span>.join(htmlize(item) <span class="keyword">for</span> item <span class="keyword">in</span> seq)</div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;ul&gt;\n&lt;li&gt;'</span> + inner + <span class="string">'&lt;/li&gt;\n&lt;/ul&gt;'</span></div></pre></td></tr></table></figure><ol><li>使用<code>@singledispath</code>装饰的普通函数会变成泛函数：根据第一个参数的类型，以不同方式执行相同操作的一族函数</li><li>各个专门函数使用<code>@{base_function}.register({type})</code>装饰</li><li>专门函数的名称无关紧要：<code>_</code>是一个不错的选择，简单明了</li><li>可以叠放多个<code>register</code>装饰器，让同一个函数支持不同的类型</li></ol><h3 id="叠放装饰器"><a href="#叠放装饰器" class="headerlink" title="叠放装饰器"></a>叠放装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@d1</span></div><div class="line"><span class="meta">@d2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">print(<span class="string">'f'</span>)</div></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'f'</span>)</div><div class="line">    </div><div class="line">f = d1(d2(f))</div></pre></td></tr></table></figure><h3 id="参数化装饰器"><a href="#参数化装饰器" class="headerlink" title="参数化装饰器"></a>参数化装饰器</h3><h4 id="参数化注册装饰器"><a href="#参数化注册装饰器" class="headerlink" title="参数化注册装饰器"></a>参数化注册装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">registry = set()  <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(active=True)</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span>  <span class="comment"># 2</span></div><div class="line">        print(<span class="string">'running register(active=%s)-&gt;decorate(%s)'</span></div><div class="line">              % (active, func))</div><div class="line">        <span class="keyword">if</span> active:   <span class="comment"># </span></div><div class="line">            registry.add(func)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            registry.discard(func)  </div><div class="line">        <span class="keyword">return</span> func  </div><div class="line">    <span class="keyword">return</span> decorate  <span class="comment"># 3</span></div><div class="line"></div><div class="line"><span class="meta">@register(active=False)  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'running f1()'</span>)</div><div class="line"></div><div class="line"><span class="meta">@register()  # 4</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'running f2()'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'running f3()'</span>)</div></pre></td></tr></table></figure><ol><li><code>registry</code>现在是个<code>set</code>对象，这样添加和删除函数的速度更快</li><li><code>decorate</code>这个内部函数是真正的装饰器，它的参数必须是一个函数，并且必须返回一个函数</li><li><code>registrer</code>是装饰器工厂函数，因此返回<code>decorate</code></li><li><code>@register</code>工厂函数必须作为函数调用，并且传入所需的参数，即使不传入参数，<code>register</code>也必须作为函数调用，如<code>@register()</code>，即要返回真正的装饰器<code>decorate</code></li></ol><h4 id="参数化clock函数"><a href="#参数化clock函数" class="headerlink" title="参数化clock函数"></a>参数化clock函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">DEFAULT_FMT = <span class="string">'[&#123;elapsed:0.8f&#125;s] &#123;name&#125;(&#123;args&#125;) -&gt; &#123;result&#125;'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(fmt=DEFAULT_FMT)</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span>      </div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*_args)</span>:</span> </div><div class="line">            t0 = time.time()</div><div class="line">            _result = func(*_args)  </div><div class="line">            elapsed = time.time() - t0</div><div class="line">            name = func.__name__</div><div class="line">            args = <span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> _args)  <span class="comment"># 1</span></div><div class="line">            result = repr(_result)  <span class="comment"># 2</span></div><div class="line">            print(fmt.format(**locals()))  <span class="comment"># 3  </span></div><div class="line">            <span class="keyword">return</span> _result  </div><div class="line">        <span class="keyword">return</span> clocked  </div><div class="line">    <span class="keyword">return</span> decorate  </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line"><span class="meta">    @clock()  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></div><div class="line">        time.sleep(seconds)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        snooze(<span class="number">.123</span>)</div></pre></td></tr></table></figure><ol><li><code>_args</code>是<code>clocked</code>的参数，<code>args</code>是用于显示的字符串</li><li><code>result</code>是<code>_result</code>的字符串表示形式，用于显示</li><li><code>locals()</code>存储着<code>clocked</code>的局部变量，供格式化使用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一等函数&quot;&gt;&lt;a href=&quot;#一等函数&quot; class=&quot;headerlink&quot; title=&quot;一等函数&quot;&gt;&lt;/a&gt;一等函数&lt;/h2&gt;&lt;p&gt;在Python中，函数是一等对象。编程语言理论家把&lt;strong&gt;一等对象&lt;/strong&gt;定义为满足下述条件的程序实体：&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://printxhl.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 部署</title>
    <link href="http://printxhl.com/2018/05/30/SearchEngine-Elasticsearch-Ready/"/>
    <id>http://printxhl.com/2018/05/30/SearchEngine-Elasticsearch-Ready/</id>
    <published>2018-05-30T06:54:56.836Z</published>
    <updated>2018-10-15T08:31:16.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES-概述"><a href="#ES-概述" class="headerlink" title="ES 概述"></a>ES 概述</h2><h4 id="Near-Realtime"><a href="#Near-Realtime" class="headerlink" title="Near Realtime"></a>Near Realtime</h4><p><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p><p><a href="https://blog.csdn.net/zwgdft/article/details/54585644" target="_blank" rel="external">https://blog.csdn.net/zwgdft/article/details/54585644</a></p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html</a></p><p><a href="https://blog.csdn.net/kongxx/article/details/52993057" target="_blank" rel="external">https://blog.csdn.net/kongxx/article/details/52993057</a></p><p><a href="https://blog.csdn.net/sinat_28224453/article/details/51134978" target="_blank" rel="external">https://blog.csdn.net/sinat_28224453/article/details/51134978</a></p><p><a href="https://blog.csdn.net/zlghitler/article/details/1523645" target="_blank" rel="external">https://blog.csdn.net/zlghitler/article/details/1523645</a></p><h2 id="ES-安装"><a href="#ES-安装" class="headerlink" title="ES 安装"></a>ES 安装</h2><h3 id="安装-ES"><a href="#安装-ES" class="headerlink" title="安装 ES"></a>安装 ES</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装Java</span></div><div class="line">yum install -y java-1.8.0-openjdk-devel</div><div class="line"></div><div class="line"><span class="comment"># 添加es用户, root启动es会报错</span></div><div class="line">useradd es</div><div class="line">passwd es</div><div class="line"></div><div class="line"><span class="comment"># 给es用户添加sudo权限</span></div><div class="line">$ vim /etc/sudoers  <span class="comment"># 修改wheel</span></div><div class="line">%wheel  ALL=(ALL)       NOPASSWD: ALL</div><div class="line">usermod -G wheel es</div><div class="line"></div><div class="line"><span class="comment"># 安装Es</span></div><div class="line">su - es</div><div class="line">mdkir &#123;data, logs&#125;   <span class="comment"># 用于存入数据和日志，避免使用系统盘</span></div><div class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.4.zip</div><div class="line">unzip elasticsearch-6.2.4.zip</div><div class="line">sudo mv elasticsearch-6.2.4 /usr/<span class="built_in">local</span>/</div><div class="line">sudo ln -sf /usr/<span class="built_in">local</span>/elasticserch /usr/<span class="built_in">local</span>/es</div></pre></td></tr></table></figure><h3 id="配置-ES"><a href="#配置-ES" class="headerlink" title="配置 ES"></a>配置 ES</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 配置ES</span></div><div class="line">$ vim /usr/<span class="built_in">local</span>/es/config/elasticsearch.yml</div><div class="line">path.data: /home/es/data       <span class="comment"># 数据存放路径</span></div><div class="line">path.logs: /home/es/logs       <span class="comment"># 日志存放路径</span></div><div class="line">cluster.name: elasticsearch    <span class="comment"># 集群名</span></div><div class="line">node.name: node-2              <span class="comment"># 节点名，唯一</span></div><div class="line">network.host: 192.168.3.56     <span class="comment"># 绑定域名，默认为环回地址127.0.0.1</span></div><div class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"192.168.3.55"</span>, <span class="string">"192.168.3.57"</span>]   <span class="comment"># 广播地址，发现集群节点</span></div><div class="line">discovery.zen.minimum_master_nodes: 2   <span class="comment"># 避免脑裂问题，一个节点需要看到的具有master节点资格的最小数量，然后才能在集群中操作，推荐(N/2)+1</span></div><div class="line"></div><div class="line"><span class="comment"># 配置jvm, zero-based compressed oops</span></div><div class="line">$ vim /usr/<span class="built_in">local</span>/es/config/jvm.options</div><div class="line">-Xms2g</div><div class="line">-Xmx2g</div></pre></td></tr></table></figure><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 避免使用内存交换</span></div><div class="line">sudo swapoff -a    <span class="comment"># 关闭系统的内存交换</span></div><div class="line">$ vim /usr/<span class="built_in">local</span>/es/config/elasticsearch.yml</div><div class="line">bootstrap.memory_lock: <span class="literal">true</span>    <span class="comment"># 或者禁止es使用内存交换空间</span></div><div class="line"></div><div class="line"><span class="comment"># 提高进程可以打开文件的最大数</span></div><div class="line"><span class="built_in">ulimit</span> -n 65536                    <span class="comment"># 暂时的</span></div><div class="line">$ vim /etc/security/limits.conf    <span class="comment"># 或者永久的</span></div><div class="line">es        -    nofile           65536</div><div class="line"></div><div class="line"><span class="comment"># 提高虚拟内存</span></div><div class="line">sysctl -w vm.max_map_count=262144   <span class="comment"># 暂时的</span></div><div class="line">$ vim /etc/sysctl.conf              <span class="comment"># 或者永久的</span></div><div class="line">vm.max_map_count=262144</div><div class="line"></div><div class="line"><span class="comment"># 提高并发数</span></div><div class="line"><span class="built_in">ulimit</span> -u 4096                      <span class="comment"># 暂时的</span></div><div class="line">$ vim /etc/security/limits.conf     <span class="comment"># 或者永久的</span></div><div class="line">es        -    nproc           4096</div></pre></td></tr></table></figure><h3 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动，后台运行，记录pid</span></div><div class="line">/usr/<span class="built_in">local</span>/es/bin/elasticsearch -d -p pid</div><div class="line"></div><div class="line"><span class="comment"># 停止</span></div><div class="line">cat /usr/<span class="built_in">local</span>/es/pid | xargs <span class="built_in">kill</span> -9</div><div class="line"></div><div class="line"><span class="comment"># 简易版的开机自启动</span></div><div class="line">$ vim /etc/rc.local</div><div class="line">/usr/<span class="built_in">local</span>/es/bin/elasticsearch -d -p pid</div></pre></td></tr></table></figure><h2 id="ES插件安装"><a href="#ES插件安装" class="headerlink" title="ES插件安装"></a>ES插件安装</h2><p><a href="https://blog.csdn.net/vbirdbest/article/details/79194244" target="_blank" rel="external">各种插件的安装</a></p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改elasticsearch.yml, 修改完后要重启的</span></div><div class="line">$ vim /usr/<span class="built_in">local</span>/es/config/elasticsearch.yml</div><div class="line">http.cors.enabled: <span class="literal">true</span>  </div><div class="line">http.cors.allow-origin: <span class="string">"*"</span></div><div class="line"></div><div class="line"><span class="comment"># 下载head插件</span></div><div class="line"><span class="built_in">cd</span> /home/es/tools   <span class="comment"># 不能安装在es的plugins目录下，启动报错</span></div><div class="line">wget  https://github.com/mobz/elasticsearch-head/archive/master.zip</div><div class="line">upzip master.zip -d ../</div><div class="line">mv elasticsearch-head-mater head</div><div class="line"></div><div class="line"><span class="comment"># 修改head插件源码</span></div><div class="line">$ vim /home/es/head/Gruntfile.js   <span class="comment"># 修改服务器监听地址</span></div><div class="line">connect: &#123;</div><div class="line">          server: &#123;</div><div class="line">                   options: &#123;</div><div class="line">                        port: 9100,</div><div class="line">                        base: <span class="string">'.'</span>,</div><div class="line">                        keepalive: <span class="literal">true</span>,</div><div class="line">                        hostname: <span class="string">'*'</span></div><div class="line">                    &#125;</div><div class="line">          &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="comment"># 安装node，启动</span></div><div class="line"><span class="built_in">cd</span> /home/es/head</div><div class="line">yum install nodejs</div><div class="line">npm install</div><div class="line">npm run start &amp;</div></pre></td></tr></table></figure><h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载kibana</span></div><div class="line"><span class="built_in">cd</span> /home/es</div><div class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.2.4-linux-x86_64.tar.gz</div><div class="line">tar -zvxf kibana-6.2.4-linux-x86_64.tar.gz</div><div class="line">mv kibana-6.2.4-linux-x86_64/ kibana</div><div class="line"></div><div class="line"><span class="comment"># 更改kibana配置</span></div><div class="line">$ vim /home/es/kibana/kibana.yml</div><div class="line">server.host: 192.168.3.56</div><div class="line">elasticsearch.url: <span class="string">"http://192.168.3.56:9200"</span></div><div class="line"></div><div class="line"><span class="comment"># 启动</span></div><div class="line">nohup /home/es/kibana/bin/kibana &amp;</div></pre></td></tr></table></figure><h4 id="ik分词器"><a href="#ik分词器" class="headerlink" title="ik分词器"></a>ik分词器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载ik，对应es版本</span></div><div class="line"><span class="built_in">cd</span> /home/tools</div><div class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.4/elasticsearch-analysis-ik-6.2.4.zip</div><div class="line">unzip elasticsearch-analysis-ik-6.2.4.zip</div><div class="line">mv elasticsearch /usr/<span class="built_in">local</span>/es/plugins</div><div class="line"></div><div class="line"><span class="comment"># 重启es,并测试，分词器ik_max_word和ik_smart</span></div><div class="line">curl -XGET -H <span class="string">'Content-Type: application/json'</span> <span class="string">'http://192.168.0.83:9200/_analyze?pretty'</span> -d <span class="string">'&#123;</span></div><div class="line"><span class="string">"analyzer" : "ik_max_word",   </span></div><div class="line"><span class="string">"text": "中华人民共和国国歌"</span></div><div class="line"><span class="string">&#125;'</span></div></pre></td></tr></table></figure><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><ol><li>当集群中的节点变多时，就需要指定专用节点做特定的工作，参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/modules-node.html" target="_blank" rel="external">node</a><ul><li>Master-eligible node</li><li>Data node</li><li>Ingest node</li><li>Tribe node</li><li>Coordinating node</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES-概述&quot;&gt;&lt;a href=&quot;#ES-概述&quot; class=&quot;headerlink&quot; title=&quot;ES 概述&quot;&gt;&lt;/a&gt;ES 概述&lt;/h2&gt;&lt;h4 id=&quot;Near-Realtime&quot;&gt;&lt;a href=&quot;#Near-Realtime&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="SE" scheme="http://printxhl.com/tags/SE/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://printxhl.com/2018/05/30/Tool-RabbitMQ/"/>
    <id>http://printxhl.com/2018/05/30/Tool-RabbitMQ/</id>
    <published>2018-05-30T06:54:56.425Z</published>
    <updated>2018-05-14T03:55:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h2><h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加erlang solutions源，安装最新版本</span></div><div class="line">wget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm</div><div class="line">rpm -Uvh erlang-solutions-1.0-1.noarch.rpm  <span class="comment"># -U表示安装包，-vh表示显示进度</span></div><div class="line">yum install erlang  </div><div class="line"><span class="comment"># 这里有个报错，不知道什么鬼：[Errno -1] Metadata file does not match checksum</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 限制版本，避免被yum升级</span></div><div class="line">yum install yum-plugin-versionlock</div><div class="line">yum versionlock erlang*</div></pre></td></tr></table></figure><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.4/rabbitmq-server-3.7.4-1.el7.noarch.rpm</div><div class="line">yum install rabbitmq-server-3.7.4-1.el7.noarch.rpm</div></pre></td></tr></table></figure><h3 id="配置-RabbitMQ"><a href="#配置-RabbitMQ" class="headerlink" title="配置 RabbitMQ"></a>配置 RabbitMQ</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> rabbitmq-server   <span class="comment"># 添加开机启动RabbitMQ服务</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start rabbitmq-server    <span class="comment"># 启动服务</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo systemctl status rabbitmq-server   <span class="comment"># 查看服务状态</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop rabbitmq-server     <span class="comment"># 停止服务</span></span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看当前所有用户</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rabbitmqctl list_users</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看默认guest用户的权限</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rabbitmqctl list_user_permissions guest</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 由于RabbitMQ默认的账号用户名和密码都是guest。为了安全起见, 先删掉默认用户</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rabbitmqctl delete_user guest</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 添加新用户</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rabbitmqctl add_user username password</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 设置用户tag</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rabbitmqctl set_user_tags username administrator</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 赋予用户默认vhost的全部操作权限</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rabbitmqctl set_permissions -p / username <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 查看用户的权限</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo rabbitmqctl list_user_permissions username</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 开启web管理接口, http://localhost:15672</span></div><div class="line">sudo rabbitmq-plugins enable rabbitmq_management</div></pre></td></tr></table></figure><h3 id="RabbitMQ-配置文件"><a href="#RabbitMQ-配置文件" class="headerlink" title="RabbitMQ 配置文件"></a>RabbitMQ 配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /etc/rabbitmq/rabbitmq.conf</div><div class="line"><span class="comment"># https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example</span></div></pre></td></tr></table></figure><p><a href="http://rabbitmq.mr-ping.com/AMQP/AMQP_0-9-1_Model_Explained.html" target="_blank" rel="external">http://rabbitmq.mr-ping.com/AMQP/AMQP_0-9-1_Model_Explained.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RabbitMQ-安装&quot;&gt;&lt;a href=&quot;#RabbitMQ-安装&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 安装&quot;&gt;&lt;/a&gt;RabbitMQ 安装&lt;/h2&gt;&lt;h3 id=&quot;安装-Erlang&quot;&gt;&lt;a href=&quot;#安装-Erlan
      
    
    </summary>
    
    
      <category term="Web" scheme="http://printxhl.com/tags/Web/"/>
    
      <category term="Python" scheme="http://printxhl.com/tags/Python/"/>
    
      <category term="MQ" scheme="http://printxhl.com/tags/MQ/"/>
    
  </entry>
  
</feed>
