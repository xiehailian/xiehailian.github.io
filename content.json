[{"title":"Profiling Go Programs","date":"2019-05-16T02:55:11.125Z","path":"2019/05/16/Go-PProf/","text":"pprof是Go语言自带的性能检查工具。通过这个工具可以定位Go语言程序中存在的性能问题，进而优化性能。 环境准备 golang go-wrk，并发测试工具123456go get -v github.com/tsliwowicz/go-wrk# go-wrk需要依赖golang.org/x/net, 国内下载很慢$ mkdir -p $GOPATH/src/golang.org/x$ cd $GOPATH/src/golang.org/x$ git clone https://github.com/golang/net.git graphviz，图形化工具yum install graphviz 利用PProf优化程序性能对代码进行性能分析时，需要导入pprof包： runtime/pprof: 采集程序(非HTTP Server)的运行数据进行分析 net/http/pprof: 采集HTTP Server的运行数据进行分析12345678910111213141516import ( \"net/http\" _ \"net/http/pprof\")func test() &#123; var s []int for i:=0; i&lt; 10000; i++ &#123; s = append(s, i) &#125;&#125;func main() &#123; go test() http.ListenAndServe(\"localhost:8080\", nil)&#125; 在进行分析时，有如下几种模式： 通过WEB界面分析访问http://192.168.56.2:9090/debug/pprof/1234567891011Types of profiles available:Count Profile34 allocs: 查看过去所有的内存分配情况0 block: 查看导致阻塞同步的堆栈跟踪0 cmdline: 当前程序的调用命令行4 goroutine: 查看当前所有运行的 goroutines 堆栈跟踪34 heap: 查看活动对象的内存分配情况0 mutex: 查看导致互斥锁的竞争持有者的堆栈跟踪0 profile: 默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件10 threadcreate: 查看创建新OS线程的堆栈跟踪0 trace: 当前程序的执行路径，可以使用`go tool trace`进行分析 通过命令行分析123456789101112131415161718$ go tool pprof http://localhost:9090/debug/pprof/profileFile: mainType: cpuTime: May 16, 2019 at 3:08pm (CST)Duration: 5.18s, Total samples = 3.28s (63.31%)Entering interactive mode (type \"help\" for commands, \"o\" for options)(pprof) topShowing nodes accounting for 1620ms, 49.39% of 3280ms totalDropped 118 nodes (cum &lt;= 16.40ms)Showing top 10 nodes out of 160 flat flat% sum% cum cum% 1100ms 33.54% 33.54% 1130ms 34.45% syscall.Syscall 80ms 2.44% 35.98% 120ms 3.66% runtime.deferreturn 70ms 2.13% 38.11% 70ms 2.13% runtime.epollwait 60ms 1.83% 39.94% 60ms 1.83% net/http.(*exactSig).match 60ms 1.83% 41.77% 60ms 1.83% runtime.futex 60ms 1.83% 43.60% 80ms 2.44% runtime.mapaccess1_faststr flat: 对应函数的运行耗时 flat%: 对应函数在CPU运行耗时比列 sum%: 对应函数累计使用CPU的总比例 cum: 对应函数加上它的调用的总耗时 cum%: 对应函数加上它的调用的耗时比例 通过可视化界面分析1go tool pprof -http=&quot;192.168.56.2:8080&quot; --seconds 5 http://localhost:9090/debug/pprof/profile 由浅入深的性能分析过程以Profiling and Optimizing Go的性能优化为例子，来介绍pprof性能优化的过程 默认的pprof页面概览 http://192.168.56.2:9090/debug/pprof/ 分析火焰图，定位接口涉及的耗时函数 1$ go tool pprof -http=&quot;192.168.56.2:8080&quot; --seconds 5 http://localhost:9090/debug/pprof/profile 查看函数内部的耗时情况 1$ go tool pprof http://localhost:9090/debug/pprof/profile list regex: 查看regex函数内部的耗时 disasm regex: 查看regex函数对应的汇编码耗时 通过基准测试，生成测试报告，获得更详细的性能分析情况 123$ go test -bench . -benchmem -cpuprofile prof.cpu -memprofile prof.mem$ go tool pprof stats.test prof.cpu$ go tool pprof -alloc_objects stats.test prof.mem 在编译过程进行逃逸分析，尽量避免在堆上分配空间，减少垃圾回收的时间 1$ go build -gcflags=-m . 利用PProf排查程序问题不健壮的程序，比如启动了大量的goroutine没有退出，又或是不使用的对象仍存在于内存中，这些问题都可以通过PProf来快速定位问题 协程泄漏123456789101112131415161718192021import ( &quot;fmt&quot; &quot;net/http&quot; _ &quot;net/http/pprof&quot; &quot;time&quot;)func test(i time.Time) &#123; fmt.Println(i) for &#123; select &#123;&#125; &#125;&#125;func main() &#123; go http.ListenAndServe(&quot;localhost:8080&quot;, nil) c := time.Tick(1 * time.Second) for range c &#123; go test(&lt;-c) &#125;&#125; 访问：http://localhost:8080/debug/pprof/goroutine123goroutine profile: total 8883 @ 0x430690 0x43f480 0x6ef801 0x45c3c1# 0x6ef800 main.test+0xa0 C:/Users/xiehailian/OneDrive/xiehailian/go-base/pkg/pprof/process/process.go:15 goroutine创建后没有退出目前已经有83个协程了，而且一直在积累，导致协程泄漏 内存泄漏 内存溢出：是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory。 内存泄漏：是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光，占光以后内存就溢出了1234567891011121314151617181920import ( &quot;fmt&quot; &quot;net/http&quot; _ &quot;net/http/pprof&quot; &quot;time&quot;)func memoryLeak() &#123; for &#123; select &#123; case &lt;-time.After(3 * time.Second): default: &#125; &#125;&#125;func main() &#123; go memoryLeak() http.ListenAndServe(&quot;localhost:8080&quot;, nil)&#125; 通过命令行查看heap分配情况12345678910$ go tool pprof http://localhost:8080/debug/pprof/heap(pprof) topShowing nodes accounting for 1250.09MB, 100% of 1250.59MB totalDropped 6 nodes (cum &lt;= 6.25MB) flat flat% sum% cum cum% 1034.58MB 82.73% 82.73% 1250.09MB 100% time.NewTimer 215.51MB 17.23% 100% 215.51MB 17.23% time.startTimer 0 0% 100% 1250.09MB 100% main.memoryLeak 0 0% 100% 1250.09MB 100% time.After 此时内存堆积了3s之内的time对象，会不断的新建和释放对象，浪费内存空间以及CPU性能","tags":[{"name":"Go","slug":"Go","permalink":"http://printxhl.com/tags/Go/"}]},{"title":"Hexo Blog","date":"2018-11-05T14:41:48.249Z","path":"2018/11/05/Linux-HexoBlog/","text":"Hexo 本地建站安装环境 安装Node.js 安装Git 安装Hexo 1$ npm install -g hexo-cli 建立站点1234567891011121314# 新建xiehailian.github.io文件夹$ cd /c/Users/XHL/OneDrive$ mkdir xiehailian.github.io# 更新NPM镜像$ npm config set registry 'https://registry.npm.taobao.org'# 初始化网站$ cd /c/Users/XHL/OneDrive/xiehailian.github.io$ hexo init$ npm install# 启动网站$ hexo server 使用主题indigo安装indigo12345678910111213141516# 下载主题$ cd /c/Users/XHL/OneDrive/xiehailian.github.io$ git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo# 安装依赖$ npm install hexo-renderer-less --save # css预处理工具$ npm install hexo-generator-feed --save # 生成rss$ npm install hexo-generator-json-content --save # 站内搜索# 开启标签页$ hexo new page tags$ vi /c/Users/XHL/OneDrive/xiehailian.github.io/source/tags/index.md layout: tags comments: false --- 站点配置123456789101112131415161718192021222324252627282930313233343536373839$ vim /c/Users/XHL/OneDrive/xiehailian.github.io/_config.yml# 启用主题theme: indigo# 基本配置title: PrintXHLsubtitle: 我就想做一点微小的工作description: author: 谢海练language:timezone:email: xiehailian66@126.com# feed配置feed: type: atom path: atom.xml limit: 0 # jsonContent配置jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 主题配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354$ vi /c/Users/XHL/OneDrive/xiehailian.github.io/themes/indigo/._config.yml# 左侧菜单menu: home: text: 主页 url: / archives: url: /archives tags: url: /tags github: url: https://github.com/xiehailian target: _blank link: # fontawesome图标，省略前缀，本主题前缀为 icon-，必须 text: About # 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写 url: /about # 链接，绝对或相对路径，必须 target: _blank # 是否跳出，省略则在当前页面打开# favicon，站点logofavicon: /favicon.ico# 头像avatar: /img/logo.jpg# emailemail: xiehailian66@126.com# colorcolor: '2361b6'# 文章摘要excerpt_render: false # 文章摘要渲染方式: 为 true 时将渲染为 html，否则为文本excerpt_length: 200 # 截断长度excerpt_link: 阅读全文... # 文字正文页链接文字# 公式渲染mathjax: true# 站内搜索search: true# 布局hideMenu: true# 文章目录toc: list_number: false # 决定导航使用的标签， true 为 ol， false 为 ul # less编译入口less: compress: true # 是否压缩css paths: - source/css/style.less 生成自己的内容12345$ hexo generate$ hexo server -p 6688# 清楚缓存文件和静态文件$ hexo clean 部署到GithubGithub 授权123456789101112131415161718# 在Github上新建仓库，xiehailian.github.io# 告诉Github代码是谁提交的$ git config --global user.name \"xiehailian\"$ git config --global user.email \"xiehailian66@126.com\"# 生成SSH key$ ssh-keygen -t rsa -b 4096 -C \"xiehailian66@126.com\"# 将SSH key添加到ssh-agent$ eval \"$(ssh-agent -s)\"$ ssh-add ~/.ssh/id_rsa# 将SSH key添加到Github账户$ clip &lt; ~/.ssh/id_rsa.pub# 测试SSH连接$ ssh -T git@github.com Hexo 部署12345678910$ npm install hexo-deployer-git --save$ vim /c/Users/XHL/OneDrive/xiehailian.github.io/_config.ymldeploy: type: git repo: https://github.com/xiehailian/xiehailian.github.io.git branch: master $ hexo deploy 绑定独立域名","tags":[{"name":"Linux","slug":"Linux","permalink":"http://printxhl.com/tags/Linux/"},{"name":"Git","slug":"Git","permalink":"http://printxhl.com/tags/Git/"}]}]